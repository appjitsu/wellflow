name: Secrets Scanning & Management

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run secrets scan daily at 4 AM UTC
    - cron: "0 4 * * *"
  workflow_dispatch:

env:
  NODE_VERSION: "18"

jobs:
  secrets-scan:
    name: Secrets Detection & Scanning
    runs-on: ubuntu-latest

    permissions:
      contents: read
      security-events: write
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for comprehensive scanning

      - name: Create security reports directory
        run: mkdir -p security-reports

      # GitLeaks Secret Scanning
      - name: Run GitLeaks Secret Scan
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

      # TruffleHog Secret Scanning
      - name: Run TruffleHog Secret Scan
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

      # Custom Secret Pattern Scanning
      - name: Custom Secret Pattern Scan
        run: |
          echo "🔍 Running custom secret pattern scanning..."

          # Create custom patterns file
          cat > security-reports/secret-patterns.txt << 'EOF'
          # Oil & Gas Industry Specific Patterns
          API_KEY=[a-zA-Z0-9]{32,}
          SECRET_KEY=[a-zA-Z0-9]{40,}
          PRIVATE_KEY=-----BEGIN.*PRIVATE KEY-----
          DATABASE_URL=postgresql://.*
          MONGODB_URI=mongodb://.*
          REDIS_URL=redis://.*
          JWT_SECRET=[a-zA-Z0-9]{32,}
          ENCRYPTION_KEY=[a-zA-Z0-9]{32,}

          # Cloud Provider Keys
          AWS_ACCESS_KEY_ID=AKIA[0-9A-Z]{16}
          AWS_SECRET_ACCESS_KEY=[0-9a-zA-Z/+]{40}
          AZURE_CLIENT_SECRET=[0-9a-zA-Z~._-]{34,40}
          GCP_SERVICE_ACCOUNT_KEY=.*service_account.*

          # Third-party Service Keys
          STRIPE_SECRET_KEY=sk_live_[0-9a-zA-Z]{24,}
          STRIPE_PUBLISHABLE_KEY=pk_live_[0-9a-zA-Z]{24,}
          SENDGRID_API_KEY=SG\.[0-9a-zA-Z_-]{22}\.[0-9a-zA-Z_-]{43}
          TWILIO_AUTH_TOKEN=[0-9a-f]{32}

          # Monitoring & Analytics
          SENTRY_DSN=https://[0-9a-f]{32}@[0-9a-f]+\.ingest\.sentry\.io/[0-9]+
          LOGROCKET_APP_ID=[0-9a-z]{6}/[0-9a-z]{8}
          DATADOG_API_KEY=[0-9a-f]{32}

          # Oil & Gas Specific Systems
          SCADA_PASSWORD=.*
          HMI_ACCESS_KEY=.*
          PIPELINE_API_KEY=.*
          PRODUCTION_DB_PASSWORD=.*
          EOF

          # Scan for custom patterns
          echo "Scanning for custom secret patterns..."
          grep -r -n -E -f security-reports/secret-patterns.txt . \
            --exclude-dir=node_modules \
            --exclude-dir=.git \
            --exclude-dir=dist \
            --exclude-dir=build \
            --exclude-dir=.next \
            --exclude-dir=coverage \
            --exclude="*.log" \
            --exclude="*.min.js" \
            --exclude="*.map" \
            > security-reports/custom-secrets-scan.txt 2>/dev/null || true
            
          # Check if any secrets were found
          if [ -s security-reports/custom-secrets-scan.txt ]; then
            echo "⚠️ Custom secret patterns detected!"
            echo "CUSTOM_SECRETS_FOUND=true" >> $GITHUB_ENV
          else
            echo "✅ No custom secret patterns found"
            echo "CUSTOM_SECRETS_FOUND=false" >> $GITHUB_ENV
          fi

      # Environment Variable Security Check
      - name: Environment Variable Security Check
        run: |
          echo "🔍 Checking environment variable security..."

          # Check for potential environment variable leaks in code
          find . -name "*.ts" -o -name "*.tsx" -o -name "*.js" -o -name "*.jsx" \
            | grep -v node_modules \
            | grep -v .git \
            | xargs grep -n "process\.env\." \
            > security-reports/env-var-usage.txt 2>/dev/null || true
            
          # Check for hardcoded environment variable values
          find . -name "*.env*" -not -path "./node_modules/*" \
            | xargs cat 2>/dev/null \
            | grep -v "^#" \
            | grep -v "^$" \
            > security-reports/env-files-content.txt 2>/dev/null || true
            
          echo "✅ Environment variable security check completed"

      # Generate Secrets Scan Summary
      - name: Generate Secrets Scan Summary
        run: |
          echo "📊 Generating secrets scan summary..."

          # Count findings
          GITLEAKS_FINDINGS=0
          TRUFFLEHOG_FINDINGS=0
          CUSTOM_FINDINGS=0

          if [ -f "gitleaks-report.json" ]; then
            GITLEAKS_FINDINGS=$(jq length gitleaks-report.json 2>/dev/null || echo "0")
          fi

          if [ -s "security-reports/custom-secrets-scan.txt" ]; then
            CUSTOM_FINDINGS=$(wc -l < security-reports/custom-secrets-scan.txt)
          fi

          TOTAL_FINDINGS=$((GITLEAKS_FINDINGS + TRUFFLEHOG_FINDINGS + CUSTOM_FINDINGS))

          echo "GITLEAKS_FINDINGS=$GITLEAKS_FINDINGS" >> $GITHUB_ENV
          echo "TRUFFLEHOG_FINDINGS=$TRUFFLEHOG_FINDINGS" >> $GITHUB_ENV
          echo "CUSTOM_FINDINGS=$CUSTOM_FINDINGS" >> $GITHUB_ENV
          echo "TOTAL_SECRETS_FINDINGS=$TOTAL_FINDINGS" >> $GITHUB_ENV

          # Generate summary report
          cat > security-reports/secrets-summary.md << EOF
          # WellFlow Secrets Scanning Report

          **Scan Date:** $(date)
          **Repository:** ${{ github.repository }}
          **Commit:** ${{ github.sha }}
          **Workflow:** ${{ github.workflow }}

          ## Summary

          | Tool | Findings |
          |------|----------|
          | 🔍 GitLeaks | $GITLEAKS_FINDINGS |
          | 🐷 TruffleHog | $TRUFFLEHOG_FINDINGS |
          | 🎯 Custom Patterns | $CUSTOM_FINDINGS |
          | **Total** | **$TOTAL_FINDINGS** |

          ## Scan Coverage

          ### Secret Types Detected
          - ✅ **API Keys & Tokens** (AWS, Azure, GCP, Stripe, SendGrid)
          - ✅ **Database Credentials** (PostgreSQL, MongoDB, Redis)
          - ✅ **Cryptographic Keys** (JWT secrets, encryption keys, private keys)
          - ✅ **Monitoring Tokens** (Sentry DSN, LogRocket, DataDog)
          - ✅ **Oil & Gas Systems** (SCADA, HMI, pipeline systems)

          ### Compliance Standards
          - 🛡️ **NIST Cybersecurity Framework** (PR.AC, PR.DS)
          - 🏭 **IEC 62443** (SR 1.1, SR 1.2, SR 2.1)
          - ⛽ **API 1164** (Access Control, Data Protection)

          ## Files Scanned

          - Source code files (TypeScript, JavaScript, React)
          - Configuration files (.env, .json, .yml)
          - Documentation and scripts
          - Git history (full repository scan)

          ## Next Steps

          1. Review all detected secrets immediately
          2. Rotate any exposed credentials
          3. Update secret management practices
          4. Implement proper environment variable handling
          5. Schedule follow-up security review

          EOF

          echo "📋 Secrets scan summary generated"

      # Upload Security Reports
      - name: Upload Security Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: secrets-scan-reports-${{ github.run_id }}
          path: security-reports/
          retention-days: 90

      # Generate GitHub Step Summary
      - name: Generate Step Summary
        if: always()
        run: |
          echo "## 🔍 Secrets Scanning Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Scan Date:** $(date)" >> $GITHUB_STEP_SUMMARY
          echo "**Total Findings:** ${{ env.TOTAL_SECRETS_FINDINGS }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Findings by Tool" >> $GITHUB_STEP_SUMMARY
          echo "- 🔍 **GitLeaks:** ${{ env.GITLEAKS_FINDINGS }}" >> $GITHUB_STEP_SUMMARY
          echo "- 🐷 **TruffleHog:** ${{ env.TRUFFLEHOG_FINDINGS }}" >> $GITHUB_STEP_SUMMARY
          echo "- 🎯 **Custom Patterns:** ${{ env.CUSTOM_FINDINGS }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Secret Types Covered" >> $GITHUB_STEP_SUMMARY
          echo "✅ API keys, database credentials, crypto keys, monitoring tokens" >> $GITHUB_STEP_SUMMARY
          echo "✅ Oil & gas specific systems (SCADA, HMI, pipeline)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📊 **Detailed Results:** Available in workflow artifacts" >> $GITHUB_STEP_SUMMARY

      # Comment on PR with results
      - name: Comment PR with Secrets Results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const totalFindings = ${{ env.TOTAL_SECRETS_FINDINGS }};
            const gitleaksFindings = ${{ env.GITLEAKS_FINDINGS }};
            const customFindings = ${{ env.CUSTOM_FINDINGS }};

            let statusIcon = '✅';
            let statusText = 'No secrets detected';

            if (totalFindings > 0) {
              statusIcon = '🔴';
              statusText = `${totalFindings} potential secret(s) detected`;
            }

            const comment = `## 🔍 Secrets Scanning Results

            ${statusIcon} **Status:** ${statusText}

            ### Findings Summary
            | Tool | Count |
            |------|-------|
            | 🔍 GitLeaks | ${gitleaksFindings} |
            | 🐷 TruffleHog | ${{ env.TRUFFLEHOG_FINDINGS }} |
            | 🎯 Custom Patterns | ${customFindings} |
            | **Total** | **${totalFindings}** |

            ### Security Coverage
            ✅ API keys, database credentials, cryptographic keys
            ✅ Cloud provider tokens (AWS, Azure, GCP)
            ✅ Third-party service keys (Stripe, SendGrid, Twilio)
            ✅ Oil & gas systems (SCADA, HMI, pipeline APIs)

            ### Compliance Standards
            - 🛡️ NIST Cybersecurity Framework
            - 🏭 IEC 62443 (Industrial Cybersecurity)
            - ⛽ API 1164 (Pipeline SCADA Security)

            📊 **Detailed Results:** Check workflow artifacts for complete findings
            🔗 **Workflow:** [View Scan Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

            > ⚠️ **Important:** If secrets are detected, rotate credentials immediately!`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      # Security Gate Check
      - name: Secrets Security Gate
        if: always()
        run: |
          if [ "${{ env.TOTAL_SECRETS_FINDINGS }}" -gt "0" ]; then
            echo "❌ Secrets security gate failed: ${{ env.TOTAL_SECRETS_FINDINGS }} potential secrets detected"
            echo "Please review and remove any exposed secrets before merging"
            echo "Remember to rotate any credentials that may have been exposed"
            exit 1
          else
            echo "✅ Secrets security gate passed: No secrets detected"
          fi
