name: SonarQube Code Quality Analysis

on:
  push:
    branches: [main, develop, "feat/*", "fix/*", "chore/*"]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run daily at 2 AM UTC for continuous monitoring
    - cron: "0 2 * * *"

jobs:
  sonarqube-analysis:
    name: SonarQube Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Fetch full history for better analysis
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "pnpm"

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run tests with coverage
        run: |
          pnpm run test:coverage
          pnpm run test:coverage:api
        continue-on-error: true

      - name: Run ESLint with SARIF output
        run: |
          mkdir -p reports
          pnpm run lint:sarif || true
        continue-on-error: true

      - name: Run TypeScript compilation check
        run: pnpm run type-check
        continue-on-error: true

      - name: Generate SonarQube properties
        run: |
          cat > sonar-project.properties << EOF
          # SonarQube Configuration for WellFlow Oil & Gas Production Monitoring
          sonar.projectKey=wellflow-oil-gas-monitoring
          sonar.projectName=WellFlow Production Monitoring Platform
          sonar.projectVersion=1.0.0
          sonar.organization=wellflow-org

          # Source and test directories
          sonar.sources=apps,packages
          sonar.tests=apps,packages
          sonar.test.inclusions=**/*.test.ts,**/*.test.tsx,**/*.spec.ts,**/*.spec.tsx
          sonar.exclusions=**/node_modules/**,**/dist/**,**/build/**,**/.next/**,**/coverage/**,**/*.config.js,**/*.config.ts

          # Language-specific settings
          sonar.typescript.lcov.reportPaths=coverage/lcov.info,apps/web/coverage/lcov.info,apps/api/coverage/lcov.info
          sonar.javascript.lcov.reportPaths=coverage/lcov.info,apps/web/coverage/lcov.info,apps/api/coverage/lcov.info

          # ESLint reports
          sonar.eslint.reportPaths=reports/eslint-report.json

          # Quality gates for critical oil & gas infrastructure
          sonar.qualitygate.wait=true

          # Security and reliability focus
          sonar.security.hotspots.inheritance=INHERITED
          sonar.security.review.rating=A
          sonar.reliability.rating=A
          sonar.maintainability.rating=A

          # Coverage requirements for critical infrastructure
          sonar.coverage.exclusions=**/*.config.js,**/*.config.ts,**/*.d.ts,**/types/**

          # Oil & Gas industry specific rules
          sonar.issue.ignore.multicriteria=e1,e2,e3
          sonar.issue.ignore.multicriteria.e1.ruleKey=typescript:S1186
          sonar.issue.ignore.multicriteria.e1.resourceKey=**/*.test.ts
          sonar.issue.ignore.multicriteria.e2.ruleKey=typescript:S125
          sonar.issue.ignore.multicriteria.e2.resourceKey=**/docs/**
          sonar.issue.ignore.multicriteria.e3.ruleKey=javascript:S3776
          sonar.issue.ignore.multicriteria.e3.resourceKey=**/legacy/**
          EOF

      - name: SonarQube Scan
        uses: sonarqube-quality-gate-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          projectBaseDir: .
        continue-on-error: true

      - name: SonarQube Quality Gate Check
        uses: sonarqube-quality-gate-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        timeout-minutes: 5
        continue-on-error: true

      - name: Generate SonarQube Report Summary
        if: always()
        run: |
          mkdir -p sonarqube-reports

          # Create comprehensive SonarQube analysis summary
          cat > sonarqube-reports/sonarqube-summary.md << 'EOF'
          # WellFlow SonarQube Code Quality Analysis Report

          **Generated:** $(date)
          **Repository:** ${{ github.repository }}
          **Branch:** ${{ github.ref_name }}
          **Commit:** ${{ github.sha }}

          ## Executive Summary

          This report provides comprehensive code quality analysis for WellFlow's oil & gas production monitoring platform using SonarQube static analysis.

          ## Analysis Scope

          - **Applications**: Web frontend (Next.js), API backend (NestJS)
          - **Packages**: Shared UI components, utilities, and configurations
          - **Languages**: TypeScript, JavaScript, CSS, HTML
          - **Test Coverage**: Unit tests, integration tests, E2E tests

          ## Quality Metrics

          ### Code Quality Gates
          - **Reliability Rating**: Target A (no bugs in new code)
          - **Security Rating**: Target A (no vulnerabilities in new code)
          - **Maintainability Rating**: Target A (technical debt ratio < 5%)
          - **Coverage**: Target 80% minimum for critical oil & gas infrastructure
          - **Duplicated Lines**: Target < 3% for maintainable codebase

          ### Oil & Gas Industry Compliance
          - **Critical Infrastructure Standards**: IEC 62443, NIST Cybersecurity Framework
          - **Safety Requirements**: Zero tolerance for security vulnerabilities
          - **Regulatory Compliance**: API 1164 pipeline SCADA security standards
          - **Code Maintainability**: High standards for long-term operational reliability

          ## Key Focus Areas

          ### Security Analysis
          - **Security Hotspots**: Identification of potential security vulnerabilities
          - **OWASP Top 10**: Coverage of web application security risks
          - **Injection Vulnerabilities**: SQL injection, command injection prevention
          - **Authentication & Authorization**: Secure access control implementation

          ### Reliability Analysis
          - **Bug Detection**: Identification of potential runtime errors
          - **Exception Handling**: Proper error handling for critical operations
          - **Resource Management**: Memory leaks and resource cleanup
          - **Concurrency Issues**: Thread safety and race condition detection

          ### Maintainability Analysis
          - **Code Smells**: Identification of maintainability issues
          - **Complexity Analysis**: Cyclomatic complexity and cognitive complexity
          - **Duplication Detection**: Code duplication and refactoring opportunities
          - **Documentation Coverage**: Code documentation and comments analysis

          ## Industry-Specific Considerations

          ### Oil & Gas Production Monitoring
          - **Real-time Data Processing**: Performance and reliability requirements
          - **Emergency Response Systems**: High availability and fault tolerance
          - **Regulatory Reporting**: Data integrity and audit trail requirements
          - **Field Operations**: Mobile and offline capability considerations

          ### Critical Infrastructure Security
          - **Zero-Trust Architecture**: Comprehensive security validation
          - **Supply Chain Security**: Dependency vulnerability analysis
          - **Access Control**: Role-based access control (RBAC) implementation
          - **Audit Logging**: Comprehensive logging for compliance and forensics

          ## Recommendations

          ### High Priority
          - Address all security vulnerabilities immediately
          - Fix reliability issues that could impact production monitoring
          - Resolve critical maintainability issues affecting code quality

          ### Medium Priority
          - Improve test coverage for critical business logic
          - Reduce code duplication through refactoring
          - Enhance documentation for complex algorithms

          ### Low Priority
          - Address minor code smells and style issues
          - Optimize performance for non-critical components
          - Improve code organization and structure

          ## Next Steps

          1. **Review Quality Gate Results**: Address any failing quality gates
          2. **Security Remediation**: Fix identified security vulnerabilities
          3. **Technical Debt Management**: Plan refactoring for maintainability issues
          4. **Continuous Monitoring**: Integrate SonarQube into CI/CD pipeline
          5. **Team Training**: Provide training on identified code quality issues

          ---
          *Generated by WellFlow SonarQube Analysis Pipeline*
          EOF

      - name: Upload SonarQube Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: sonarqube-reports
          path: sonarqube-reports/
          retention-days: 90

      - name: Comment PR with SonarQube Results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            // Read SonarQube summary
            let summary = '';
            try {
              summary = fs.readFileSync('sonarqube-reports/sonarqube-summary.md', 'utf8');
            } catch (error) {
              summary = '## SonarQube Analysis\n\nSonarQube analysis completed. Check the workflow logs for detailed results.';
            }

            // Create or update PR comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && comment.body.includes('SonarQube Analysis')
            );

            const commentBody = `## 🔍 SonarQube Code Quality Analysis

            ${summary}

            **Analysis Details:**
            - **Workflow Run**: [View Details](${context.payload.repository.html_url}/actions/runs/${context.runId})
            - **Commit**: ${context.sha.substring(0, 7)}
            - **Branch**: ${context.ref.replace('refs/heads/', '')}

            ---
            *This comment is automatically updated by the SonarQube analysis workflow.*`;

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
            }
