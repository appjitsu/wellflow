name: License Compliance Check

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run weekly on Sundays at 2 AM UTC
    - cron: "0 2 * * 0"

jobs:
  license-compliance:
    name: License Compliance Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      issues: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "pnpm"

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install license-checker globally
        run: npm install -g license-checker

      - name: Install workspace dependencies
        run: |
          # Install dependencies for each workspace
          cd apps/web && pnpm install --frozen-lockfile
          cd ../api && pnpm install --frozen-lockfile
          cd ../docs && pnpm install --frozen-lockfile || echo "Docs workspace may not exist"

      - name: Run license compliance check
        run: pnpm run license:check

      - name: Upload license compliance report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: license-compliance-report
          path: license-reports/
          retention-days: 30

      - name: Comment PR with license violations
        if: failure() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            try {
              const reportPath = 'license-reports/license-compliance.json';
              if (fs.existsSync(reportPath)) {
                const report = JSON.parse(fs.readFileSync(reportPath, 'utf8'));
                
                let comment = '## üö® License Compliance Violations Found\n\n';
                comment += `**Summary:**\n`;
                comment += `- Total Packages: ${report.summary.totalPackages}\n`;
                comment += `- Violations: ${report.summary.violationPackages}\n`;
                comment += `- Review Required: ${report.summary.reviewPackages}\n`;
                comment += `- Unknown Licenses: ${report.summary.unknownPackages}\n\n`;
                
                if (report.violations.length > 0) {
                  comment += '### ‚ùå License Violations:\n\n';
                  report.violations.forEach((violation, index) => {
                    comment += `${index + 1}. **${violation.name}**\n`;
                    comment += `   - License: \`${violation.license}\`\n`;
                    comment += `   - Reason: ${violation.reason}\n`;
                    comment += `   - Workspace: ${violation.workspace}\n\n`;
                  });
                }
                
                if (report.reviewRequired.length > 0) {
                  comment += '### ‚ö†Ô∏è Packages Requiring Review:\n\n';
                  report.reviewRequired.forEach((pkg, index) => {
                    comment += `${index + 1}. **${pkg.name}**\n`;
                    comment += `   - License: \`${pkg.license}\`\n`;
                    comment += `   - Workspace: ${pkg.workspace}\n\n`;
                  });
                }
                
                comment += '\n**Action Required:** Please review and resolve license compliance issues before merging.\n';
                comment += 'For commercial oil & gas software, we cannot use GPL, AGPL, or other copyleft licenses.\n';
                
                github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: comment
                });
              }
            } catch (error) {
              console.error('Failed to post license compliance comment:', error);
            }

      - name: Set job status
        if: failure()
        run: |
          echo "‚ùå License compliance check failed!"
          echo "Please review the license compliance report and resolve any violations."
          exit 1
