
> api@0.0.2 lint /Users/jason/projects/wellflow/apps/api
> eslint "{src,apps,libs,test}/**/*.ts" --fix "--format=json"

[{"filePath":"/Users/jason/projects/wellflow/apps/api/src/app.controller.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/app.controller.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/app.module.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/app.module.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/app.service.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/app.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/application/commands/create-well.command.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/application/commands/create-well.command.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/application/commands/delete-well.command.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/application/commands/update-well-status.command.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/application/commands/update-well-status.command.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/application/dtos/create-well.dto.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/application/dtos/create-well.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/application/dtos/update-well-status.dto.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/application/dtos/update-well-status.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/application/dtos/well.dto.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/application/dtos/well.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/application/handlers/create-well.handler.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/application/handlers/create-well.handler.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/application/handlers/get-well-by-id.handler.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/application/handlers/get-well-by-id.handler.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/application/handlers/get-wells-by-operator.handler.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/application/handlers/get-wells-by-operator.handler.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/application/handlers/update-well-status.handler.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/application/handlers/update-well-status.handler.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/application/queries/get-well-by-id.query.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/application/queries/get-well-by-id.query.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/application/queries/get-wells-by-operator.query.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/application/queries/get-wells-by-operator.query.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/authorization/abilities.decorator.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/authorization/abilities.factory.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/authorization/abilities.factory.ts","messages":[],"suppressedMessages":[{"ruleId":"sonarjs/function-return-type","severity":2,"message":"Refactor this function to always return the same type.","line":59,"column":11,"nodeType":null,"endLine":59,"endColumn":28,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/authorization/abilities.guard.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/authorization/abilities.guard.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/authorization/authorization.module.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/authorization/authorization.module.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/common/filters/global-exception.filter.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/common/filters/global-exception.filter.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/common/filters/sentry-exception.filter.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/common/filters/sentry-exception.filter.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/common/middleware/request-logging.middleware.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/common/middleware/request-logging.middleware.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/common/middleware/security-headers.middleware.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/common/middleware/security-headers.middleware.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/common/tenant/tenant-context.service.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/common/tenant/tenant-context.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/common/tenant/tenant.guard.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/common/tenant/tenant.guard.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/common/tenant/tenant.module.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/common/throttler/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/common/throttler/throttler.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/common/throttler/throttler.guard.spec.ts","messages":[],"suppressedMessages":[{"ruleId":"sonarjs/no-hardcoded-ip","severity":2,"message":"Make sure using a hardcoded IP address 10.0.0.1 is safe here.","line":13,"column":24,"nodeType":"Literal","messageId":"checkIP","endLine":13,"endColumn":34,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/common/throttler/throttler.guard.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/common/validation/schemas/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/common/validation/schemas/lease.schemas.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/common/validation/schemas/organization.schemas.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/common/validation/schemas/partner.schemas.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/common/validation/schemas/production.schemas.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/common/validation/schemas/user.schemas.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/common/validation/validation.module.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/common/validation/validation.service.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/common/validation/validation.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/config/app.config.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/config/app.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/config/config.module.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/config/https.config.ts","messages":[],"suppressedMessages":[{"ruleId":"no-process-env","severity":1,"message":"Unexpected use of process.env.","line":28,"column":7,"nodeType":"MemberExpression","messageId":"unexpectedProcessEnv","endLine":28,"endColumn":18,"suppressions":[{"kind":"directive","justification":"Configuration utility requires direct env access"}]},{"ruleId":"no-process-env","severity":1,"message":"Unexpected use of process.env.","line":28,"column":49,"nodeType":"MemberExpression","messageId":"unexpectedProcessEnv","endLine":28,"endColumn":60,"suppressions":[{"kind":"directive","justification":"Configuration utility requires direct env access"}]},{"ruleId":"no-process-env","severity":1,"message":"Unexpected use of process.env.","line":33,"column":19,"nodeType":"MemberExpression","messageId":"unexpectedProcessEnv","endLine":33,"endColumn":30,"suppressions":[{"kind":"directive","justification":"Configuration utility requires direct env access"}]},{"ruleId":"no-process-env","severity":1,"message":"Unexpected use of process.env.","line":35,"column":20,"nodeType":"MemberExpression","messageId":"unexpectedProcessEnv","endLine":35,"endColumn":31,"suppressions":[{"kind":"directive","justification":"Configuration utility requires direct env access"}]},{"ruleId":"no-process-env","severity":1,"message":"Unexpected use of process.env.","line":37,"column":18,"nodeType":"MemberExpression","messageId":"unexpectedProcessEnv","endLine":37,"endColumn":29,"suppressions":[{"kind":"directive","justification":"Configuration utility requires direct env access"}]},{"ruleId":"security/detect-non-literal-fs-filename","severity":2,"message":"Found readFileSync from package \"fs\" with non literal argument at index 0","line":54,"column":12,"nodeType":"CallExpression","endLine":54,"endColumn":33,"suppressions":[{"kind":"directive","justification":"SSL certificate paths from environment"}]},{"ruleId":"security/detect-non-literal-fs-filename","severity":2,"message":"Found readFileSync from package \"fs\" with non literal argument at index 0","line":56,"column":13,"nodeType":"CallExpression","endLine":56,"endColumn":35,"suppressions":[{"kind":"directive","justification":"SSL certificate paths from environment"}]},{"ruleId":"security/detect-non-literal-fs-filename","severity":2,"message":"Found readFileSync from package \"fs\" with non literal argument at index 0","line":62,"column":25,"nodeType":"CallExpression","endLine":62,"endColumn":45,"suppressions":[{"kind":"directive","justification":"SSL certificate paths from environment"}]},{"ruleId":"no-process-env","severity":1,"message":"Unexpected use of process.env.","line":90,"column":19,"nodeType":"MemberExpression","messageId":"unexpectedProcessEnv","endLine":90,"endColumn":30,"suppressions":[{"kind":"directive","justification":"Configuration utility requires direct env access"}]},{"ruleId":"no-process-env","severity":1,"message":"Unexpected use of process.env.","line":98,"column":7,"nodeType":"MemberExpression","messageId":"unexpectedProcessEnv","endLine":98,"endColumn":18,"suppressions":[{"kind":"directive","justification":"Configuration utility requires direct env access"}]},{"ruleId":"no-process-env","severity":1,"message":"Unexpected use of process.env.","line":98,"column":48,"nodeType":"MemberExpression","messageId":"unexpectedProcessEnv","endLine":98,"endColumn":59,"suppressions":[{"kind":"directive","justification":"Configuration utility requires direct env access"}]},{"ruleId":"no-process-env","severity":1,"message":"Unexpected use of process.env.","line":120,"column":16,"nodeType":"MemberExpression","messageId":"unexpectedProcessEnv","endLine":120,"endColumn":27,"suppressions":[{"kind":"directive","justification":"Configuration utility requires direct env access"}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/database/__tests__/database-business-rules.test.ts","messages":[],"suppressedMessages":[{"ruleId":"sonarjs/pseudo-random","severity":2,"message":"Make sure that using this pseudorandom number generator is safe here.","line":19,"column":31,"nodeType":"CallExpression","messageId":"safeGenerator","endLine":19,"endColumn":44,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"sonarjs/pseudo-random","severity":2,"message":"Make sure that using this pseudorandom number generator is safe here.","line":124,"column":56,"nodeType":"CallExpression","messageId":"safeGenerator","endLine":124,"endColumn":69,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"sonarjs/pseudo-random","severity":2,"message":"Make sure that using this pseudorandom number generator is safe here.","line":352,"column":32,"nodeType":"CallExpression","messageId":"safeGenerator","endLine":352,"endColumn":45,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/database/__tests__/database-crud.test.ts","messages":[],"suppressedMessages":[{"ruleId":"sonarjs/pseudo-random","severity":2,"message":"Make sure that using this pseudorandom number generator is safe here.","line":19,"column":31,"nodeType":"CallExpression","messageId":"safeGenerator","endLine":19,"endColumn":44,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"sonarjs/pseudo-random","severity":2,"message":"Make sure that using this pseudorandom number generator is safe here.","line":29,"column":31,"nodeType":"CallExpression","messageId":"safeGenerator","endLine":29,"endColumn":44,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"sonarjs/no-hardcoded-passwords","severity":2,"message":"Review this potentially hard-coded password.","line":166,"column":23,"nodeType":"Literal","messageId":"reviewPassword","endLine":166,"endColumn":41,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"sonarjs/no-hardcoded-passwords","severity":2,"message":"Review this potentially hard-coded password.","line":194,"column":23,"nodeType":"Literal","messageId":"reviewPassword","endLine":194,"endColumn":41,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/database/__tests__/database-module.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/database/__tests__/database-schema-coverage.test.ts","messages":[],"suppressedMessages":[{"ruleId":"security/detect-object-injection","severity":2,"message":"Function Call Object Injection Sink","line":226,"column":16,"nodeType":"MemberExpression","endLine":226,"endColumn":42,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":227,"column":16,"nodeType":"MemberExpression","endLine":227,"endColumn":42,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Variable Assigned to Object Injection Sink","line":577,"column":26,"nodeType":"MemberExpression","endLine":577,"endColumn":52,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/database/__tests__/database-schema-tables.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/database/__tests__/database-schema.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/database/__tests__/database-seed.test.ts","messages":[],"suppressedMessages":[{"ruleId":"security/detect-object-injection","severity":2,"message":"Function Call Object Injection Sink","line":384,"column":16,"nodeType":"MemberExpression","endLine":384,"endColumn":26,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":386,"column":35,"nodeType":"MemberExpression","endLine":386,"endColumn":45,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/database/__tests__/database-service.test.ts","messages":[],"suppressedMessages":[{"ruleId":"sonarjs/no-hardcoded-passwords","severity":2,"message":"Review this potentially hard-coded password.","line":86,"column":19,"nodeType":"Literal","messageId":"reviewPassword","endLine":86,"endColumn":29,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"sonarjs/no-hardcoded-passwords","severity":2,"message":"Review this potentially hard-coded password.","line":112,"column":19,"nodeType":"Literal","messageId":"reviewPassword","endLine":112,"endColumn":32,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/database/__tests__/env.ts","messages":[],"suppressedMessages":[{"ruleId":"no-process-env","severity":1,"message":"Unexpected use of process.env.","line":9,"column":1,"nodeType":"MemberExpression","messageId":"unexpectedProcessEnv","endLine":9,"endColumn":12,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-process-env","severity":1,"message":"Unexpected use of process.env.","line":10,"column":1,"nodeType":"MemberExpression","messageId":"unexpectedProcessEnv","endLine":10,"endColumn":12,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-process-env","severity":1,"message":"Unexpected use of process.env.","line":10,"column":28,"nodeType":"MemberExpression","messageId":"unexpectedProcessEnv","endLine":10,"endColumn":39,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-process-env","severity":1,"message":"Unexpected use of process.env.","line":11,"column":1,"nodeType":"MemberExpression","messageId":"unexpectedProcessEnv","endLine":11,"endColumn":12,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-process-env","severity":1,"message":"Unexpected use of process.env.","line":11,"column":28,"nodeType":"MemberExpression","messageId":"unexpectedProcessEnv","endLine":11,"endColumn":39,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-process-env","severity":1,"message":"Unexpected use of process.env.","line":12,"column":1,"nodeType":"MemberExpression","messageId":"unexpectedProcessEnv","endLine":12,"endColumn":12,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-process-env","severity":1,"message":"Unexpected use of process.env.","line":12,"column":28,"nodeType":"MemberExpression","messageId":"unexpectedProcessEnv","endLine":12,"endColumn":39,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-process-env","severity":1,"message":"Unexpected use of process.env.","line":13,"column":1,"nodeType":"MemberExpression","messageId":"unexpectedProcessEnv","endLine":13,"endColumn":12,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-process-env","severity":1,"message":"Unexpected use of process.env.","line":13,"column":32,"nodeType":"MemberExpression","messageId":"unexpectedProcessEnv","endLine":13,"endColumn":43,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-process-env","severity":1,"message":"Unexpected use of process.env.","line":14,"column":1,"nodeType":"MemberExpression","messageId":"unexpectedProcessEnv","endLine":14,"endColumn":12,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-process-env","severity":1,"message":"Unexpected use of process.env.","line":14,"column":28,"nodeType":"MemberExpression","messageId":"unexpectedProcessEnv","endLine":14,"endColumn":39,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-process-env","severity":1,"message":"Unexpected use of process.env.","line":17,"column":1,"nodeType":"MemberExpression","messageId":"unexpectedProcessEnv","endLine":17,"endColumn":12,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-process-env","severity":1,"message":"Unexpected use of process.env.","line":17,"column":23,"nodeType":"MemberExpression","messageId":"unexpectedProcessEnv","endLine":17,"endColumn":34,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-process-env","severity":1,"message":"Unexpected use of process.env.","line":18,"column":1,"nodeType":"MemberExpression","messageId":"unexpectedProcessEnv","endLine":18,"endColumn":12,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-process-env","severity":1,"message":"Unexpected use of process.env.","line":18,"column":23,"nodeType":"MemberExpression","messageId":"unexpectedProcessEnv","endLine":18,"endColumn":34,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-process-env","severity":1,"message":"Unexpected use of process.env.","line":19,"column":1,"nodeType":"MemberExpression","messageId":"unexpectedProcessEnv","endLine":19,"endColumn":12,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-process-env","severity":1,"message":"Unexpected use of process.env.","line":19,"column":23,"nodeType":"MemberExpression","messageId":"unexpectedProcessEnv","endLine":19,"endColumn":34,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-process-env","severity":1,"message":"Unexpected use of process.env.","line":20,"column":1,"nodeType":"MemberExpression","messageId":"unexpectedProcessEnv","endLine":20,"endColumn":12,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-process-env","severity":1,"message":"Unexpected use of process.env.","line":20,"column":27,"nodeType":"MemberExpression","messageId":"unexpectedProcessEnv","endLine":20,"endColumn":38,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-process-env","severity":1,"message":"Unexpected use of process.env.","line":21,"column":1,"nodeType":"MemberExpression","messageId":"unexpectedProcessEnv","endLine":21,"endColumn":12,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-process-env","severity":1,"message":"Unexpected use of process.env.","line":21,"column":23,"nodeType":"MemberExpression","messageId":"unexpectedProcessEnv","endLine":21,"endColumn":34,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-process-env","severity":1,"message":"Unexpected use of process.env.","line":24,"column":1,"nodeType":"MemberExpression","messageId":"unexpectedProcessEnv","endLine":24,"endColumn":12,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-process-env","severity":1,"message":"Unexpected use of process.env.","line":27,"column":1,"nodeType":"MemberExpression","messageId":"unexpectedProcessEnv","endLine":27,"endColumn":12,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-process-env","severity":1,"message":"Unexpected use of process.env.","line":28,"column":1,"nodeType":"MemberExpression","messageId":"unexpectedProcessEnv","endLine":28,"endColumn":12,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-process-env","severity":1,"message":"Unexpected use of process.env.","line":31,"column":34,"nodeType":"MemberExpression","messageId":"unexpectedProcessEnv","endLine":31,"endColumn":45,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-process-env","severity":1,"message":"Unexpected use of process.env.","line":33,"column":20,"nodeType":"MemberExpression","messageId":"unexpectedProcessEnv","endLine":33,"endColumn":31,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-process-env","severity":1,"message":"Unexpected use of process.env.","line":33,"column":48,"nodeType":"MemberExpression","messageId":"unexpectedProcessEnv","endLine":33,"endColumn":59,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/database/__tests__/global-setup.ts","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":6,"column":7,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":6,"endColumn":43,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":6,"column":25,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":6,"endColumn":43,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":9,"column":1,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":9,"endColumn":29,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/database/__tests__/global-teardown.ts","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":5,"column":7,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":5,"endColumn":46,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":5,"column":28,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":5,"endColumn":46,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":7,"column":1,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":7,"endColumn":32,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/database/__tests__/models/afes.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/database/__tests__/models/index.test.ts","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":11,"column":5,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":11,"endColumn":36,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":12,"column":5,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":12,"endColumn":28,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":13,"column":5,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":13,"endColumn":28,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":14,"column":5,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":14,"endColumn":41,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":15,"column":5,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":15,"endColumn":27,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":16,"column":5,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":16,"endColumn":44,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/database/__tests__/models/organizations.test.ts","messages":[],"suppressedMessages":[{"ruleId":"sonarjs/no-ignored-exceptions","severity":2,"message":"Handle this exception or don't catch it at all.","line":19,"column":5,"nodeType":"CatchClause","messageId":"handleException","endLine":21,"endColumn":4,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":19,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":18,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"sonarjs/no-ignored-exceptions","severity":2,"message":"Handle this exception or don't catch it at all.","line":26,"column":5,"nodeType":"CatchClause","messageId":"handleException","endLine":28,"endColumn":4,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":26,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":18,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"sonarjs/no-ignored-exceptions","severity":2,"message":"Handle this exception or don't catch it at all.","line":33,"column":5,"nodeType":"CatchClause","messageId":"handleException","endLine":35,"endColumn":4,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":33,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":33,"endColumn":18,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"sonarjs/no-ignored-exceptions","severity":2,"message":"Handle this exception or don't catch it at all.","line":40,"column":5,"nodeType":"CatchClause","messageId":"handleException","endLine":42,"endColumn":4,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":40,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":40,"endColumn":18,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"sonarjs/no-ignored-exceptions","severity":2,"message":"Handle this exception or don't catch it at all.","line":47,"column":5,"nodeType":"CatchClause","messageId":"handleException","endLine":49,"endColumn":4,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":47,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":47,"endColumn":18,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"sonarjs/no-ignored-exceptions","severity":2,"message":"Handle this exception or don't catch it at all.","line":54,"column":5,"nodeType":"CatchClause","messageId":"handleException","endLine":56,"endColumn":4,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":54,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":54,"endColumn":18,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"sonarjs/no-ignored-exceptions","severity":2,"message":"Handle this exception or don't catch it at all.","line":61,"column":5,"nodeType":"CatchClause","messageId":"handleException","endLine":63,"endColumn":4,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":61,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":61,"endColumn":18,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/database/__tests__/models/production-records.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/database/__tests__/models/revenue-distributions.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/database/__tests__/models/users.test.ts","messages":[],"suppressedMessages":[{"ruleId":"sonarjs/no-ignored-exceptions","severity":2,"message":"Handle this exception or don't catch it at all.","line":18,"column":5,"nodeType":"CatchClause","messageId":"handleException","endLine":20,"endColumn":4,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":18,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":18,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"sonarjs/no-ignored-exceptions","severity":2,"message":"Handle this exception or don't catch it at all.","line":25,"column":5,"nodeType":"CatchClause","messageId":"handleException","endLine":27,"endColumn":4,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":25,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":18,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"sonarjs/no-ignored-exceptions","severity":2,"message":"Handle this exception or don't catch it at all.","line":32,"column":5,"nodeType":"CatchClause","messageId":"handleException","endLine":34,"endColumn":4,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":32,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":32,"endColumn":18,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"sonarjs/no-ignored-exceptions","severity":2,"message":"Handle this exception or don't catch it at all.","line":39,"column":5,"nodeType":"CatchClause","messageId":"handleException","endLine":41,"endColumn":4,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":39,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":39,"endColumn":18,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"sonarjs/no-ignored-exceptions","severity":2,"message":"Handle this exception or don't catch it at all.","line":46,"column":5,"nodeType":"CatchClause","messageId":"handleException","endLine":48,"endColumn":4,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":46,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":46,"endColumn":18,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"sonarjs/no-ignored-exceptions","severity":2,"message":"Handle this exception or don't catch it at all.","line":53,"column":5,"nodeType":"CatchClause","messageId":"handleException","endLine":55,"endColumn":4,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":53,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":53,"endColumn":18,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"sonarjs/no-ignored-exceptions","severity":2,"message":"Handle this exception or don't catch it at all.","line":60,"column":5,"nodeType":"CatchClause","messageId":"handleException","endLine":62,"endColumn":4,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":60,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":60,"endColumn":18,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/database/__tests__/models/wells.test.ts","messages":[],"suppressedMessages":[{"ruleId":"sonarjs/no-ignored-exceptions","severity":2,"message":"Handle this exception or don't catch it at all.","line":28,"column":5,"nodeType":"CatchClause","messageId":"handleException","endLine":30,"endColumn":4,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":28,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":28,"endColumn":18,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"sonarjs/no-ignored-exceptions","severity":2,"message":"Handle this exception or don't catch it at all.","line":35,"column":5,"nodeType":"CatchClause","messageId":"handleException","endLine":37,"endColumn":4,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":35,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":35,"endColumn":18,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"sonarjs/no-ignored-exceptions","severity":2,"message":"Handle this exception or don't catch it at all.","line":42,"column":5,"nodeType":"CatchClause","messageId":"handleException","endLine":44,"endColumn":4,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":42,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":42,"endColumn":18,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"sonarjs/no-ignored-exceptions","severity":2,"message":"Handle this exception or don't catch it at all.","line":49,"column":5,"nodeType":"CatchClause","messageId":"handleException","endLine":51,"endColumn":4,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":49,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":49,"endColumn":18,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"sonarjs/no-ignored-exceptions","severity":2,"message":"Handle this exception or don't catch it at all.","line":56,"column":5,"nodeType":"CatchClause","messageId":"handleException","endLine":58,"endColumn":4,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":56,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":56,"endColumn":18,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"sonarjs/no-ignored-exceptions","severity":2,"message":"Handle this exception or don't catch it at all.","line":63,"column":5,"nodeType":"CatchClause","messageId":"handleException","endLine":65,"endColumn":4,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":63,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":63,"endColumn":18,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"sonarjs/no-ignored-exceptions","severity":2,"message":"Handle this exception or don't catch it at all.","line":70,"column":5,"nodeType":"CatchClause","messageId":"handleException","endLine":72,"endColumn":4,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":70,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":70,"endColumn":18,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/database/__tests__/setup.ts","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":15,"column":7,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":15,"endColumn":31,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":15,"column":18,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":15,"endColumn":31,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":16,"column":7,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":16,"endColumn":46,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":16,"column":22,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":16,"endColumn":46,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-process-env","severity":1,"message":"Unexpected use of process.env.","line":20,"column":9,"nodeType":"MemberExpression","messageId":"unexpectedProcessEnv","endLine":20,"endColumn":20,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-process-env","severity":1,"message":"Unexpected use of process.env.","line":21,"column":18,"nodeType":"MemberExpression","messageId":"unexpectedProcessEnv","endLine":21,"endColumn":29,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-process-env","severity":1,"message":"Unexpected use of process.env.","line":22,"column":9,"nodeType":"MemberExpression","messageId":"unexpectedProcessEnv","endLine":22,"endColumn":20,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-process-env","severity":1,"message":"Unexpected use of process.env.","line":23,"column":13,"nodeType":"MemberExpression","messageId":"unexpectedProcessEnv","endLine":23,"endColumn":24,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-process-env","severity":1,"message":"Unexpected use of process.env.","line":24,"column":13,"nodeType":"MemberExpression","messageId":"unexpectedProcessEnv","endLine":24,"endColumn":24,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":32,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":35,"endColumn":5,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe construction of a(n) `any` typed value.","line":32,"column":21,"nodeType":"NewExpression","messageId":"unsafeNew","endLine":35,"endColumn":5,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"sonarjs/sql-queries","severity":2,"message":"Make sure that executing SQL queries is safe here.","line":39,"column":11,"nodeType":"MemberExpression","messageId":"safeQuery","endLine":39,"endColumn":26,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":39,"column":11,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":39,"endColumn":26,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .query on an `any` value.","line":39,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":39,"endColumn":26,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"sonarjs/sql-queries","severity":2,"message":"Make sure that executing SQL queries is safe here.","line":44,"column":11,"nodeType":"MemberExpression","messageId":"safeQuery","endLine":44,"endColumn":26,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":44,"column":11,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":44,"endColumn":26,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .query on an `any` value.","line":44,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":44,"endColumn":26,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":51,"column":11,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":51,"endColumn":24,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .end on an `any` value.","line":51,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":51,"endColumn":24,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":56,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":56,"endColumn":13,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"sonarjs/no-os-command-from-path","severity":2,"message":"Make sure the \"PATH\" variable only contains fixed, unwriteable directories.","line":56,"column":14,"nodeType":"Literal","messageId":"issue","endLine":56,"endColumn":72,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-process-env","severity":1,"message":"Unexpected use of process.env.","line":59,"column":12,"nodeType":"MemberExpression","messageId":"unexpectedProcessEnv","endLine":59,"endColumn":23,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":81,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":84,"endColumn":5,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe construction of a(n) `any` typed value.","line":81,"column":21,"nodeType":"NewExpression","messageId":"unsafeNew","endLine":84,"endColumn":5,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":87,"column":3,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":87,"endColumn":15,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .on on an `any` value.","line":87,"column":13,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":87,"endColumn":15,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"sonarjs/sql-queries","severity":2,"message":"Make sure that executing SQL queries is safe here.","line":104,"column":11,"nodeType":"MemberExpression","messageId":"safeQuery","endLine":104,"endColumn":26,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":104,"column":11,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":104,"endColumn":26,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .query on an `any` value.","line":104,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":104,"endColumn":26,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"sonarjs/sql-queries","severity":2,"message":"Make sure that executing SQL queries is safe here.","line":114,"column":11,"nodeType":"MemberExpression","messageId":"safeQuery","endLine":114,"endColumn":26,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":114,"column":11,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":114,"endColumn":26,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .query on an `any` value.","line":114,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":114,"endColumn":26,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"sonarjs/sql-queries","severity":2,"message":"Make sure that executing SQL queries is safe here.","line":129,"column":13,"nodeType":"MemberExpression","messageId":"safeQuery","endLine":129,"endColumn":28,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":129,"column":13,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":129,"endColumn":28,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .query on an `any` value.","line":129,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":129,"endColumn":28,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":143,"column":11,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":143,"endColumn":24,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .end on an `any` value.","line":143,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":143,"endColumn":24,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":151,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":154,"endColumn":5,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe construction of a(n) `any` typed value.","line":151,"column":16,"nodeType":"NewExpression","messageId":"unsafeNew","endLine":154,"endColumn":5,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":157,"column":11,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":157,"endColumn":21,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .query on an `any` value.","line":157,"column":16,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":157,"endColumn":21,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":164,"column":11,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":164,"endColumn":19,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .end on an `any` value.","line":164,"column":16,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":164,"endColumn":19,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .default on an `any` value.","line":225,"column":16,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":225,"endColumn":23,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/database/__tests__/test-utils.ts","messages":[],"suppressedMessages":[{"ruleId":"sonarjs/pseudo-random","severity":2,"message":"Make sure that using this pseudorandom number generator is safe here.","line":18,"column":29,"nodeType":"CallExpression","messageId":"safeGenerator","endLine":18,"endColumn":42,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"sonarjs/pseudo-random","severity":2,"message":"Make sure that using this pseudorandom number generator is safe here.","line":30,"column":29,"nodeType":"CallExpression","messageId":"safeGenerator","endLine":30,"endColumn":42,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"sonarjs/pseudo-random","severity":2,"message":"Make sure that using this pseudorandom number generator is safe here.","line":49,"column":29,"nodeType":"CallExpression","messageId":"safeGenerator","endLine":49,"endColumn":42,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"sonarjs/pseudo-random","severity":2,"message":"Make sure that using this pseudorandom number generator is safe here.","line":74,"column":29,"nodeType":"CallExpression","messageId":"safeGenerator","endLine":74,"endColumn":42,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"sonarjs/no-ignored-exceptions","severity":2,"message":"Handle this exception or don't catch it at all.","line":217,"column":7,"nodeType":"CatchClause","messageId":"handleException","endLine":219,"endColumn":6,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":217,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":217,"endColumn":20,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-process-env","severity":1,"message":"Unexpected use of process.env.","line":235,"column":16,"nodeType":"MemberExpression","messageId":"unexpectedProcessEnv","endLine":235,"endColumn":27,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-process-env","severity":1,"message":"Unexpected use of process.env.","line":237,"column":25,"nodeType":"MemberExpression","messageId":"unexpectedProcessEnv","endLine":237,"endColumn":36,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-process-env","severity":1,"message":"Unexpected use of process.env.","line":239,"column":16,"nodeType":"MemberExpression","messageId":"unexpectedProcessEnv","endLine":239,"endColumn":27,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-process-env","severity":1,"message":"Unexpected use of process.env.","line":241,"column":20,"nodeType":"MemberExpression","messageId":"unexpectedProcessEnv","endLine":241,"endColumn":31,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-process-env","severity":1,"message":"Unexpected use of process.env.","line":243,"column":20,"nodeType":"MemberExpression","messageId":"unexpectedProcessEnv","endLine":243,"endColumn":31,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/database/database.module.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/database/database.service.spec.ts","messages":[],"suppressedMessages":[{"ruleId":"sonarjs/no-hardcoded-passwords","severity":2,"message":"Review this potentially hard-coded password.","line":158,"column":32,"nodeType":"Literal","messageId":"reviewPassword","endLine":158,"endColumn":47,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/database/database.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/database/schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/database/schemas/afe-approvals.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/database/schemas/afe-line-items.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/database/schemas/afes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/database/schemas/compliance-reports.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/database/schemas/compliance-schedules.ts","messages":[],"suppressedMessages":[{"ruleId":"no-secrets/no-secrets","severity":2,"message":"Found a string with entropy 4.02 : \"compliance_schedules_organization_id_idx\"","line":41,"column":28,"nodeType":"Literal","messageId":"HIGH_ENTROPY","endLine":41,"endColumn":70,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-secrets/no-secrets","severity":2,"message":"Found a string with entropy 4.01 : \"compliance_schedules_priority_idx\"","line":54,"column":24,"nodeType":"Literal","messageId":"HIGH_ENTROPY","endLine":54,"endColumn":59,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/database/schemas/curative-items.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/database/schemas/division-orders.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/database/schemas/documents.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/database/schemas/environmental-incidents.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/database/schemas/equipment.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/database/schemas/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/database/schemas/jib-statements.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/database/schemas/lease-operating-statements.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/database/schemas/lease-partners.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/database/schemas/leases.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/database/schemas/organizations.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/database/schemas/partners.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/database/schemas/production-records.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/database/schemas/regulatory-filings.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/database/schemas/relations.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/database/schemas/relations.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/database/schemas/revenue-distributions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/database/schemas/spill-reports.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/database/schemas/title-opinions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/database/schemas/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/database/schemas/users.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/database/schemas/vendor-contacts.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/database/schemas/vendors.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/database/schemas/well-tests.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/database/schemas/wells.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/database/seed.spec.ts","messages":[],"suppressedMessages":[{"ruleId":"sonarjs/no-hardcoded-passwords","severity":2,"message":"Review this potentially hard-coded password.","line":80,"column":31,"nodeType":"Literal","messageId":"reviewPassword","endLine":80,"endColumn":41,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"sonarjs/no-hardcoded-passwords","severity":2,"message":"Review this potentially hard-coded password.","line":107,"column":21,"nodeType":"Literal","messageId":"reviewPassword","endLine":107,"endColumn":31,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/database/seed.ts","messages":[],"suppressedMessages":[{"ruleId":"no-process-env","severity":1,"message":"Unexpected use of process.env.","line":18,"column":18,"nodeType":"MemberExpression","messageId":"unexpectedProcessEnv","endLine":18,"endColumn":29,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-process-env","severity":1,"message":"Unexpected use of process.env.","line":19,"column":27,"nodeType":"MemberExpression","messageId":"unexpectedProcessEnv","endLine":19,"endColumn":38,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-process-env","severity":1,"message":"Unexpected use of process.env.","line":20,"column":18,"nodeType":"MemberExpression","messageId":"unexpectedProcessEnv","endLine":20,"endColumn":29,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-process-env","severity":1,"message":"Unexpected use of process.env.","line":21,"column":22,"nodeType":"MemberExpression","messageId":"unexpectedProcessEnv","endLine":21,"endColumn":33,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-process-env","severity":1,"message":"Unexpected use of process.env.","line":22,"column":18,"nodeType":"MemberExpression","messageId":"unexpectedProcessEnv","endLine":22,"endColumn":29,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"sonarjs/no-duplicate-string","severity":2,"message":"Define a constant instead of duplicating this literal 4 times.","line":43,"column":13,"nodeType":"Literal","endLine":43,"endColumn":36,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"sonarjs/pseudo-random","severity":2,"message":"Make sure that using this pseudorandom number generator is safe here.","line":231,"column":21,"nodeType":"CallExpression","messageId":"safeGenerator","endLine":231,"endColumn":34,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"sonarjs/pseudo-random","severity":2,"message":"Make sure that using this pseudorandom number generator is safe here.","line":232,"column":21,"nodeType":"CallExpression","messageId":"safeGenerator","endLine":232,"endColumn":34,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"sonarjs/pseudo-random","severity":2,"message":"Make sure that using this pseudorandom number generator is safe here.","line":233,"column":23,"nodeType":"CallExpression","messageId":"safeGenerator","endLine":233,"endColumn":36,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-process-env","severity":1,"message":"Unexpected use of process.env.","line":315,"column":7,"nodeType":"MemberExpression","messageId":"unexpectedProcessEnv","endLine":315,"endColumn":18,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-process-env","severity":1,"message":"Unexpected use of process.env.","line":315,"column":42,"nodeType":"MemberExpression","messageId":"unexpectedProcessEnv","endLine":315,"endColumn":53,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"sonarjs/pseudo-random","severity":2,"message":"Make sure that using this pseudorandom number generator is safe here.","line":318,"column":33,"nodeType":"CallExpression","messageId":"safeGenerator","endLine":318,"endColumn":46,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"sonarjs/pseudo-random","severity":2,"message":"Make sure that using this pseudorandom number generator is safe here.","line":330,"column":32,"nodeType":"CallExpression","messageId":"safeGenerator","endLine":330,"endColumn":45,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"sonarjs/pseudo-random","severity":2,"message":"Make sure that using this pseudorandom number generator is safe here.","line":333,"column":32,"nodeType":"CallExpression","messageId":"safeGenerator","endLine":333,"endColumn":45,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-process-env","severity":1,"message":"Unexpected use of process.env.","line":344,"column":7,"nodeType":"MemberExpression","messageId":"unexpectedProcessEnv","endLine":344,"endColumn":18,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-process-env","severity":1,"message":"Unexpected use of process.env.","line":344,"column":42,"nodeType":"MemberExpression","messageId":"unexpectedProcessEnv","endLine":344,"endColumn":53,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"sonarjs/pseudo-random","severity":2,"message":"Make sure that using this pseudorandom number generator is safe here.","line":356,"column":31,"nodeType":"CallExpression","messageId":"safeGenerator","endLine":356,"endColumn":44,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/domain/entities/well.entity.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/domain/entities/well.entity.ts","messages":[],"suppressedMessages":[{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":249,"column":12,"nodeType":"MemberExpression","endLine":249,"endColumn":34,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/domain/enums/well-status.enum.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/domain/events/well-status-changed.event.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/domain/events/well-status-changed.event.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/domain/repositories/well.repository.interface.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/domain/value-objects/api-number.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/domain/value-objects/api-number.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/domain/value-objects/coordinates.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/domain/value-objects/coordinates.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/domain/value-objects/location.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/domain/value-objects/location.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/infrastructure/database/__tests__/query-builder.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/infrastructure/database/query-builder.ts","messages":[],"suppressedMessages":[{"ruleId":"security/detect-object-injection","severity":2,"message":"Variable Assigned to Object Injection Sink","line":92,"column":20,"nodeType":"MemberExpression","endLine":92,"endColumn":79,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Variable Assigned to Object Injection Sink","line":110,"column":20,"nodeType":"MemberExpression","endLine":110,"endColumn":79,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Variable Assigned to Object Injection Sink","line":122,"column":20,"nodeType":"MemberExpression","endLine":122,"endColumn":79,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Variable Assigned to Object Injection Sink","line":133,"column":20,"nodeType":"MemberExpression","endLine":133,"endColumn":79,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Variable Assigned to Object Injection Sink","line":144,"column":20,"nodeType":"MemberExpression","endLine":144,"endColumn":79,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":155,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":155,"endColumn":46,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Variable Assigned to Object Injection Sink","line":155,"column":20,"nodeType":"MemberExpression","endLine":155,"endColumn":46,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":155,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":155,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3841,3844],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3841,3844],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [field] on an `any` value.","line":155,"column":40,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":155,"endColumn":45,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":181,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":181,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4263,4266],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4263,4266],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":182,"column":5,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":182,"endColumn":31,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":189,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":189,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4407,4410],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4407,4410],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":190,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":190,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4431,4434],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4431,4434],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":191,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":191,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4499,4502],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4499,4502],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":191,"column":69,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":191,"endColumn":72,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4523,4526],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4523,4526],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":192,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":192,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4572,4575],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4572,4575],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":195,"column":7,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":195,"endColumn":63,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":195,"column":15,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":195,"endColumn":26,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .where on an `any` value.","line":195,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":195,"endColumn":26,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":195,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":195,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4680,4683],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4680,4683],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":199,"column":7,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":199,"endColumn":51,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":199,"column":15,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":199,"endColumn":28,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .orderBy on an `any` value.","line":199,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":199,"endColumn":28,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":203,"column":7,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":203,"endColumn":45,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":203,"column":15,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":203,"endColumn":27,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .offset on an `any` value.","line":203,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":203,"endColumn":27,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":207,"column":7,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":207,"endColumn":43,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":207,"column":15,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":207,"endColumn":26,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .limit on an `any` value.","line":207,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":207,"endColumn":26,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":210,"column":5,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":210,"endColumn":24,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":218,"column":5,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":218,"endColumn":31,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":225,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":225,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5302,5305],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5302,5305],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":227,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":227,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5382,5385],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5382,5385],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":230,"column":7,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":230,"endColumn":63,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":230,"column":15,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":230,"endColumn":26,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .where on an `any` value.","line":230,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":230,"endColumn":26,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":230,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":230,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5490,5493],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5490,5493],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":233,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":233,"endColumn":31,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [0] on an `any` value.","line":234,"column":26,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":234,"endColumn":27,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of type `any[]` to a variable of type `T[\"$inferSelect\"][]`.","line":258,"column":7,"nodeType":"Property","messageId":"unsafeAssignment","endLine":258,"endColumn":11,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":320,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":320,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7402,7405],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7402,7405],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":320,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":320,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7431,7434],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7431,7434],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":362,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":362,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8388,8391],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8388,8391],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":381,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":381,"endColumn":48,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .version on an `any` value.","line":381,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":381,"endColumn":35,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":382,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":382,"endColumn":66,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .current_database on an `any` value.","line":382,"column":37,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":382,"endColumn":53,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":383,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":383,"endColumn":54,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .current_user on an `any` value.","line":383,"column":29,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":383,"endColumn":41,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/infrastructure/repositories/__tests__/simple-base.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/infrastructure/repositories/afe.repository.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/infrastructure/repositories/afe.repository.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/infrastructure/repositories/base.repository.ts","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":37,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":37,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1115,1118],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1115,1118],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":50,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":50,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1511,1514],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1511,1514],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":57,"column":13,"nodeType":"MemberExpression","endLine":57,"endColumn":57,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":63,"column":9,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":63,"endColumn":55,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":63,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":63,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2001,2004],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2001,2004],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":86,"column":13,"nodeType":"MemberExpression","endLine":86,"endColumn":57,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":107,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":107,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3268,3271],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3268,3271],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":108,"column":76,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":108,"endColumn":79,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3407,3410],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3407,3410],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":111,"column":7,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":111,"endColumn":54,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":111,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":111,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3545,3548],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3545,3548],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":112,"column":7,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":112,"endColumn":56,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":112,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":112,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3701,3704],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3701,3704],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":116,"column":7,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":116,"endColumn":58,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":116,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":116,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3891,3894],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3891,3894],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":119,"column":5,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":119,"endColumn":61,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":119,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":119,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4059,4062],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4059,4062],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":142,"column":5,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":142,"endColumn":39,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":142,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":142,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4666,4669],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4666,4669],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [0] on an `any` value.","line":142,"column":28,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":142,"endColumn":29,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":165,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":165,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5419,5422],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5419,5422],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":176,"column":71,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":176,"endColumn":74,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5806,5809],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5806,5809],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":183,"column":13,"nodeType":"MemberExpression","endLine":183,"endColumn":57,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":189,"column":9,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":189,"endColumn":55,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":189,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":189,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6296,6299],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6296,6299],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":205,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":205,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6713,6716],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6713,6716],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/infrastructure/repositories/organization.repository.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/infrastructure/repositories/organization.repository.ts","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async method 'getStatistics' has no 'await' expression.","line":106,"column":3,"nodeType":"FunctionExpression","messageId":"missingAwait","endLine":106,"endColumn":22,"suggestions":[{"messageId":"removeAsync","fix":{"range":[2506,2668],"text":"getStatistics(_organizationId: string): {\n    totalUsers: number;\n    totalWells: number;\n    totalLeases: number;\n    totalProduction: number;\n  }"},"desc":"Remove 'async'."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/infrastructure/repositories/production.repository.spec.ts","messages":[],"suppressedMessages":[{"ruleId":"no-secrets/no-secrets","severity":2,"message":"Found a string with entropy 4 : \"getWellProductionSummary\"","line":176,"column":12,"nodeType":"Literal","messageId":"HIGH_ENTROPY","endLine":176,"endColumn":38,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/infrastructure/repositories/production.repository.ts","messages":[],"suppressedMessages":[{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":270,"column":12,"nodeType":"MemberExpression","endLine":270,"endColumn":30,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":272,"column":9,"nodeType":"MemberExpression","endLine":272,"endColumn":27,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":281,"column":7,"nodeType":"MemberExpression","endLine":281,"endColumn":25,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":282,"column":7,"nodeType":"MemberExpression","endLine":282,"endColumn":25,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":283,"column":7,"nodeType":"MemberExpression","endLine":283,"endColumn":25,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":284,"column":7,"nodeType":"MemberExpression","endLine":284,"endColumn":25,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/infrastructure/repositories/repository.module.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/infrastructure/repositories/well.repository.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/infrastructure/repositories/well.repository.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/jobs/__tests__/jobs.integration.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/jobs/config/bullmq-config.service.ts","messages":[{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async method 'initializeQueues' has no 'await' expression.","line":152,"column":3,"nodeType":"FunctionExpression","messageId":"missingAwait","endLine":152,"endColumn":33,"suggestions":[{"messageId":"removeAsync","fix":{"range":[3988,3994],"text":""},"desc":"Remove 'async'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Injectable, OnModuleInit, OnModuleDestroy } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { Queue, Worker, QueueOptions, WorkerOptions } from 'bullmq';\nimport Redis from 'ioredis';\n\nexport interface QueueConfig {\n  name: string;\n  options?: Omit<QueueOptions, 'connection'>;\n  workerOptions?: Omit<WorkerOptions, 'connection'>;\n}\n\n/**\n * BullMQ Configuration Service\n *\n * Manages BullMQ queue configurations, Redis connections, and provides\n * centralized queue and worker setup for the WellFlow application.\n *\n * Supports oil & gas industry requirements:\n * - Data validation jobs for production data integrity\n * - Report generation for compliance (Form PR, JIB statements)\n * - Email notifications for regulatory deadlines\n */\n@Injectable()\nexport class BullMQConfigService implements OnModuleInit, OnModuleDestroy {\n  private redisConnection!: Redis;\n  private queues: Map<string, Queue> = new Map();\n  private workers: Map<string, Worker> = new Map();\n\n  // Queue definitions for WellFlow\n  private readonly queueConfigs: QueueConfig[] = [\n    {\n      name: 'data-validation',\n      options: {\n        defaultJobOptions: {\n          attempts: 3,\n          backoff: {\n            type: 'exponential',\n            delay: 2000,\n          },\n          removeOnComplete: 100,\n          removeOnFail: 50,\n          // Delay failed jobs by 30 seconds before retry\n          delay: 30000,\n        },\n      },\n      workerOptions: {\n        concurrency: 5,\n        limiter: {\n          max: 10,\n          duration: 1000,\n        },\n        // Remove stalled jobs after 30 seconds\n        stalledInterval: 30 * 1000,\n        maxStalledCount: 1,\n      },\n    },\n    {\n      name: 'report-generation',\n      options: {\n        defaultJobOptions: {\n          attempts: 2,\n          backoff: {\n            type: 'exponential',\n            delay: 5000,\n          },\n          removeOnComplete: 50,\n          removeOnFail: 25,\n          // Delay failed jobs by 2 minutes before retry\n          delay: 2 * 60 * 1000,\n        },\n      },\n      workerOptions: {\n        concurrency: 2, // CPU intensive operations\n        limiter: {\n          max: 5,\n          duration: 1000,\n        },\n        // Remove stalled jobs after 2 minutes\n        stalledInterval: 2 * 60 * 1000,\n        maxStalledCount: 1,\n      },\n    },\n    {\n      name: 'email-notifications',\n      options: {\n        defaultJobOptions: {\n          attempts: 5,\n          backoff: {\n            type: 'exponential',\n            delay: 1000,\n          },\n          removeOnComplete: 200,\n          removeOnFail: 100,\n          // Delay failed jobs by 10 seconds before retry\n          delay: 10 * 1000,\n        },\n      },\n      workerOptions: {\n        concurrency: 10,\n        limiter: {\n          max: 20,\n          duration: 1000,\n        },\n        // Remove stalled jobs after 1 minute\n        stalledInterval: 60 * 1000,\n        maxStalledCount: 2,\n      },\n    },\n  ];\n\n  constructor(private configService: ConfigService) {}\n\n  async onModuleInit() {\n    await this.initializeRedisConnection();\n    await this.initializeQueues();\n  }\n\n  async onModuleDestroy() {\n    await this.closeWorkers();\n    await this.closeQueues();\n    await this.closeRedisConnection();\n  }\n\n  private async initializeRedisConnection() {\n    const redisUrl = this.configService.get<string>(\n      'REDIS_URL',\n      'redis://localhost:6379',\n    );\n\n    this.redisConnection = new Redis(redisUrl, {\n      maxRetriesPerRequest: 3,\n      enableReadyCheck: false,\n      lazyConnect: true,\n    });\n\n    this.redisConnection.on('error', (err) => {\n      console.error('BullMQ Redis Connection Error:', err);\n    });\n\n    this.redisConnection.on('connect', () => {\n      console.log('✅ BullMQ Redis connected successfully');\n    });\n\n    try {\n      await this.redisConnection.connect();\n    } catch (error) {\n      console.error('❌ BullMQ Redis connection failed:', error);\n      throw error;\n    }\n  }\n\n  private async initializeQueues() {\n    for (const config of this.queueConfigs) {\n      const queue = new Queue(config.name, {\n        connection: this.redisConnection,\n        ...config.options,\n      });\n\n      this.queues.set(config.name, queue);\n      console.log(`✅ Queue '${config.name}' initialized`);\n    }\n  }\n\n  private async closeWorkers() {\n    for (const [name, worker] of this.workers) {\n      await worker.close();\n      console.log(`🔌 Worker '${name}' closed`);\n    }\n    this.workers.clear();\n  }\n\n  private async closeQueues() {\n    for (const [name, queue] of this.queues) {\n      await queue.close();\n      console.log(`🔌 Queue '${name}' closed`);\n    }\n    this.queues.clear();\n  }\n\n  private async closeRedisConnection() {\n    if (this.redisConnection) {\n      await this.redisConnection.quit();\n      console.log('🔌 BullMQ Redis connection closed');\n    }\n  }\n\n  /**\n   * Get a queue by name\n   */\n  getQueue(name: string): Queue | undefined {\n    return this.queues.get(name);\n  }\n\n  /**\n   * Get all available queues\n   */\n  getAllQueues(): Queue[] {\n    return Array.from(this.queues.values());\n  }\n\n  /**\n   * Get all queue names\n   */\n  getQueueNames(): string[] {\n    return Array.from(this.queues.keys());\n  }\n\n  /**\n   * Register a worker for a specific queue\n   */\n  registerWorker(queueName: string, worker: Worker) {\n    this.workers.set(queueName, worker);\n    console.log(`✅ Worker registered for queue '${queueName}'`);\n  }\n\n  /**\n   * Get Redis connection for BullMQ\n   */\n  getRedisConnection(): Redis {\n    return this.redisConnection;\n  }\n\n  /**\n   * Get queue configuration\n   */\n  getQueueConfig(name: string): QueueConfig | undefined {\n    return this.queueConfigs.find((config) => config.name === name);\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/jobs/controllers/job-metrics.controller.ts","messages":[{"ruleId":"sonarjs/no-duplicate-string","severity":2,"message":"Define a constant instead of duplicating this literal 7 times.","line":53,"column":92,"nodeType":"Literal","endLine":53,"endColumn":107}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  Controller,\n  Get,\n  Query,\n  Param,\n  Delete,\n  HttpCode,\n  HttpStatus,\n} from '@nestjs/common';\nimport { ApiTags, ApiOperation, ApiResponse, ApiQuery } from '@nestjs/swagger';\nimport { JobMetricsService } from '../services/job-metrics.service';\n\n/**\n * Job Metrics Controller\n *\n * Provides REST API endpoints for accessing job metrics, queue statistics,\n * and system performance data in the WellFlow system.\n *\n * Features:\n * - Job-level metrics and performance data\n * - Queue-level statistics and health monitoring\n * - System-wide analytics and trends\n * - Time-based metric filtering\n * - Organization-specific metrics\n */\n@ApiTags('Job Metrics')\n@Controller('jobs/metrics')\nexport class JobMetricsController {\n  constructor(private readonly metricsService: JobMetricsService) {}\n\n  /**\n   * Get system-wide job metrics\n   */\n  @Get('system')\n  @ApiOperation({ summary: 'Get system-wide job metrics' })\n  @ApiResponse({\n    status: 200,\n    description: 'System metrics including overall performance and statistics',\n  })\n  async getSystemMetrics() {\n    try {\n      const metrics = this.metricsService.getSystemMetrics();\n      await Promise.resolve(); // Keep async for potential future async operations\n\n      return {\n        success: true,\n        data: metrics,\n        timestamp: new Date().toISOString(),\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: `Failed to get system metrics: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        timestamp: new Date().toISOString(),\n      };\n    }\n  }\n\n  /**\n   * Get all queue metrics\n   */\n  @Get('queues')\n  @ApiOperation({ summary: 'Get metrics for all queues' })\n  @ApiResponse({\n    status: 200,\n    description: 'Metrics for all job queues',\n  })\n  async getAllQueueMetrics() {\n    try {\n      const metrics = this.metricsService.getAllQueueMetrics();\n      await Promise.resolve(); // Keep async for potential future async operations\n\n      return {\n        success: true,\n        data: metrics,\n        count: metrics.length,\n        timestamp: new Date().toISOString(),\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: `Failed to get queue metrics: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        timestamp: new Date().toISOString(),\n      };\n    }\n  }\n\n  /**\n   * Get metrics for a specific queue\n   */\n  @Get('queues/:queueName')\n  @ApiOperation({ summary: 'Get metrics for a specific queue' })\n  @ApiResponse({\n    status: 200,\n    description: 'Metrics for the specified queue',\n  })\n  @ApiResponse({\n    status: 404,\n    description: 'Queue not found',\n  })\n  async getQueueMetrics(@Param('queueName') queueName: string) {\n    try {\n      const metrics = this.metricsService.getQueueMetrics(queueName);\n      await Promise.resolve(); // Keep async for potential future async operations\n\n      if (!metrics) {\n        return {\n          success: false,\n          message: `Queue '${queueName}' not found or has no metrics`,\n          timestamp: new Date().toISOString(),\n        };\n      }\n\n      return {\n        success: true,\n        data: metrics,\n        timestamp: new Date().toISOString(),\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: `Failed to get queue metrics: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        timestamp: new Date().toISOString(),\n      };\n    }\n  }\n\n  /**\n   * Get metrics for a specific job\n   */\n  @Get('jobs/:jobId')\n  @ApiOperation({ summary: 'Get metrics for a specific job' })\n  @ApiResponse({\n    status: 200,\n    description: 'Metrics for the specified job',\n  })\n  @ApiResponse({\n    status: 404,\n    description: 'Job not found',\n  })\n  async getJobMetrics(@Param('jobId') jobId: string) {\n    try {\n      const metrics = this.metricsService.getJobMetrics(jobId);\n      await Promise.resolve(); // Keep async for potential future async operations\n\n      if (!metrics) {\n        return {\n          success: false,\n          message: `Job '${jobId}' not found or has no metrics`,\n          timestamp: new Date().toISOString(),\n        };\n      }\n\n      return {\n        success: true,\n        data: metrics,\n        timestamp: new Date().toISOString(),\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: `Failed to get job metrics: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        timestamp: new Date().toISOString(),\n      };\n    }\n  }\n\n  /**\n   * Get job metrics by time range\n   */\n  @Get('jobs')\n  @ApiOperation({ summary: 'Get job metrics by time range' })\n  @ApiQuery({\n    name: 'startTime',\n    required: false,\n    description: 'Start time in ISO format (default: 24 hours ago)',\n  })\n  @ApiQuery({\n    name: 'endTime',\n    required: false,\n    description: 'End time in ISO format (default: now)',\n  })\n  @ApiQuery({\n    name: 'organizationId',\n    required: false,\n    description: 'Filter by organization ID',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Job metrics for the specified time range',\n  })\n  async getJobMetricsByTimeRange(\n    @Query('startTime') startTimeStr?: string,\n    @Query('endTime') endTimeStr?: string,\n    @Query('organizationId') organizationId?: string,\n  ) {\n    try {\n      // Default to last 24 hours if no time range specified\n      const endTime = endTimeStr ? new Date(endTimeStr) : new Date();\n      const startTime = startTimeStr\n        ? new Date(startTimeStr)\n        : new Date(endTime.getTime() - 24 * 60 * 60 * 1000);\n\n      let metrics = this.metricsService.getJobMetricsByTimeRange(\n        startTime,\n        endTime,\n      );\n      await Promise.resolve(); // Keep async for potential future async operations\n\n      // Filter by organization if specified\n      if (organizationId) {\n        metrics = metrics.filter(\n          (metric) => metric.organizationId === organizationId,\n        );\n      }\n\n      // Calculate summary statistics\n      const completedJobs = metrics.filter((m) => m.status === 'completed');\n      const failedJobs = metrics.filter((m) => m.status === 'failed');\n      const totalDuration = completedJobs.reduce(\n        (sum, m) => sum + (m.duration || 0),\n        0,\n      );\n      const averageDuration =\n        completedJobs.length > 0 ? totalDuration / completedJobs.length : 0;\n      const successRate =\n        metrics.length > 0\n          ? (completedJobs.length /\n              (completedJobs.length + failedJobs.length)) *\n            100\n          : 0;\n\n      return {\n        success: true,\n        data: {\n          metrics,\n          summary: {\n            totalJobs: metrics.length,\n            completedJobs: completedJobs.length,\n            failedJobs: failedJobs.length,\n            averageDuration,\n            successRate,\n            timeRange: {\n              startTime: startTime.toISOString(),\n              endTime: endTime.toISOString(),\n            },\n            organizationId,\n          },\n        },\n        timestamp: new Date().toISOString(),\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: `Failed to get job metrics by time range: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        timestamp: new Date().toISOString(),\n      };\n    }\n  }\n\n  /**\n   * Get job metrics by organization\n   */\n  @Get('organizations/:organizationId')\n  @ApiOperation({ summary: 'Get job metrics for a specific organization' })\n  @ApiResponse({\n    status: 200,\n    description: 'Job metrics for the specified organization',\n  })\n  async getJobMetricsByOrganization(\n    @Param('organizationId') organizationId: string,\n  ) {\n    try {\n      const metrics =\n        this.metricsService.getJobMetricsByOrganization(organizationId);\n      await Promise.resolve(); // Keep async for potential future async operations\n\n      // Calculate organization-specific statistics\n      const completedJobs = metrics.filter((m) => m.status === 'completed');\n      const failedJobs = metrics.filter((m) => m.status === 'failed');\n      const totalDuration = completedJobs.reduce(\n        (sum, m) => sum + (m.duration || 0),\n        0,\n      );\n      const averageDuration =\n        completedJobs.length > 0 ? totalDuration / completedJobs.length : 0;\n      const successRate =\n        metrics.length > 0\n          ? (completedJobs.length /\n              (completedJobs.length + failedJobs.length)) *\n            100\n          : 0;\n\n      // Group by job type\n      const jobsByType = metrics.reduce(\n        (acc, metric) => {\n          acc[metric.jobType] = (acc[metric.jobType] || 0) + 1;\n          return acc;\n        },\n        {} as Record<string, number>,\n      );\n\n      return {\n        success: true,\n        data: {\n          organizationId,\n          metrics,\n          summary: {\n            totalJobs: metrics.length,\n            completedJobs: completedJobs.length,\n            failedJobs: failedJobs.length,\n            averageDuration,\n            successRate,\n            jobsByType,\n          },\n        },\n        timestamp: new Date().toISOString(),\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: `Failed to get organization metrics: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        timestamp: new Date().toISOString(),\n      };\n    }\n  }\n\n  /**\n   * Clear old metrics\n   */\n  @Delete('cleanup')\n  @ApiOperation({ summary: 'Clear old job metrics' })\n  @ApiQuery({\n    name: 'olderThanHours',\n    required: false,\n    description: 'Clear metrics older than specified hours (default: 24)',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Old metrics cleared successfully',\n  })\n  @HttpCode(HttpStatus.OK)\n  async clearOldMetrics(@Query('olderThanHours') olderThanHours?: string) {\n    try {\n      const hours = olderThanHours ? parseInt(olderThanHours, 10) : 24;\n\n      if (isNaN(hours) || hours < 1) {\n        return {\n          success: false,\n          message:\n            'Invalid olderThanHours parameter. Must be a positive number.',\n          timestamp: new Date().toISOString(),\n        };\n      }\n\n      this.metricsService.clearOldMetrics(hours);\n      await Promise.resolve(); // Keep async for potential future async operations\n\n      return {\n        success: true,\n        message: `Cleared metrics older than ${hours} hours`,\n        timestamp: new Date().toISOString(),\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: `Failed to clear old metrics: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        timestamp: new Date().toISOString(),\n      };\n    }\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/jobs/controllers/job-monitoring.controller.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":78,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":78,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":80,"column":5,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":82,"endColumn":8},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":80,"column":12,"nodeType":"Identifier","messageId":"unsafeCall","endLine":80,"endColumn":18},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":102,"column":9,"nodeType":"MemberExpression","endLine":102,"endColumn":25},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":104,"column":9,"nodeType":"MemberExpression","endLine":104,"endColumn":25},{"ruleId":"sonarjs/no-duplicate-string","severity":2,"message":"Define a constant instead of duplicating this literal 7 times.","line":105,"column":59,"nodeType":"Literal","endLine":105,"endColumn":74},{"ruleId":"sonarjs/no-duplicate-string","severity":2,"message":"Define a constant instead of duplicating this literal 4 times.","line":121,"column":44,"nodeType":"Literal","endLine":121,"endColumn":61},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `JobType`.","line":124,"column":45,"nodeType":"TSAsExpression","messageId":"unsafeArgument","endLine":124,"endColumn":61},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":124,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":124,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4018,4021],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4018,4021],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `JobType`.","line":146,"column":46,"nodeType":"TSAsExpression","messageId":"unsafeArgument","endLine":146,"endColumn":62},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":146,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":146,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4842,4845],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4842,4845],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `JobType`.","line":168,"column":45,"nodeType":"TSAsExpression","messageId":"unsafeArgument","endLine":168,"endColumn":61},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":168,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":168,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5688,5691],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5688,5691],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `JobType`.","line":195,"column":9,"nodeType":"TSAsExpression","messageId":"unsafeArgument","endLine":195,"endColumn":25},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":195,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":195,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6689,6692],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6689,6692],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":203,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":203,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `JobType`.","line":241,"column":43,"nodeType":"TSAsExpression","messageId":"unsafeArgument","endLine":241,"endColumn":59},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":241,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":241,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8083,8086],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8083,8086],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `JobType`.","line":266,"column":44,"nodeType":"TSAsExpression","messageId":"unsafeArgument","endLine":266,"endColumn":60},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":266,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":266,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8944,8947],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8944,8947],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":20,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  Controller,\n  Get,\n  Post,\n  Delete,\n  Param,\n  UseGuards,\n  Req,\n  Res,\n} from '@nestjs/common';\nimport type { Request, Response } from 'express';\nimport {\n  ApiTags,\n  ApiOperation,\n  ApiResponse,\n  ApiBearerAuth,\n} from '@nestjs/swagger';\nimport { createBullBoard } from '@bull-board/api';\nimport { BullMQAdapter } from '@bull-board/api/bullMQAdapter';\nimport { ExpressAdapter } from '@bull-board/express';\nimport { JwtAuthGuard } from '../../presentation/guards/jwt-auth.guard';\nimport { AbilitiesGuard } from '../../authorization/abilities.guard';\nimport { CheckAbilities } from '../../authorization/abilities.decorator';\nimport { JobQueueService } from '../services/job-queue.service';\nimport { BullMQConfigService } from '../config/bullmq-config.service';\nimport { JobType } from '../types/job.types';\n\n/**\n * Job Monitoring Controller\n *\n * Provides Bull-Board UI integration for monitoring BullMQ job queues.\n * Protected by JWT authentication and CASL authorization.\n *\n * Routes:\n * - GET /admin/queues - Bull-Board dashboard\n * - GET /admin/queues/stats - Queue statistics API\n * - POST /admin/queues/:queueName/pause - Pause queue\n * - POST /admin/queues/:queueName/resume - Resume queue\n * - DELETE /admin/queues/:queueName/clean - Clean completed jobs\n */\n@ApiTags('Job Monitoring')\n@Controller('admin/queues')\n@UseGuards(JwtAuthGuard, AbilitiesGuard)\n@ApiBearerAuth()\nexport class JobMonitoringController {\n  private serverAdapter!: ExpressAdapter;\n\n  constructor(\n    private readonly jobQueueService: JobQueueService,\n    private readonly bullMQConfig: BullMQConfigService,\n  ) {\n    this.initializeBullBoard();\n  }\n\n  private initializeBullBoard() {\n    // Create Express adapter for Bull-Board\n    this.serverAdapter = new ExpressAdapter();\n    this.serverAdapter.setBasePath('/admin/queues');\n\n    // Get all queues and create adapters\n    const queues = this.bullMQConfig.getAllQueues();\n    const queueAdapters = queues.map((queue) => new BullMQAdapter(queue));\n\n    // Create Bull-Board instance\n    createBullBoard({\n      queues: queueAdapters,\n      serverAdapter: this.serverAdapter,\n    });\n  }\n\n  @Get('*')\n  @CheckAbilities({ action: 'manage', subject: 'all' }) // Admin only\n  @ApiOperation({ summary: 'Access Bull-Board job monitoring dashboard' })\n  @ApiResponse({ status: 200, description: 'Bull-Board dashboard' })\n  @ApiResponse({ status: 403, description: 'Insufficient permissions' })\n  async getBullBoardUI(@Req() req: Request, @Res() res: Response) {\n    // Delegate to Bull-Board Express adapter\n    const router = this.serverAdapter.getRouter();\n    await Promise.resolve(); // Keep async for potential future async operations\n    return router(req, res, () => {\n      res.status(404).send('Not Found');\n    });\n  }\n\n  @Get()\n  @CheckAbilities({ action: 'read', subject: 'all' }) // Admin and operators\n  @ApiOperation({ summary: 'Get queue statistics' })\n  @ApiResponse({\n    status: 200,\n    description: 'Queue statistics retrieved successfully',\n  })\n  async getQueueStats() {\n    const queueTypes = [\n      JobType.DATA_VALIDATION,\n      JobType.REPORT_GENERATION,\n      JobType.EMAIL_NOTIFICATION,\n    ];\n    const stats: Record<string, unknown> = {};\n\n    for (const queueType of queueTypes) {\n      try {\n        stats[queueType] = await this.jobQueueService.getQueueStats(queueType);\n      } catch (error) {\n        stats[queueType] = {\n          error: error instanceof Error ? error.message : 'Unknown error',\n        };\n      }\n    }\n\n    return {\n      success: true,\n      data: stats,\n      timestamp: new Date().toISOString(),\n    };\n  }\n\n  @Post(':queueName/pause')\n  @CheckAbilities({ action: 'manage', subject: 'all' }) // Admin only\n  @ApiOperation({ summary: 'Pause a queue' })\n  @ApiResponse({ status: 200, description: 'Queue paused successfully' })\n  @ApiResponse({ status: 404, description: 'Queue not found' })\n  async pauseQueue(@Param('queueName') queueName: string) {\n    try {\n      await this.jobQueueService.pauseQueue(queueName as any);\n      return {\n        success: true,\n        message: `Queue '${queueName}' paused successfully`,\n        timestamp: new Date().toISOString(),\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: `Failed to pause queue '${queueName}': ${error instanceof Error ? error.message : 'Unknown error'}`,\n        timestamp: new Date().toISOString(),\n      };\n    }\n  }\n\n  @Post(':queueName/resume')\n  @CheckAbilities({ action: 'manage', subject: 'all' }) // Admin only\n  @ApiOperation({ summary: 'Resume a paused queue' })\n  @ApiResponse({ status: 200, description: 'Queue resumed successfully' })\n  @ApiResponse({ status: 404, description: 'Queue not found' })\n  async resumeQueue(@Param('queueName') queueName: string) {\n    try {\n      await this.jobQueueService.resumeQueue(queueName as any);\n      return {\n        success: true,\n        message: `Queue '${queueName}' resumed successfully`,\n        timestamp: new Date().toISOString(),\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: `Failed to resume queue '${queueName}': ${error instanceof Error ? error.message : 'Unknown error'}`,\n        timestamp: new Date().toISOString(),\n      };\n    }\n  }\n\n  @Delete(':queueName/clean')\n  @CheckAbilities({ action: 'manage', subject: 'all' }) // Admin only\n  @ApiOperation({ summary: 'Clean completed and failed jobs from queue' })\n  @ApiResponse({ status: 200, description: 'Queue cleaned successfully' })\n  @ApiResponse({ status: 404, description: 'Queue not found' })\n  async cleanQueue(@Param('queueName') queueName: string) {\n    try {\n      await this.jobQueueService.cleanQueue(queueName as any, 'completed');\n      return {\n        success: true,\n        message: `Queue '${queueName}' cleaned successfully`,\n        timestamp: new Date().toISOString(),\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: `Failed to clean queue '${queueName}': ${error instanceof Error ? error.message : 'Unknown error'}`,\n        timestamp: new Date().toISOString(),\n      };\n    }\n  }\n\n  @Get(':queueName/jobs/:status')\n  @CheckAbilities({ action: 'read', subject: 'all' }) // Admin and operators\n  @ApiOperation({ summary: 'Get jobs by status from a specific queue' })\n  @ApiResponse({ status: 200, description: 'Jobs retrieved successfully' })\n  @ApiResponse({ status: 404, description: 'Queue not found' })\n  async getJobsByStatus(\n    @Param('queueName') queueName: string,\n    @Param('status')\n    status: 'waiting' | 'active' | 'completed' | 'failed' | 'delayed',\n  ) {\n    try {\n      const jobs = await this.jobQueueService.getJobsByStatus(\n        queueName as any,\n        status,\n      );\n\n      // Transform jobs for API response (remove sensitive data)\n      const transformedJobs = jobs.map((job) => ({\n        id: job.id,\n        name: job.name,\n        data: job.data,\n        progress: job.progress,\n        processedOn: job.processedOn,\n        finishedOn: job.finishedOn,\n        failedReason: job.failedReason,\n        attemptsMade: job.attemptsMade,\n        timestamp: job.timestamp,\n      }));\n\n      return {\n        success: true,\n        data: {\n          queueName,\n          status,\n          jobs: transformedJobs,\n          count: transformedJobs.length,\n        },\n        timestamp: new Date().toISOString(),\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: `Failed to get jobs from queue '${queueName}': ${error instanceof Error ? error.message : 'Unknown error'}`,\n        timestamp: new Date().toISOString(),\n      };\n    }\n  }\n\n  @Post(':queueName/jobs/:jobId/retry')\n  @CheckAbilities({ action: 'manage', subject: 'all' }) // Admin only\n  @ApiOperation({ summary: 'Retry a failed job' })\n  @ApiResponse({ status: 200, description: 'Job retried successfully' })\n  @ApiResponse({ status: 404, description: 'Job not found' })\n  async retryJob(\n    @Param('queueName') queueName: string,\n    @Param('jobId') jobId: string,\n  ) {\n    try {\n      await this.jobQueueService.retryJob(queueName as any, jobId);\n      return {\n        success: true,\n        message: `Job ${jobId} retried successfully`,\n        timestamp: new Date().toISOString(),\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: `Failed to retry job ${jobId}: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        timestamp: new Date().toISOString(),\n      };\n    }\n  }\n\n  @Delete(':queueName/jobs/:jobId')\n  @CheckAbilities({ action: 'manage', subject: 'all' }) // Admin only\n  @ApiOperation({ summary: 'Remove a job from queue' })\n  @ApiResponse({ status: 200, description: 'Job removed successfully' })\n  @ApiResponse({ status: 404, description: 'Job not found' })\n  async removeJob(\n    @Param('queueName') queueName: string,\n    @Param('jobId') jobId: string,\n  ) {\n    try {\n      await this.jobQueueService.removeJob(queueName as any, jobId);\n      return {\n        success: true,\n        message: `Job ${jobId} removed successfully`,\n        timestamp: new Date().toISOString(),\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: `Failed to remove job ${jobId}: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        timestamp: new Date().toISOString(),\n      };\n    }\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/jobs/controllers/job-scheduler.controller.ts","messages":[{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async method 'getScheduledJobs' has no 'await' expression.","line":61,"column":3,"nodeType":"FunctionExpression","messageId":"missingAwait","endLine":61,"endColumn":25,"suggestions":[{"messageId":"removeAsync","fix":{"range":[1484,1490],"text":""},"desc":"Remove 'async'."}]},{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async method 'getScheduledJob' has no 'await' expression.","line":85,"column":3,"nodeType":"FunctionExpression","messageId":"missingAwait","endLine":85,"endColumn":24,"suggestions":[{"messageId":"removeAsync","fix":{"range":[1996,2002],"text":""},"desc":"Remove 'async'."}]},{"ruleId":"sonarjs/no-duplicate-string","severity":2,"message":"Define a constant instead of duplicating this literal 6 times.","line":130,"column":94,"nodeType":"Literal","endLine":130,"endColumn":109},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":242,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":242,"endColumn":68},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":246,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":246,"endColumn":20},{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async method 'validateCron' has no 'await' expression.","line":267,"column":3,"nodeType":"FunctionExpression","messageId":"missingAwait","endLine":267,"endColumn":21,"suggestions":[{"messageId":"removeAsync","fix":{"range":[6784,6790],"text":""},"desc":"Remove 'async'."}]},{"ruleId":"sonarjs/todo-tag","severity":2,"message":"Complete the task associated to this \"TODO\" comment.","line":283,"column":10,"nodeType":null,"messageId":"completeTODO","endLine":283,"endColumn":14}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  Controller,\n  Get,\n  Post,\n  Put,\n  Delete,\n  Body,\n  Param,\n  HttpStatus,\n  HttpCode,\n} from '@nestjs/common';\nimport { ApiTags, ApiOperation, ApiResponse } from '@nestjs/swagger';\nimport {\n  JobSchedulerService,\n  type ScheduledJobConfig,\n} from '../services/job-scheduler.service';\n\n/**\n * Job Scheduler Controller\n *\n * Provides REST API endpoints for managing scheduled jobs in the WellFlow system.\n * Allows administrators to create, update, delete, and monitor scheduled jobs.\n *\n * Note: Authentication and authorization will be added later\n */\n@ApiTags('Job Scheduler')\n@Controller('jobs/scheduler')\nexport class JobSchedulerController {\n  constructor(private readonly schedulerService: JobSchedulerService) {}\n\n  /**\n   * Get all scheduled jobs\n   */\n  @Get()\n  @ApiOperation({ summary: 'Get all scheduled jobs' })\n  @ApiResponse({\n    status: 200,\n    description: 'List of all scheduled jobs',\n    schema: {\n      type: 'object',\n      properties: {\n        success: { type: 'boolean' },\n        data: {\n          type: 'array',\n          items: {\n            type: 'object',\n            properties: {\n              name: { type: 'string' },\n              cron: { type: 'string' },\n              enabled: { type: 'boolean' },\n              timezone: { type: 'string' },\n              description: { type: 'string' },\n              jobData: { type: 'object' },\n            },\n          },\n        },\n        timestamp: { type: 'string' },\n      },\n    },\n  })\n  async getScheduledJobs() {\n    const jobs = this.schedulerService.getScheduledJobs();\n\n    return {\n      success: true,\n      data: jobs,\n      count: jobs.length,\n      timestamp: new Date().toISOString(),\n    };\n  }\n\n  /**\n   * Get a specific scheduled job\n   */\n  @Get(':jobName')\n  @ApiOperation({ summary: 'Get a specific scheduled job' })\n  @ApiResponse({\n    status: 200,\n    description: 'Scheduled job details',\n  })\n  @ApiResponse({\n    status: 404,\n    description: 'Scheduled job not found',\n  })\n  async getScheduledJob(@Param('jobName') jobName: string) {\n    const job = this.schedulerService.getScheduledJob(jobName);\n\n    if (!job) {\n      return {\n        success: false,\n        message: `Scheduled job '${jobName}' not found`,\n        timestamp: new Date().toISOString(),\n      };\n    }\n\n    return {\n      success: true,\n      data: job,\n      timestamp: new Date().toISOString(),\n    };\n  }\n\n  /**\n   * Create a new scheduled job\n   */\n  @Post()\n  @ApiOperation({ summary: 'Create a new scheduled job' })\n  @ApiResponse({\n    status: 201,\n    description: 'Scheduled job created successfully',\n  })\n  @ApiResponse({\n    status: 400,\n    description: 'Invalid job configuration',\n  })\n  @HttpCode(HttpStatus.CREATED)\n  async createScheduledJob(@Body() jobConfig: ScheduledJobConfig) {\n    try {\n      await this.schedulerService.scheduleJob(jobConfig);\n\n      return {\n        success: true,\n        message: `Scheduled job '${jobConfig.name}' created successfully`,\n        data: jobConfig,\n        timestamp: new Date().toISOString(),\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: `Failed to create scheduled job: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        timestamp: new Date().toISOString(),\n      };\n    }\n  }\n\n  /**\n   * Update an existing scheduled job\n   */\n  @Put(':jobName')\n  @ApiOperation({ summary: 'Update an existing scheduled job' })\n  @ApiResponse({\n    status: 200,\n    description: 'Scheduled job updated successfully',\n  })\n  @ApiResponse({\n    status: 404,\n    description: 'Scheduled job not found',\n  })\n  async updateScheduledJob(\n    @Param('jobName') jobName: string,\n    @Body() updates: Partial<ScheduledJobConfig>,\n  ) {\n    try {\n      await this.schedulerService.updateScheduledJob(jobName, updates);\n\n      return {\n        success: true,\n        message: `Scheduled job '${jobName}' updated successfully`,\n        timestamp: new Date().toISOString(),\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: `Failed to update scheduled job: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        timestamp: new Date().toISOString(),\n      };\n    }\n  }\n\n  /**\n   * Delete a scheduled job\n   */\n  @Delete(':jobName')\n  @ApiOperation({ summary: 'Delete a scheduled job' })\n  @ApiResponse({\n    status: 200,\n    description: 'Scheduled job deleted successfully',\n  })\n  @ApiResponse({\n    status: 404,\n    description: 'Scheduled job not found',\n  })\n  async deleteScheduledJob(@Param('jobName') jobName: string) {\n    try {\n      await this.schedulerService.unscheduleJob(jobName);\n\n      return {\n        success: true,\n        message: `Scheduled job '${jobName}' deleted successfully`,\n        timestamp: new Date().toISOString(),\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: `Failed to delete scheduled job: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        timestamp: new Date().toISOString(),\n      };\n    }\n  }\n\n  /**\n   * Enable or disable a scheduled job\n   */\n  @Put(':jobName/toggle')\n  @ApiOperation({ summary: 'Enable or disable a scheduled job' })\n  @ApiResponse({\n    status: 200,\n    description: 'Scheduled job toggled successfully',\n  })\n  async toggleScheduledJob(\n    @Param('jobName') jobName: string,\n    @Body() body: { enabled: boolean },\n  ) {\n    try {\n      await this.schedulerService.toggleScheduledJob(jobName, body.enabled);\n\n      return {\n        success: true,\n        message: `Scheduled job '${jobName}' ${body.enabled ? 'enabled' : 'disabled'} successfully`,\n        timestamp: new Date().toISOString(),\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: `Failed to toggle scheduled job: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        timestamp: new Date().toISOString(),\n      };\n    }\n  }\n\n  /**\n   * Get scheduler statistics\n   */\n  @Get('stats/overview')\n  @ApiOperation({ summary: 'Get scheduler statistics' })\n  @ApiResponse({\n    status: 200,\n    description: 'Scheduler statistics',\n  })\n  async getSchedulerStats() {\n    try {\n      const stats = await this.schedulerService.getSchedulerStats();\n\n      return {\n        success: true,\n        data: stats,\n        timestamp: new Date().toISOString(),\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: `Failed to get scheduler stats: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        timestamp: new Date().toISOString(),\n      };\n    }\n  }\n\n  /**\n   * Validate cron expression\n   */\n  @Post('validate-cron')\n  @ApiOperation({ summary: 'Validate a cron expression' })\n  @ApiResponse({\n    status: 200,\n    description: 'Cron expression validation result',\n  })\n  async validateCron(@Body() body: { cron: string; timezone?: string }) {\n    try {\n      // Basic cron validation (in a real implementation, use a proper cron parser)\n      const cronParts = body.cron.trim().split(/\\s+/);\n      const isValid = cronParts.length === 5 || cronParts.length === 6;\n\n      if (!isValid) {\n        return {\n          success: false,\n          message: 'Invalid cron expression format',\n          details:\n            'Cron expression must have 5 or 6 parts (minute hour day month weekday [year])',\n          timestamp: new Date().toISOString(),\n        };\n      }\n\n      // TODO: Add more sophisticated cron validation using a library like 'cron-parser'\n\n      return {\n        success: true,\n        message: 'Cron expression is valid',\n        data: {\n          cron: body.cron,\n          timezone: body.timezone || 'UTC',\n          parts: {\n            minute: cronParts[0],\n            hour: cronParts[1],\n            day: cronParts[2],\n            month: cronParts[3],\n            weekday: cronParts[4],\n            year: cronParts[5] || '*',\n          },\n        },\n        timestamp: new Date().toISOString(),\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: `Failed to validate cron expression: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        timestamp: new Date().toISOString(),\n      };\n    }\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/jobs/jobs.module.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/jobs/processors/__tests__/data-validation.processor.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/jobs/processors/data-validation.processor.ts","messages":[{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async method 'initializeWorker' has no 'await' expression.","line":41,"column":3,"nodeType":"FunctionExpression","messageId":"missingAwait","endLine":41,"endColumn":33,"suggestions":[{"messageId":"removeAsync","fix":{"range":[1282,1288],"text":""},"desc":"Remove 'async'."}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise returned in function argument where a void return was expected.","line":62,"column":30,"nodeType":"ArrowFunctionExpression","messageId":"voidReturnArgument","endLine":70,"endColumn":6},{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async method 'validateProductionData' has no 'await' expression.","line":135,"column":3,"nodeType":"FunctionExpression","messageId":"missingAwait","endLine":135,"endColumn":39,"suggestions":[{"messageId":"removeAsync","fix":{"range":[4154,4260],"text":"validateProductionData(\n    data: ProductionDataValidationJobData,\n  ): ValidationJobResult"},"desc":"Remove 'async'."}]},{"ruleId":"sonarjs/pseudo-random","severity":2,"message":"Make sure that using this pseudorandom number generator is safe here.","line":177,"column":51,"nodeType":"CallExpression","messageId":"safeGenerator","endLine":177,"endColumn":64},{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async method 'validateWellData' has no 'await' expression.","line":190,"column":3,"nodeType":"FunctionExpression","messageId":"missingAwait","endLine":190,"endColumn":33,"suggestions":[{"messageId":"removeAsync","fix":{"range":[5861,5955],"text":"validateWellData(\n    data: WellDataValidationJobData,\n  ): ValidationJobResult"},"desc":"Remove 'async'."}]},{"ruleId":"sonarjs/pseudo-random","severity":2,"message":"Make sure that using this pseudorandom number generator is safe here.","line":237,"column":43,"nodeType":"CallExpression","messageId":"safeGenerator","endLine":237,"endColumn":56},{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async method 'validateLeaseData' has no 'await' expression.","line":251,"column":3,"nodeType":"FunctionExpression","messageId":"missingAwait","endLine":251,"endColumn":34,"suggestions":[{"messageId":"removeAsync","fix":{"range":[7554,7650],"text":"validateLeaseData(\n    data: LeaseDataValidationJobData,\n  ): ValidationJobResult"},"desc":"Remove 'async'."}]}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Injectable, Logger, OnModuleInit } from '@nestjs/common';\nimport { Worker, Job } from 'bullmq';\nimport { BullMQConfigService } from '../config/bullmq-config.service';\nimport { JobErrorHandlerService } from '../services/job-error-handler.service';\nimport { JobMetricsService } from '../services/job-metrics.service';\nimport {\n  JobType,\n  DataValidationJobData,\n  ProductionDataValidationJobData,\n  WellDataValidationJobData,\n  LeaseDataValidationJobData,\n  ValidationJobResult,\n} from '../types/job.types';\n\n/**\n * Data Validation Processor\n *\n * Processes data validation jobs for oil & gas production data.\n * Ensures data integrity, compliance, and quality standards.\n *\n * Validation Types:\n * - Production data validation (volumes, pressures, rates)\n * - Well data integrity checks\n * - Lease data compliance validation\n */\n@Injectable()\nexport class DataValidationProcessor implements OnModuleInit {\n  private readonly logger = new Logger(DataValidationProcessor.name);\n  private worker!: Worker;\n\n  constructor(\n    private readonly bullMQConfig: BullMQConfigService,\n    private readonly errorHandler: JobErrorHandlerService,\n    private readonly metricsService: JobMetricsService,\n  ) {}\n\n  async onModuleInit() {\n    await this.initializeWorker();\n  }\n\n  private async initializeWorker() {\n    const queueConfig = this.bullMQConfig.getQueueConfig(\n      JobType.DATA_VALIDATION,\n    );\n\n    this.worker = new Worker(\n      JobType.DATA_VALIDATION,\n      async (job: Job<DataValidationJobData>) => {\n        return await this.processJob(job);\n      },\n      {\n        connection: this.bullMQConfig.getRedisConnection(),\n        ...queueConfig?.workerOptions,\n      },\n    );\n\n    this.worker.on('completed', (job, result) => {\n      this.logger.log(`Data validation job ${job.id} completed successfully`);\n      this.metricsService.recordJobComplete(job, result);\n    });\n\n    this.worker.on('failed', async (job, err) => {\n      this.logger.error(\n        `Data validation job ${job?.id} failed: ${err.message}`,\n      );\n      if (job) {\n        this.metricsService.recordJobFailure(job, err);\n        await this.errorHandler.handleJobFailure(job, err);\n      }\n    });\n\n    this.worker.on('error', (err) => {\n      this.logger.error(`Data validation worker error: ${err.message}`);\n    });\n\n    // Register worker with config service\n    this.bullMQConfig.registerWorker(JobType.DATA_VALIDATION, this.worker);\n\n    this.logger.log('Data validation processor initialized');\n  }\n\n  private async processJob(\n    job: Job<DataValidationJobData>,\n  ): Promise<ValidationJobResult> {\n    const startTime = Date.now();\n    this.metricsService.recordJobStart(job);\n    this.logger.log(`Processing data validation job ${job.id}: ${job.name}`);\n\n    try {\n      const { data } = job;\n      let result: ValidationJobResult;\n\n      // Route to specific validation handler based on data type\n      if ('productionRecordId' in data) {\n        result = await this.validateProductionData(data);\n      } else if ('wellId' in data && 'validationType' in data) {\n        result = await this.validateWellData(data);\n      } else if ('leaseId' in data) {\n        result = await this.validateLeaseData(data);\n      } else {\n        throw new Error('Unknown data validation job type');\n      }\n\n      // Ensure minimum processing time for testing\n      const processingTime = Math.max(Date.now() - startTime, 1);\n      result.processingTime = processingTime;\n\n      // Update job progress\n      await job.updateProgress(100);\n\n      return result;\n    } catch (error) {\n      const processingTime = Date.now() - startTime;\n      const errorMessage =\n        error instanceof Error ? error.message : 'Unknown error';\n      this.logger.error(\n        `Data validation job ${job.id} failed: ${errorMessage}`,\n      );\n\n      return {\n        success: false,\n        message: `Data validation failed: ${errorMessage}`,\n        errors: [errorMessage],\n        processingTime,\n        validationResults: {\n          passed: false,\n          errors: [errorMessage],\n          warnings: [],\n          validatedFields: [],\n        },\n      };\n    }\n  }\n\n  private async validateProductionData(\n    data: ProductionDataValidationJobData,\n  ): Promise<ValidationJobResult> {\n    this.logger.log(\n      `Validating production data for well ${data.wellId}, record ${data.productionRecordId}`,\n    );\n\n    // Simulate production data validation logic\n    const validationResults = {\n      passed: true,\n      errors: [] as string[],\n      warnings: [] as string[],\n      validatedFields: [\n        'oilVolume',\n        'gasVolume',\n        'waterVolume',\n        'pressure',\n        'temperature',\n        'daily_production',\n      ],\n    };\n\n    // Example validation rules\n    const mockValidationChecks = [\n      { field: 'oilVolume', rule: 'positive_number', passed: true },\n      { field: 'gasVolume', rule: 'positive_number', passed: true },\n      { field: 'waterVolume', rule: 'positive_number', passed: true },\n      { field: 'pressure', rule: 'within_range', passed: true },\n      { field: 'temperature', rule: 'within_range', passed: true },\n    ];\n\n    // Process validation checks\n    for (const check of mockValidationChecks) {\n      if (!check.passed) {\n        validationResults.errors.push(\n          `${check.field} failed ${check.rule} validation`,\n        );\n        validationResults.passed = false;\n      }\n    }\n\n    // Add warnings for edge cases\n    if (data.productionRecordId === 'prod-low' || Math.random() > 0.8) {\n      validationResults.warnings.push('Production below target threshold');\n    }\n\n    return {\n      success: validationResults.passed,\n      message: validationResults.passed\n        ? 'Production data validation completed successfully'\n        : 'Production data validation failed',\n      validationResults,\n    };\n  }\n\n  private async validateWellData(\n    data: WellDataValidationJobData,\n  ): Promise<ValidationJobResult> {\n    this.logger.log(\n      `Validating well data for well ${data.wellId}, type: ${data.validationType}`,\n    );\n\n    const validationResults = {\n      passed: true,\n      errors: [] as string[],\n      warnings: [] as string[],\n      validatedFields: [] as string[],\n    };\n\n    // Different validation based on type\n    switch (data.validationType) {\n      case 'integrity':\n        validationResults.validatedFields = [\n          'casingIntegrity',\n          'tubingCondition',\n          'wellheadPressure',\n        ];\n        break;\n      case 'compliance':\n        validationResults.validatedFields = [\n          'permits',\n          'inspections',\n          'reportingStatus',\n        ];\n        break;\n      case 'performance':\n        validationResults.validatedFields = [\n          'productionRates',\n          'efficiency',\n          'decline',\n        ];\n        break;\n      case 'equipment_status':\n        validationResults.validatedFields = [\n          'equipment_status',\n          'pumpStatus',\n          'sensorReadings',\n        ];\n        break;\n    }\n\n    // Simulate validation logic\n    if (data.wellId === 'well-anomaly' || Math.random() > 0.9) {\n      validationResults.warnings.push('Anomaly detected in equipment readings');\n      // Don't set passed to false for warnings, only for errors\n    }\n\n    return {\n      success: validationResults.passed,\n      message: validationResults.passed\n        ? `Well ${data.validationType} validation completed successfully`\n        : `Well ${data.validationType} validation failed`,\n      validationResults,\n    };\n  }\n\n  private async validateLeaseData(\n    data: LeaseDataValidationJobData,\n  ): Promise<ValidationJobResult> {\n    this.logger.log(\n      `Validating lease data for lease ${data.leaseId}, type: ${data.validationType}`,\n    );\n\n    // Validate lease ID\n    if (!data.leaseId || data.leaseId.trim().length === 0) {\n      return {\n        success: false,\n        message: 'Lease data validation failed: Invalid lease ID',\n        errors: ['Invalid lease ID'],\n        processingTime: 0,\n        validationResults: {\n          passed: false,\n          errors: ['Invalid lease ID'],\n          warnings: [],\n          validatedFields: [],\n        },\n      };\n    }\n\n    const validationResults = {\n      passed: true,\n      errors: [] as string[],\n      warnings: [] as string[],\n      validatedFields: [] as string[],\n    };\n\n    // Different validation based on type\n    switch (data.validationType) {\n      case 'ownership':\n        validationResults.validatedFields = [\n          'ownershipPercentages',\n          'workingInterest',\n          'royaltyInterest',\n        ];\n        break;\n      case 'revenue':\n        validationResults.validatedFields = [\n          'revenueDistribution',\n          'calculations',\n          'payments',\n        ];\n        break;\n      case 'compliance':\n        validationResults.validatedFields = [\n          'leaseTerms',\n          'obligations',\n          'reporting',\n        ];\n        break;\n      case 'production_data':\n        validationResults.validatedFields = [\n          'productionRecords',\n          'allocation',\n          'reporting',\n        ];\n        break;\n    }\n\n    // Simulate validation logic - only fail for specific test cases\n    if (data.leaseId === 'lease-error') {\n      validationResults.errors.push(\n        `Lease ${data.validationType} validation failed`,\n      );\n      validationResults.passed = false;\n    }\n\n    return {\n      success: validationResults.passed,\n      message: validationResults.passed\n        ? `Lease ${data.validationType} validation completed successfully`\n        : `Lease ${data.validationType} validation failed`,\n      validationResults,\n    };\n  }\n\n  async close() {\n    if (this.worker) {\n      await this.worker.close();\n      this.logger.log('Data validation processor closed');\n    }\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/jobs/processors/email-notification.processor.ts","messages":[{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async method 'initializeWorker' has no 'await' expression.","line":35,"column":3,"nodeType":"FunctionExpression","messageId":"missingAwait","endLine":35,"endColumn":33,"suggestions":[{"messageId":"removeAsync","fix":{"range":[1073,1079],"text":""},"desc":"Remove 'async'."}]},{"ruleId":"sonarjs/no-duplicate-string","severity":2,"message":"Define a constant instead of duplicating this literal 4 times.","line":106,"column":50,"nodeType":"Literal","endLine":106,"endColumn":65},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":290,"column":12,"nodeType":"MemberExpression","endLine":290,"endColumn":35},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":295,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":295,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9048,9051],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9048,9051],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .currentValue on an `any` value.","line":298,"column":68,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":298,"endColumn":80},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .expectedValue on an `any` value.","line":298,"column":105,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":298,"endColumn":118},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .severity on an `any` value.","line":299,"column":75,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":299,"endColumn":83},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .threshold on an `any` value.","line":300,"column":88,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":300,"endColumn":97},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":302,"column":12,"nodeType":"MemberExpression","endLine":302,"endColumn":32},{"ruleId":"sonarjs/pseudo-random","severity":2,"message":"Make sure that using this pseudorandom number generator is safe here.","line":317,"column":36,"nodeType":"CallExpression","messageId":"safeGenerator","endLine":317,"endColumn":49},{"ruleId":"sonarjs/pseudo-random","severity":2,"message":"Make sure that using this pseudorandom number generator is safe here.","line":320,"column":9,"nodeType":"CallExpression","messageId":"safeGenerator","endLine":320,"endColumn":22}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Injectable, Logger, OnModuleInit } from '@nestjs/common';\nimport { Worker, Job } from 'bullmq';\nimport { BullMQConfigService } from '../config/bullmq-config.service';\nimport {\n  JobType,\n  EmailNotificationJobData,\n  ComplianceReminderJobData,\n  ProductionAlertJobData,\n  SystemNotificationJobData,\n  NotificationJobResult,\n} from '../types/job.types';\n\n/**\n * Email Notification Processor\n *\n * Processes email notification jobs for oil & gas operations.\n * Handles compliance reminders, production alerts, and system notifications.\n *\n * Notification Types:\n * - Compliance reminders (Form PR due, permit renewals)\n * - Production alerts (low production, equipment failures)\n * - System notifications (maintenance, security alerts)\n */\n@Injectable()\nexport class EmailNotificationProcessor implements OnModuleInit {\n  private readonly logger = new Logger(EmailNotificationProcessor.name);\n  private worker!: Worker;\n\n  constructor(private readonly bullMQConfig: BullMQConfigService) {}\n\n  async onModuleInit() {\n    await this.initializeWorker();\n  }\n\n  private async initializeWorker() {\n    const queueConfig = this.bullMQConfig.getQueueConfig(\n      JobType.EMAIL_NOTIFICATION,\n    );\n\n    this.worker = new Worker(\n      JobType.EMAIL_NOTIFICATION,\n      async (job: Job<EmailNotificationJobData>) => {\n        return await this.processJob(job);\n      },\n      {\n        connection: this.bullMQConfig.getRedisConnection(),\n        ...queueConfig?.workerOptions,\n      },\n    );\n\n    this.worker.on('completed', (job) => {\n      this.logger.log(\n        `Email notification job ${job.id} completed successfully`,\n      );\n    });\n\n    this.worker.on('failed', (job, err) => {\n      this.logger.error(\n        `Email notification job ${job?.id} failed: ${err.message}`,\n      );\n    });\n\n    this.worker.on('error', (err) => {\n      this.logger.error(`Email notification worker error: ${err.message}`);\n    });\n\n    // Register worker with config service\n    this.bullMQConfig.registerWorker(JobType.EMAIL_NOTIFICATION, this.worker);\n\n    this.logger.log('Email notification processor initialized');\n  }\n\n  private async processJob(\n    job: Job<EmailNotificationJobData>,\n  ): Promise<NotificationJobResult> {\n    const startTime = Date.now();\n    this.logger.log(`Processing email notification job ${job.id}: ${job.name}`);\n\n    try {\n      const { data } = job;\n      let result: NotificationJobResult;\n\n      // Update progress\n      await job.updateProgress(10);\n\n      // Route to specific notification handler based on data type\n      if ('reminderType' in data && 'dueDate' in data) {\n        result = await this.sendComplianceReminder(data, job);\n      } else if ('alertType' in data && 'wellId' in data) {\n        result = await this.sendProductionAlert(data, job);\n      } else if ('notificationType' in data && 'message' in data) {\n        result = await this.sendSystemNotification(data, job);\n      } else {\n        throw new Error('Unknown email notification job type');\n      }\n\n      result.processingTime = Date.now() - startTime;\n\n      // Final progress update\n      await job.updateProgress(100);\n\n      return result;\n    } catch (error) {\n      const processingTime = Date.now() - startTime;\n      const errorMessage =\n        error instanceof Error ? error.message : 'Unknown error';\n      this.logger.error(\n        `Email notification job ${job.id} failed: ${errorMessage}`,\n      );\n\n      return {\n        success: false,\n        message: `Email notification failed: ${errorMessage}`,\n        errors: [errorMessage],\n        processingTime,\n        sentTo: [],\n        failedRecipients: [],\n      };\n    }\n  }\n\n  private async sendComplianceReminder(\n    data: ComplianceReminderJobData,\n    job: Job,\n  ): Promise<NotificationJobResult> {\n    this.logger.log(`Sending compliance reminder: ${data.reminderType}`);\n\n    await job.updateProgress(25);\n\n    // Simulate email template preparation\n    const emailTemplate = this.getComplianceReminderTemplate(data.reminderType);\n    await this.simulateDelay(300);\n\n    await job.updateProgress(50);\n\n    // Simulate sending emails\n    const sentTo: string[] = [];\n    const failedRecipients: string[] = [];\n\n    for (const email of data.recipientEmails) {\n      try {\n        await this.simulateEmailSend(email, emailTemplate);\n        sentTo.push(email);\n        this.logger.log(`Compliance reminder sent to ${email}`);\n      } catch (error) {\n        failedRecipients.push(email);\n        const errorMessage =\n          error instanceof Error ? error.message : 'Unknown error';\n        this.logger.error(\n          `Failed to send compliance reminder to ${email}: ${errorMessage}`,\n        );\n      }\n\n      // Update progress incrementally\n      const progress =\n        50 +\n        ((sentTo.length + failedRecipients.length) /\n          data.recipientEmails.length) *\n          40;\n      await job.updateProgress(Math.floor(progress));\n    }\n\n    await job.updateProgress(90);\n\n    return {\n      success: failedRecipients.length === 0,\n      message: `Compliance reminder sent to ${sentTo.length} recipients, ${failedRecipients.length} failed`,\n      sentTo,\n      failedRecipients,\n      messageId: `compliance-${Date.now()}`,\n    };\n  }\n\n  private async sendProductionAlert(\n    data: ProductionAlertJobData,\n    job: Job,\n  ): Promise<NotificationJobResult> {\n    this.logger.log(\n      `Sending production alert: ${data.alertType} for well ${data.wellId}`,\n    );\n\n    await job.updateProgress(25);\n\n    // Simulate alert template preparation\n    const emailTemplate = this.getProductionAlertTemplate(\n      data.alertType,\n      data.alertData,\n    );\n    await this.simulateDelay(200);\n\n    await job.updateProgress(50);\n\n    // Simulate sending emails\n    const sentTo: string[] = [];\n    const failedRecipients: string[] = [];\n\n    for (const email of data.recipientEmails) {\n      try {\n        await this.simulateEmailSend(email, emailTemplate);\n        sentTo.push(email);\n        this.logger.log(`Production alert sent to ${email}`);\n      } catch (error) {\n        failedRecipients.push(email);\n        const errorMessage =\n          error instanceof Error ? error.message : 'Unknown error';\n        this.logger.error(\n          `Failed to send production alert to ${email}: ${errorMessage}`,\n        );\n      }\n\n      // Update progress incrementally\n      const progress =\n        50 +\n        ((sentTo.length + failedRecipients.length) /\n          data.recipientEmails.length) *\n          40;\n      await job.updateProgress(Math.floor(progress));\n    }\n\n    return {\n      success: failedRecipients.length === 0,\n      message: `Production alert sent to ${sentTo.length} recipients, ${failedRecipients.length} failed`,\n      sentTo,\n      failedRecipients,\n      messageId: `alert-${data.wellId}-${Date.now()}`,\n    };\n  }\n\n  private async sendSystemNotification(\n    data: SystemNotificationJobData,\n    job: Job,\n  ): Promise<NotificationJobResult> {\n    this.logger.log(`Sending system notification: ${data.notificationType}`);\n\n    await job.updateProgress(25);\n\n    // Simulate notification template preparation\n    const emailTemplate = this.getSystemNotificationTemplate(\n      data.notificationType || 'system_maintenance',\n      data.message,\n    );\n    await this.simulateDelay(150);\n\n    await job.updateProgress(50);\n\n    // Simulate sending emails\n    const sentTo: string[] = [];\n    const failedRecipients: string[] = [];\n\n    for (const email of data.recipientEmails) {\n      try {\n        await this.simulateEmailSend(email, emailTemplate);\n        sentTo.push(email);\n        this.logger.log(`System notification sent to ${email}`);\n      } catch (error) {\n        failedRecipients.push(email);\n        const errorMessage =\n          error instanceof Error ? error.message : 'Unknown error';\n        this.logger.error(\n          `Failed to send system notification to ${email}: ${errorMessage}`,\n        );\n      }\n\n      // Update progress incrementally\n      const progress =\n        50 +\n        ((sentTo.length + failedRecipients.length) /\n          data.recipientEmails.length) *\n          40;\n      await job.updateProgress(Math.floor(progress));\n    }\n\n    return {\n      success: failedRecipients.length === 0,\n      message: `System notification sent to ${sentTo.length} recipients, ${failedRecipients.length} failed`,\n      sentTo,\n      failedRecipients,\n      messageId: `system-${Date.now()}`,\n    };\n  }\n\n  private getComplianceReminderTemplate(reminderType: string): string {\n    const templates: Record<string, string> = {\n      form_pr_due: 'Form PR Report Due - Please submit your production report',\n      jib_statement_due:\n        'JIB Statement Due - Joint Interest Billing statement required',\n      permit_renewal: 'Permit Renewal Required - Your permit is expiring soon',\n      inspection_due: 'Inspection Due - Schedule your required inspection',\n    };\n    return templates[reminderType] || 'Compliance reminder';\n  }\n\n  private getProductionAlertTemplate(\n    alertType: string,\n    alertData: any,\n  ): string {\n    const templates: Record<string, string> = {\n      low_production: `Low Production Alert - Current: ${alertData.currentValue}, Expected: ${alertData.expectedValue}`,\n      equipment_failure: `Equipment Failure Alert - Severity: ${alertData.severity}`,\n      anomaly_detected: `Production Anomaly Detected - Threshold exceeded: ${alertData.threshold}`,\n    };\n    return templates[alertType] || 'Production alert';\n  }\n\n  private getSystemNotificationTemplate(\n    notificationType: string,\n    message: string,\n  ): string {\n    return `System Notification (${notificationType}): ${message}`;\n  }\n\n  private async simulateEmailSend(\n    _email: string,\n    _template: string,\n  ): Promise<void> {\n    // Simulate email sending delay\n    await this.simulateDelay(100 + Math.random() * 200);\n\n    // Simulate occasional failures (5% failure rate)\n    if (Math.random() < 0.05) {\n      throw new Error('Email service temporarily unavailable');\n    }\n  }\n\n  private async simulateDelay(ms: number): Promise<void> {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n  }\n\n  async close() {\n    if (this.worker) {\n      await this.worker.close();\n      this.logger.log('Email notification processor closed');\n    }\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/jobs/processors/report-generation.processor.ts","messages":[{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async method 'initializeWorker' has no 'await' expression.","line":35,"column":3,"nodeType":"FunctionExpression","messageId":"missingAwait","endLine":35,"endColumn":33,"suggestions":[{"messageId":"removeAsync","fix":{"range":[1026,1032],"text":""},"desc":"Remove 'async'."}]},{"ruleId":"sonarjs/pseudo-random","severity":2,"message":"Make sure that using this pseudorandom number generator is safe here.","line":151,"column":30,"nodeType":"CallExpression","messageId":"safeGenerator","endLine":151,"endColumn":43},{"ruleId":"sonarjs/pseudo-random","severity":2,"message":"Make sure that using this pseudorandom number generator is safe here.","line":191,"column":30,"nodeType":"CallExpression","messageId":"safeGenerator","endLine":191,"endColumn":43},{"ruleId":"sonarjs/pseudo-random","severity":2,"message":"Make sure that using this pseudorandom number generator is safe here.","line":237,"column":30,"nodeType":"CallExpression","messageId":"safeGenerator","endLine":237,"endColumn":43}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Injectable, Logger, OnModuleInit } from '@nestjs/common';\nimport { Worker, Job } from 'bullmq';\nimport { BullMQConfigService } from '../config/bullmq-config.service';\nimport {\n  JobType,\n  ReportGenerationJobData,\n  FormPRReportJobData,\n  JIBStatementJobData,\n  ProductionSummaryJobData,\n  ReportJobResult,\n} from '../types/job.types';\n\n/**\n * Report Generation Processor\n *\n * Processes report generation jobs for oil & gas compliance and analytics.\n * Generates regulatory reports, financial statements, and production summaries.\n *\n * Report Types:\n * - Form PR (Texas Railroad Commission Production Reports)\n * - JIB Statements (Joint Interest Billing)\n * - Production Summary Reports\n */\n@Injectable()\nexport class ReportGenerationProcessor implements OnModuleInit {\n  private readonly logger = new Logger(ReportGenerationProcessor.name);\n  private worker!: Worker;\n\n  constructor(private readonly bullMQConfig: BullMQConfigService) {}\n\n  async onModuleInit() {\n    await this.initializeWorker();\n  }\n\n  private async initializeWorker() {\n    const queueConfig = this.bullMQConfig.getQueueConfig(\n      JobType.REPORT_GENERATION,\n    );\n\n    this.worker = new Worker(\n      JobType.REPORT_GENERATION,\n      async (job: Job<ReportGenerationJobData>) => {\n        return await this.processJob(job);\n      },\n      {\n        connection: this.bullMQConfig.getRedisConnection(),\n        ...queueConfig?.workerOptions,\n      },\n    );\n\n    this.worker.on('completed', (job) => {\n      this.logger.log(`Report generation job ${job.id} completed successfully`);\n    });\n\n    this.worker.on('failed', (job, err) => {\n      this.logger.error(\n        `Report generation job ${job?.id} failed: ${err.message}`,\n      );\n    });\n\n    this.worker.on('error', (err) => {\n      this.logger.error(`Report generation worker error: ${err.message}`);\n    });\n\n    // Register worker with config service\n    this.bullMQConfig.registerWorker(JobType.REPORT_GENERATION, this.worker);\n\n    this.logger.log('Report generation processor initialized');\n  }\n\n  private async processJob(\n    job: Job<ReportGenerationJobData>,\n  ): Promise<ReportJobResult> {\n    const startTime = Date.now();\n    this.logger.log(`Processing report generation job ${job.id}: ${job.name}`);\n\n    try {\n      const { data } = job;\n      let result: ReportJobResult;\n\n      // Update progress\n      await job.updateProgress(10);\n\n      // Route to specific report handler based on data type\n      if (\n        'wellIds' in data &&\n        'reportPeriod' in data &&\n        'reportFormat' in data\n      ) {\n        result = await this.generateFormPRReport(data, job);\n      } else if ('leaseId' in data && 'statementPeriod' in data) {\n        result = await this.generateJIBStatement(data, job);\n      } else if ('aggregationType' in data) {\n        result = await this.generateProductionSummary(data, job);\n      } else {\n        throw new Error('Unknown report generation job type');\n      }\n\n      result.processingTime = Date.now() - startTime;\n\n      // Final progress update\n      await job.updateProgress(100);\n\n      return result;\n    } catch (error) {\n      const processingTime = Date.now() - startTime;\n      const errorMessage =\n        error instanceof Error ? error.message : 'Unknown error';\n      this.logger.error(\n        `Report generation job ${job.id} failed: ${errorMessage}`,\n      );\n\n      return {\n        success: false,\n        message: `Report generation failed: ${errorMessage}`,\n        errors: [errorMessage],\n        processingTime,\n        reportId: '',\n        generatedAt: new Date(),\n      };\n    }\n  }\n\n  private async generateFormPRReport(\n    data: FormPRReportJobData,\n    job: Job,\n  ): Promise<ReportJobResult> {\n    this.logger.log(\n      `Generating Form PR report for ${data.wellIds.length} wells`,\n    );\n\n    // Simulate report generation steps\n    await job.updateProgress(25);\n    await this.simulateDelay(1000); // Data collection\n\n    await job.updateProgress(50);\n    await this.simulateDelay(2000); // Report compilation\n\n    await job.updateProgress(75);\n    await this.simulateDelay(1500); // Format generation\n\n    // Generate mock report ID and URL\n    const reportId = `form-pr-${Date.now()}`;\n    const reportUrl = `https://storage.wellflow.com/reports/${reportId}.${data.reportFormat}`;\n\n    return {\n      success: true,\n      message: `Form PR report generated successfully for ${data.wellIds.length} wells`,\n      reportId,\n      reportUrl,\n      reportSize: Math.floor(Math.random() * 1000000) + 100000, // Random size in bytes\n      generatedAt: new Date(),\n    };\n  }\n\n  private async generateJIBStatement(\n    data: JIBStatementJobData,\n    job: Job,\n  ): Promise<ReportJobResult> {\n    this.logger.log(`Generating JIB statement for lease ${data.leaseId}`);\n\n    // Simulate JIB statement generation steps\n    await job.updateProgress(20);\n    await this.simulateDelay(800); // Lease data retrieval\n\n    await job.updateProgress(40);\n    await this.simulateDelay(1200); // Cost calculations\n\n    await job.updateProgress(60);\n    await this.simulateDelay(1000); // Revenue calculations\n\n    await job.updateProgress(80);\n    await this.simulateDelay(800); // Statement formatting\n\n    const reportId = `jib-${data.leaseId}-${Date.now()}`;\n    const reportUrl = `https://storage.wellflow.com/reports/${reportId}.pdf`;\n\n    // If email delivery is requested, simulate email sending\n    if (data.recipientEmails.length > 0) {\n      this.logger.log(\n        `Sending JIB statement to ${data.recipientEmails.length} recipients`,\n      );\n      await this.simulateDelay(500);\n    }\n\n    return {\n      success: true,\n      message: `JIB statement generated successfully for lease ${data.leaseId}`,\n      reportId,\n      reportUrl,\n      reportSize: Math.floor(Math.random() * 500000) + 50000,\n      generatedAt: new Date(),\n    };\n  }\n\n  private async generateProductionSummary(\n    data: ProductionSummaryJobData,\n    job: Job,\n  ): Promise<ReportJobResult> {\n    this.logger.log(\n      `Generating production summary report (${data.aggregationType})`,\n    );\n\n    // Simulate production summary generation steps\n    await job.updateProgress(15);\n    await this.simulateDelay(1500); // Data aggregation\n\n    await job.updateProgress(35);\n    await this.simulateDelay(2000); // Statistical calculations\n\n    await job.updateProgress(55);\n    await this.simulateDelay(1200); // Chart generation\n\n    await job.updateProgress(75);\n    await this.simulateDelay(1000); // Report formatting\n\n    await job.updateProgress(90);\n    await this.simulateDelay(500); // Final compilation\n\n    const reportId = `production-summary-${data.aggregationType}-${Date.now()}`;\n    const reportUrl = `https://storage.wellflow.com/reports/${reportId}.pdf`;\n\n    const wellCount = data.wellIds?.length || 0;\n    const leaseCount = data.leaseIds?.length || 0;\n\n    return {\n      success: true,\n      message: `Production summary report (${data.aggregationType}) generated successfully`,\n      data: {\n        wellCount,\n        leaseCount,\n        aggregationType: data.aggregationType,\n        reportPeriod: data.reportPeriod,\n      },\n      reportId,\n      reportUrl,\n      reportSize: Math.floor(Math.random() * 2000000) + 200000,\n      generatedAt: new Date(),\n    };\n  }\n\n  private async simulateDelay(ms: number): Promise<void> {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n  }\n\n  async close() {\n    if (this.worker) {\n      await this.worker.close();\n      this.logger.log('Report generation processor closed');\n    }\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/jobs/services/__tests__/job-metrics.service.spec.ts","messages":[{"ruleId":"sonarjs/no-hardcoded-passwords","severity":2,"message":"Review this potentially hard-coded password.","line":268,"column":19,"nodeType":"Literal","messageId":"reviewPassword","endLine":268,"endColumn":30}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Test, TestingModule } from '@nestjs/testing';\nimport { Logger } from '@nestjs/common';\nimport { Job } from 'bullmq';\nimport { JobMetricsService } from '../job-metrics.service';\nimport { JobType } from '../../types/job.types';\n\ndescribe('JobMetricsService', () => {\n  let service: JobMetricsService;\n\n  const mockJob = (overrides: Partial<Job> = {}) =>\n    ({\n      id: 'test-job-123',\n      name: 'test-job',\n      queueName: JobType.DATA_VALIDATION,\n      data: {\n        organizationId: 'org-456',\n        userId: 'user-789',\n      },\n      opts: {\n        priority: 1,\n        delay: 0,\n        attempts: 3,\n      },\n      attemptsMade: 0,\n      ...overrides,\n    }) as unknown as Job;\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [JobMetricsService],\n    }).compile();\n\n    service = module.get<JobMetricsService>(JobMetricsService);\n\n    // Mock the logger\n    jest.spyOn(Logger.prototype, 'log').mockImplementation();\n    jest.spyOn(Logger.prototype, 'error').mockImplementation();\n    jest.spyOn(Logger.prototype, 'warn').mockImplementation();\n    jest.spyOn(Logger.prototype, 'debug').mockImplementation();\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks();\n    // Clear metrics between tests\n    (service as any).jobMetrics.clear();\n    (service as any).queueMetrics.clear();\n  });\n\n  describe('Job Start Metrics', () => {\n    it('should record job start metrics', () => {\n      const job = mockJob();\n\n      service.recordJobStart(job);\n\n      const metrics = service.getJobMetrics('test-job-123');\n      expect(metrics).toBeDefined();\n      expect(metrics!.jobId).toBe('test-job-123');\n      expect(metrics!.queueName).toBe(JobType.DATA_VALIDATION);\n      expect(metrics!.status).toBe('started');\n      expect(metrics!.organizationId).toBe('org-456');\n      expect(metrics!.userId).toBe('user-789');\n      expect(metrics!.attemptNumber).toBe(1);\n      expect(metrics!.startTime).toBeInstanceOf(Date);\n    });\n\n    it('should update queue metrics on job start', () => {\n      const job = mockJob();\n\n      service.recordJobStart(job);\n\n      const queueMetrics = service.getQueueMetrics(JobType.DATA_VALIDATION);\n      expect(queueMetrics).toBeDefined();\n      expect(queueMetrics!.totalJobs).toBe(1);\n      expect(queueMetrics!.activeJobs).toBe(1);\n    });\n  });\n\n  describe('Job Completion Metrics', () => {\n    it('should record job completion metrics', () => {\n      const job = mockJob();\n      const result = { success: true, data: 'test-result' };\n\n      // First record start\n      service.recordJobStart(job);\n\n      // Then record completion\n      service.recordJobComplete(job, result);\n\n      const metrics = service.getJobMetrics('test-job-123');\n      expect(metrics).toBeDefined();\n      expect(metrics!.status).toBe('completed');\n      expect(metrics!.endTime).toBeInstanceOf(Date);\n      expect(metrics!.duration).toBeGreaterThan(0);\n      expect(metrics!.metadata?.result).toEqual(result);\n    });\n\n    it('should update queue metrics on job completion', () => {\n      const job = mockJob();\n\n      service.recordJobStart(job);\n      service.recordJobComplete(job, { success: true });\n\n      const queueMetrics = service.getQueueMetrics(JobType.DATA_VALIDATION);\n      expect(queueMetrics).toBeDefined();\n      expect(queueMetrics!.completedJobs).toBe(1);\n      expect(queueMetrics!.activeJobs).toBe(0);\n      expect(queueMetrics!.successRate).toBe(100);\n      expect(queueMetrics!.averageDuration).toBeGreaterThan(0);\n    });\n\n    it('should handle completion without start metrics', () => {\n      const job = mockJob();\n\n      service.recordJobComplete(job, { success: true });\n\n      // Should log warning but not crash\n      const metrics = service.getJobMetrics('test-job-123');\n      expect(metrics).toBeUndefined();\n    });\n  });\n\n  describe('Job Failure Metrics', () => {\n    it('should record job failure metrics', () => {\n      const job = mockJob();\n      const error = new Error('Test error');\n\n      service.recordJobStart(job);\n      service.recordJobFailure(job, error);\n\n      const metrics = service.getJobMetrics('test-job-123');\n      expect(metrics).toBeDefined();\n      expect(metrics!.status).toBe('failed');\n      expect(metrics!.errorMessage).toBe('Test error');\n      expect(metrics!.metadata?.errorName).toBe('Error');\n      expect(metrics!.metadata?.errorStack).toBeDefined();\n    });\n\n    it('should update queue metrics on job failure', () => {\n      const job = mockJob();\n\n      service.recordJobStart(job);\n      service.recordJobFailure(job, new Error('Test error'));\n\n      const queueMetrics = service.getQueueMetrics(JobType.DATA_VALIDATION);\n      expect(queueMetrics).toBeDefined();\n      expect(queueMetrics!.failedJobs).toBe(1);\n      expect(queueMetrics!.activeJobs).toBe(0);\n      expect(queueMetrics!.successRate).toBe(0);\n    });\n  });\n\n  describe('System Metrics', () => {\n    it('should calculate system-wide metrics', () => {\n      const job1 = mockJob({ id: 'job-1' });\n      const job2 = mockJob({ id: 'job-2' });\n      const job3 = mockJob({ id: 'job-3' });\n\n      // Record various job states\n      service.recordJobStart(job1);\n      service.recordJobComplete(job1, { success: true });\n\n      service.recordJobStart(job2);\n      service.recordJobComplete(job2, { success: true });\n\n      service.recordJobStart(job3);\n      service.recordJobFailure(job3, new Error('Test error'));\n\n      const systemMetrics = service.getSystemMetrics();\n\n      expect(systemMetrics.totalJobs).toBe(3);\n      expect(systemMetrics.totalCompletedJobs).toBe(2);\n      expect(systemMetrics.totalFailedJobs).toBe(1);\n      expect(systemMetrics.overallSuccessRate).toBeCloseTo(66.67, 1);\n      expect(systemMetrics.averageJobDuration).toBeGreaterThan(0);\n      expect(systemMetrics.timestamp).toBeInstanceOf(Date);\n    });\n\n    it('should handle empty metrics gracefully', () => {\n      const systemMetrics = service.getSystemMetrics();\n\n      expect(systemMetrics.totalJobs).toBe(0);\n      expect(systemMetrics.totalCompletedJobs).toBe(0);\n      expect(systemMetrics.totalFailedJobs).toBe(0);\n      expect(systemMetrics.overallSuccessRate).toBe(0);\n      expect(systemMetrics.averageJobDuration).toBe(0);\n    });\n  });\n\n  describe('Time Range Queries', () => {\n    it('should filter jobs by time range', () => {\n      const now = new Date();\n      const oneHourAgo = new Date(now.getTime() - 60 * 60 * 1000);\n      const twoHoursAgo = new Date(now.getTime() - 2 * 60 * 60 * 1000);\n\n      const job1 = mockJob({ id: 'job-1' });\n      const job2 = mockJob({ id: 'job-2' });\n\n      service.recordJobStart(job1);\n      service.recordJobStart(job2);\n\n      // Manually set start times for testing\n      const metrics1 = service.getJobMetrics('job-1')!;\n      const metrics2 = service.getJobMetrics('job-2')!;\n      metrics1.startTime = twoHoursAgo;\n      metrics2.startTime = now;\n\n      const recentJobs = service.getJobMetricsByTimeRange(oneHourAgo, now);\n\n      expect(recentJobs).toHaveLength(1);\n      expect(recentJobs[0]?.jobId).toBe('job-2');\n    });\n  });\n\n  describe('Organization Filtering', () => {\n    it('should filter jobs by organization', () => {\n      const job1 = mockJob({\n        id: 'job-1',\n        data: { organizationId: 'org-1' },\n      });\n      const job2 = mockJob({\n        id: 'job-2',\n        data: { organizationId: 'org-2' },\n      });\n\n      service.recordJobStart(job1);\n      service.recordJobStart(job2);\n\n      const org1Jobs = service.getJobMetricsByOrganization('org-1');\n\n      expect(org1Jobs).toHaveLength(1);\n      expect(org1Jobs[0]?.jobId).toBe('job-1');\n      expect(org1Jobs[0]?.organizationId).toBe('org-1');\n    });\n  });\n\n  describe('Metrics Cleanup', () => {\n    it('should clear old metrics', () => {\n      const job = mockJob();\n      service.recordJobStart(job);\n\n      // Manually set old timestamp\n      const metrics = service.getJobMetrics('test-job-123')!;\n      metrics.startTime = new Date(Date.now() - 25 * 60 * 60 * 1000); // 25 hours ago\n\n      service.clearOldMetrics(24); // Clear metrics older than 24 hours\n\n      const clearedMetrics = service.getJobMetrics('test-job-123');\n      expect(clearedMetrics).toBeUndefined();\n    });\n\n    it('should keep recent metrics', () => {\n      const job = mockJob();\n      service.recordJobStart(job);\n\n      service.clearOldMetrics(24); // Clear metrics older than 24 hours\n\n      const metrics = service.getJobMetrics('test-job-123');\n      expect(metrics).toBeDefined();\n    });\n  });\n\n  describe('Data Sanitization', () => {\n    it('should sanitize sensitive data in job results', () => {\n      const job = mockJob();\n      const result = {\n        success: true,\n        data: 'test-result',\n        password: 'secret123',\n        apiKey: 'key-456',\n        token: 'token-789',\n      };\n\n      service.recordJobStart(job);\n      service.recordJobComplete(job, result);\n\n      const metrics = service.getJobMetrics('test-job-123')!;\n      expect(metrics.metadata?.result.password).toBe('[REDACTED]');\n      expect(metrics.metadata?.result.apiKey).toBe('[REDACTED]');\n      expect(metrics.metadata?.result.token).toBe('[REDACTED]');\n      expect(metrics.metadata?.result.data).toBe('test-result');\n    });\n  });\n\n  describe('Queue Statistics', () => {\n    it('should calculate success rates correctly', () => {\n      const jobs = Array.from({ length: 10 }, (_, i) =>\n        mockJob({ id: `job-${i}` }),\n      );\n\n      // Start all jobs\n      jobs.forEach((job) => service.recordJobStart(job));\n\n      // Complete 7 jobs successfully\n      jobs\n        .slice(0, 7)\n        .forEach((job) => service.recordJobComplete(job, { success: true }));\n\n      // Fail 3 jobs\n      jobs\n        .slice(7)\n        .forEach((job) =>\n          service.recordJobFailure(job, new Error('Test error')),\n        );\n\n      const queueMetrics = service.getQueueMetrics(JobType.DATA_VALIDATION);\n      expect(queueMetrics!.successRate).toBe(70);\n      expect(queueMetrics!.completedJobs).toBe(7);\n      expect(queueMetrics!.failedJobs).toBe(3);\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/jobs/services/__tests__/job-queue.service.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/jobs/services/job-error-handler.service.ts","messages":[{"ruleId":"security/detect-object-injection","severity":2,"message":"Variable Assigned to Object Injection Sink","line":81,"column":20,"nodeType":"MemberExpression","endLine":81,"endColumn":48},{"ruleId":"sonarjs/pseudo-random","severity":2,"message":"Make sure that using this pseudorandom number generator is safe here.","line":136,"column":16,"nodeType":"CallExpression","messageId":"safeGenerator","endLine":136,"endColumn":29},{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async method 'moveToDeadLetterQueue' has no 'await' expression.","line":179,"column":3,"nodeType":"FunctionExpression","messageId":"missingAwait","endLine":179,"endColumn":38,"suggestions":[{"messageId":"removeAsync","fix":{"range":[4739,4824],"text":"moveToDeadLetterQueue(\n    job: Job,\n    jobError: JobError,\n  ): void"},"desc":"Remove 'async'."}]},{"ruleId":"sonarjs/todo-tag","severity":2,"message":"Complete the task associated to this \"TODO\" comment.","line":194,"column":8,"nodeType":null,"messageId":"completeTODO","endLine":194,"endColumn":12},{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async method 'sendErrorThresholdAlert' has no 'await' expression.","line":233,"column":3,"nodeType":"FunctionExpression","messageId":"missingAwait","endLine":233,"endColumn":40,"suggestions":[{"messageId":"removeAsync","fix":{"range":[6327,6457],"text":"sendErrorThresholdAlert(\n    queueName: JobType,\n    errors: JobError[],\n    config: ErrorHandlingConfig,\n  ): void"},"desc":"Remove 'async'."}]},{"ruleId":"sonarjs/todo-tag","severity":2,"message":"Complete the task associated to this \"TODO\" comment.","line":242,"column":8,"nodeType":null,"messageId":"completeTODO","endLine":242,"endColumn":12},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":244,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":244,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":251,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":251,"endColumn":19},{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async method 'sendCriticalFailureAlert' has no 'await' expression.","line":258,"column":3,"nodeType":"FunctionExpression","messageId":"missingAwait","endLine":258,"endColumn":41,"suggestions":[{"messageId":"removeAsync","fix":{"range":[7069,7134],"text":"sendCriticalFailureAlert(jobError: JobError): void"},"desc":"Remove 'async'."}]},{"ruleId":"sonarjs/todo-tag","severity":2,"message":"Complete the task associated to this \"TODO\" comment.","line":268,"column":8,"nodeType":null,"messageId":"completeTODO","endLine":268,"endColumn":12},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":274,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":274,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7585,7588],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7585,7588],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":278,"column":9,"nodeType":"MemberExpression","endLine":278,"endColumn":17},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":278,"column":21,"nodeType":"MemberExpression","endLine":278,"endColumn":29},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":325,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":325,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8933,8936],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8933,8936],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":325,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":325,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8939,8942],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8939,8942],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":330,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":330,"endColumn":34},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":336,"column":9,"nodeType":"MemberExpression","endLine":336,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [field] on an `any` value.","line":336,"column":19,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":336,"endColumn":24},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":346,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":346,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9411,9414],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9411,9414],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":347,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":347,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9450,9453],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9450,9453],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":352,"column":9,"nodeType":"MemberExpression","endLine":352,"endColumn":25},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":359,"column":15,"nodeType":"MemberExpression","endLine":359,"endColumn":24},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":359,"column":28,"nodeType":"MemberExpression","endLine":359,"endColumn":37}],"suppressedMessages":[],"errorCount":23,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Injectable, Logger } from '@nestjs/common';\nimport { Job } from 'bullmq';\nimport { JobType } from '../types/job.types';\n\nexport interface ErrorHandlingConfig {\n  maxRetries: number;\n  backoffType: 'fixed' | 'exponential';\n  baseDelay: number;\n  maxDelay: number;\n  jitter: boolean;\n  deadLetterQueue: boolean;\n  alertThreshold: number;\n}\n\nexport interface JobError {\n  jobId: string;\n  queueName: string;\n  jobName: string;\n  error: Error;\n  attemptNumber: number;\n  timestamp: Date;\n  jobData: unknown;\n}\n\n/**\n * Job Error Handler Service\n *\n * Provides comprehensive error handling, retry logic, and dead letter queue\n * management for BullMQ jobs in the WellFlow system.\n *\n * Features:\n * - Configurable retry strategies\n * - Exponential backoff with jitter\n * - Dead letter queue management\n * - Error alerting and notifications\n * - Detailed error logging and metrics\n */\n@Injectable()\nexport class JobErrorHandlerService {\n  private readonly logger = new Logger(JobErrorHandlerService.name);\n\n  // Error handling configurations by job type\n  private readonly errorConfigs: Record<JobType, ErrorHandlingConfig> = {\n    [JobType.DATA_VALIDATION]: {\n      maxRetries: 3,\n      backoffType: 'exponential',\n      baseDelay: 2000,\n      maxDelay: 30000,\n      jitter: true,\n      deadLetterQueue: true,\n      alertThreshold: 5, // Alert after 5 failures in 1 hour\n    },\n    [JobType.REPORT_GENERATION]: {\n      maxRetries: 2,\n      backoffType: 'exponential',\n      baseDelay: 5000,\n      maxDelay: 60000,\n      jitter: true,\n      deadLetterQueue: true,\n      alertThreshold: 3, // Alert after 3 failures in 1 hour\n    },\n    [JobType.EMAIL_NOTIFICATION]: {\n      maxRetries: 5,\n      backoffType: 'exponential',\n      baseDelay: 1000,\n      maxDelay: 15000,\n      jitter: true,\n      deadLetterQueue: true,\n      alertThreshold: 10, // Alert after 10 failures in 1 hour\n    },\n  };\n\n  // Track recent errors for alerting\n  private recentErrors: Map<string, JobError[]> = new Map();\n\n  /**\n   * Handle job failure with appropriate retry logic\n   */\n  async handleJobFailure(job: Job, error: Error): Promise<void> {\n    const queueName = job.queueName as JobType;\n    const config = this.errorConfigs[queueName];\n\n    if (!config) {\n      this.logger.error(`No error config found for queue: ${queueName}`);\n      return;\n    }\n\n    const jobError: JobError = {\n      jobId: job.id || 'unknown',\n      queueName,\n      jobName: job.name,\n      error,\n      attemptNumber: job.attemptsMade,\n      timestamp: new Date(),\n      jobData: this.sanitizeJobData(job.data),\n    };\n\n    // Log the error\n    this.logJobError(jobError);\n\n    // Track error for alerting\n    this.trackError(jobError);\n\n    // Check if we should retry\n    if (job.attemptsMade < config.maxRetries) {\n      this.scheduleRetry(job, config);\n    } else {\n      await this.handleMaxRetriesExceeded(job, jobError, config);\n    }\n\n    // Check if we need to send alerts\n    await this.checkAlertThreshold(queueName, config);\n  }\n\n  /**\n   * Calculate retry delay with exponential backoff and jitter\n   */\n  calculateRetryDelay(\n    attemptNumber: number,\n    config: ErrorHandlingConfig,\n  ): number {\n    let delay: number;\n\n    if (config.backoffType === 'exponential') {\n      delay = Math.min(\n        config.baseDelay * Math.pow(2, attemptNumber - 1),\n        config.maxDelay,\n      );\n    } else {\n      delay = config.baseDelay;\n    }\n\n    // Add jitter to prevent thundering herd\n    if (config.jitter) {\n      const jitterAmount = delay * 0.1; // 10% jitter\n      delay += Math.random() * jitterAmount - jitterAmount / 2;\n    }\n\n    return Math.floor(delay);\n  }\n\n  /**\n   * Schedule job retry with calculated delay\n   */\n  private scheduleRetry(job: Job, config: ErrorHandlingConfig): void {\n    const delay = this.calculateRetryDelay(job.attemptsMade + 1, config);\n\n    this.logger.log(\n      `Scheduling retry for job ${job.id} (${job.name}) in ${delay}ms (attempt ${job.attemptsMade + 1}/${config.maxRetries})`,\n    );\n\n    // The retry will be handled automatically by BullMQ based on job options\n    // This method is for logging and custom retry logic if needed\n  }\n\n  /**\n   * Handle jobs that have exceeded maximum retries\n   */\n  private async handleMaxRetriesExceeded(\n    job: Job,\n    jobError: JobError,\n    config: ErrorHandlingConfig,\n  ): Promise<void> {\n    this.logger.error(\n      `Job ${job.id} (${job.name}) exceeded maximum retries (${config.maxRetries})`,\n    );\n\n    if (config.deadLetterQueue) {\n      await this.moveToDeadLetterQueue(job, jobError);\n    }\n\n    // Send immediate alert for critical failures\n    await this.sendCriticalFailureAlert(jobError);\n  }\n\n  /**\n   * Move failed job to dead letter queue\n   */\n  private async moveToDeadLetterQueue(\n    job: Job,\n    jobError: JobError,\n  ): Promise<void> {\n    // In a real implementation, you would move the job to a dead letter queue\n    // For now, we'll log it as a dead letter\n    this.logger.error(`Moving job ${job.id} to dead letter queue`, {\n      jobId: job.id,\n      queueName: job.queueName,\n      jobName: job.name,\n      finalError: jobError.error.message,\n      attempts: job.attemptsMade,\n      jobData: jobError.jobData,\n    });\n\n    // TODO: Implement actual dead letter queue storage\n    // This could be a separate Redis list, database table, or external service\n  }\n\n  /**\n   * Track errors for alerting purposes\n   */\n  private trackError(jobError: JobError): void {\n    const key = `${jobError.queueName}:errors`;\n    const errors = this.recentErrors.get(key) || [];\n\n    // Add new error\n    errors.push(jobError);\n\n    // Keep only errors from the last hour\n    const oneHourAgo = new Date(Date.now() - 60 * 60 * 1000);\n    const recentErrors = errors.filter((error) => error.timestamp > oneHourAgo);\n\n    this.recentErrors.set(key, recentErrors);\n  }\n\n  /**\n   * Check if error threshold is exceeded and send alerts\n   */\n  private async checkAlertThreshold(\n    queueName: JobType,\n    config: ErrorHandlingConfig,\n  ): Promise<void> {\n    const key = `${queueName}:errors`;\n    const errors = this.recentErrors.get(key) || [];\n\n    if (errors.length >= config.alertThreshold) {\n      await this.sendErrorThresholdAlert(queueName, errors, config);\n    }\n  }\n\n  /**\n   * Send alert when error threshold is exceeded\n   */\n  private async sendErrorThresholdAlert(\n    queueName: JobType,\n    errors: JobError[],\n    config: ErrorHandlingConfig,\n  ): Promise<void> {\n    this.logger.warn(\n      `Error threshold exceeded for queue ${queueName}: ${errors.length} errors in the last hour (threshold: ${config.alertThreshold})`,\n    );\n\n    // TODO: Implement actual alerting (email, Slack, PagerDuty, etc.)\n    // For now, we'll just log the alert\n    const errorSummary = this.generateErrorSummary(errors);\n\n    this.logger.warn('Error threshold alert', {\n      queueName,\n      errorCount: errors.length,\n      threshold: config.alertThreshold,\n      timeWindow: '1 hour',\n      errorSummary,\n    });\n  }\n\n  /**\n   * Send immediate alert for critical failures\n   */\n  private async sendCriticalFailureAlert(jobError: JobError): Promise<void> {\n    this.logger.error('Critical job failure alert', {\n      jobId: jobError.jobId,\n      queueName: jobError.queueName,\n      jobName: jobError.jobName,\n      error: jobError.error.message,\n      attempts: jobError.attemptNumber,\n      timestamp: jobError.timestamp,\n    });\n\n    // TODO: Implement immediate alerting for critical failures\n  }\n\n  /**\n   * Generate error summary for alerts\n   */\n  private generateErrorSummary(errors: JobError[]): any {\n    const errorsByType = errors.reduce(\n      (acc, error) => {\n        const key = error.error.constructor.name;\n        acc[key] = (acc[key] || 0) + 1;\n        return acc;\n      },\n      {} as Record<string, number>,\n    );\n\n    const errorsByJob = errors.reduce(\n      (acc, error) => {\n        acc[error.jobName] = (acc[error.jobName] || 0) + 1;\n        return acc;\n      },\n      {} as Record<string, number>,\n    );\n\n    return {\n      totalErrors: errors.length,\n      errorsByType,\n      errorsByJob,\n      timeRange: {\n        start: Math.min(...errors.map((e) => e.timestamp.getTime())),\n        end: Math.max(...errors.map((e) => e.timestamp.getTime())),\n      },\n    };\n  }\n\n  /**\n   * Log job error with structured data\n   */\n  private logJobError(jobError: JobError): void {\n    this.logger.error(`Job failed: ${jobError.jobName} (${jobError.jobId})`, {\n      jobId: jobError.jobId,\n      queueName: jobError.queueName,\n      jobName: jobError.jobName,\n      error: {\n        name: jobError.error.name,\n        message: jobError.error.message,\n        stack: jobError.error.stack,\n      },\n      attemptNumber: jobError.attemptNumber,\n      timestamp: jobError.timestamp,\n      jobData: jobError.jobData,\n    });\n  }\n\n  /**\n   * Sanitize job data for logging (remove sensitive information)\n   */\n  private sanitizeJobData(data: any): any {\n    if (!data || typeof data !== 'object') {\n      return data;\n    }\n\n    const sanitized = { ...data };\n\n    // Remove sensitive fields\n    const sensitiveFields = ['password', 'token', 'secret', 'key', 'apiKey'];\n    sensitiveFields.forEach((field) => {\n      if (field in sanitized) {\n        sanitized[field] = '[REDACTED]';\n      }\n    });\n\n    return sanitized;\n  }\n\n  /**\n   * Get error statistics for monitoring\n   */\n  getErrorStatistics(): Record<string, any> {\n    const stats: Record<string, any> = {};\n\n    for (const [key, errors] of this.recentErrors.entries()) {\n      const [queueName] = key.split(':');\n      if (queueName) {\n        stats[queueName] = {\n          errorCount: errors.length,\n          lastError:\n            errors.length > 0 ? errors[errors.length - 1]?.timestamp : null,\n          errorsByType: errors.reduce(\n            (acc, error) => {\n              const type = error.error.constructor.name;\n              acc[type] = (acc[type] || 0) + 1;\n              return acc;\n            },\n            {} as Record<string, number>,\n          ),\n        };\n      }\n    }\n\n    return stats;\n  }\n\n  /**\n   * Clear error history (useful for testing or maintenance)\n   */\n  clearErrorHistory(): void {\n    this.recentErrors.clear();\n    this.logger.log('Error history cleared');\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/jobs/services/job-metrics.service.ts","messages":[{"ruleId":"sonarjs/todo-tag","severity":2,"message":"Complete the task associated to this \"TODO\" comment.","line":384,"column":10,"nodeType":null,"messageId":"completeTODO","endLine":384,"endColumn":14},{"ruleId":"sonarjs/todo-tag","severity":2,"message":"Complete the task associated to this \"TODO\" comment.","line":439,"column":8,"nodeType":null,"messageId":"completeTODO","endLine":439,"endColumn":12},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":446,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":446,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12072,12075],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12072,12075],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":446,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":446,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12078,12081],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12078,12081],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":452,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":452,"endColumn":36},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":457,"column":9,"nodeType":"MemberExpression","endLine":457,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [field] on an `any` value.","line":457,"column":19,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":457,"endColumn":24}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Injectable, Logger } from '@nestjs/common';\nimport { Job } from 'bullmq';\nimport { JobType } from '../types/job.types';\n\nexport interface JobMetrics {\n  jobId: string;\n  queueName: string;\n  jobName: string;\n  jobType: JobType;\n  status: 'started' | 'completed' | 'failed' | 'stalled' | 'delayed';\n  startTime: Date;\n  endTime?: Date;\n  duration?: number;\n  attemptNumber: number;\n  memoryUsage?: number;\n  cpuUsage?: number;\n  errorMessage?: string;\n  organizationId?: string;\n  userId?: string;\n  metadata?: Record<string, unknown>;\n}\n\nexport interface QueueMetrics {\n  queueName: string;\n  totalJobs: number;\n  completedJobs: number;\n  failedJobs: number;\n  activeJobs: number;\n  waitingJobs: number;\n  delayedJobs: number;\n  averageDuration: number;\n  successRate: number;\n  lastUpdated: Date;\n}\n\nexport interface SystemMetrics {\n  totalQueues: number;\n  totalJobs: number;\n  totalCompletedJobs: number;\n  totalFailedJobs: number;\n  overallSuccessRate: number;\n  averageJobDuration: number;\n  peakJobsPerHour: number;\n  systemUptime: number;\n  memoryUsage: number;\n  cpuUsage: number;\n  timestamp: Date;\n}\n\n/**\n * Job Metrics Service\n *\n * Collects, aggregates, and reports metrics for BullMQ job processing\n * in the WellFlow system. Integrates with Sentry for error tracking\n * and provides structured logging for monitoring and analytics.\n *\n * Features:\n * - Real-time job metrics collection\n * - Queue performance monitoring\n * - System-wide analytics\n * - Sentry integration for error tracking\n * - Structured logging for observability\n * - Performance trend analysis\n */\n@Injectable()\nexport class JobMetricsService {\n  private readonly logger = new Logger(JobMetricsService.name);\n\n  // In-memory metrics storage (in production, use Redis or database)\n  private jobMetrics: Map<string, JobMetrics> = new Map();\n  private queueMetrics: Map<string, QueueMetrics> = new Map();\n  private systemStartTime: Date = new Date();\n\n  /**\n   * Record job start metrics\n   */\n  recordJobStart(job: Job): void {\n    if (!job || !job.id) {\n      this.logger.warn('Cannot record metrics for invalid job');\n      return;\n    }\n\n    const metrics: JobMetrics = {\n      jobId: job.id,\n      queueName: job.queueName,\n      jobName: job.name,\n      jobType: job.queueName as JobType,\n      status: 'started',\n      startTime: new Date(),\n      attemptNumber: job.attemptsMade + 1,\n      memoryUsage: this.getMemoryUsage(),\n      organizationId: (job.data as Record<string, unknown> | undefined)\n        ?.organizationId as string | undefined,\n      userId: (job.data as Record<string, unknown> | undefined)?.userId as\n        | string\n        | undefined,\n      metadata: {\n        priority: job.opts?.priority,\n        delay: job.opts?.delay,\n        attempts: job.opts?.attempts,\n      },\n    };\n\n    this.jobMetrics.set(job.id, metrics);\n\n    this.logger.log(`Job started: ${job.name} (${job.id})`, {\n      jobId: job.id,\n      queueName: job.queueName,\n      jobName: job.name,\n      attemptNumber: metrics.attemptNumber,\n      organizationId: metrics.organizationId,\n      userId: metrics.userId,\n    });\n\n    // Update queue metrics\n    this.updateQueueMetrics(job.queueName, 'started');\n  }\n\n  /**\n   * Record job completion metrics\n   */\n  recordJobComplete(job: Job, result?: unknown): void {\n    const jobId = job.id;\n    if (!jobId) return;\n\n    const existingMetrics = this.jobMetrics.get(jobId);\n    if (!existingMetrics) {\n      this.logger.warn(`No start metrics found for completed job: ${job.id}`);\n      return;\n    }\n\n    const endTime = new Date();\n    const duration = Math.max(\n      1,\n      endTime.getTime() - existingMetrics.startTime.getTime(),\n    ); // Ensure minimum 1ms\n\n    const completedMetrics: JobMetrics = {\n      ...existingMetrics,\n      status: 'completed',\n      endTime,\n      duration,\n      memoryUsage: this.getMemoryUsage(),\n      metadata: {\n        ...existingMetrics.metadata,\n        result: this.sanitizeResult(result),\n      },\n    };\n\n    this.jobMetrics.set(jobId, completedMetrics);\n\n    this.logger.log(`Job completed: ${job.name} (${job.id})`, {\n      jobId: job.id,\n      queueName: job.queueName,\n      jobName: job.name,\n      duration,\n      attemptNumber: completedMetrics.attemptNumber,\n      organizationId: completedMetrics.organizationId,\n      userId: completedMetrics.userId,\n      success: true,\n    });\n\n    // Update queue metrics\n    this.updateQueueMetrics(job.queueName, 'completed', duration);\n\n    // Send metrics to external services\n    this.sendMetricsToSentry(completedMetrics, 'completed');\n  }\n\n  /**\n   * Record job failure metrics\n   */\n  recordJobFailure(job: Job, error: Error): void {\n    const jobId = job.id;\n    if (!jobId) return;\n\n    const existingMetrics = this.jobMetrics.get(jobId);\n    if (!existingMetrics) {\n      this.logger.warn(`No start metrics found for failed job: ${job.id}`);\n      return;\n    }\n\n    const endTime = new Date();\n    const duration = endTime.getTime() - existingMetrics.startTime.getTime();\n\n    const failedMetrics: JobMetrics = {\n      ...existingMetrics,\n      status: 'failed',\n      endTime,\n      duration,\n      errorMessage: error.message,\n      memoryUsage: this.getMemoryUsage(),\n      metadata: {\n        ...existingMetrics.metadata,\n        errorName: error.name,\n        errorStack: error.stack,\n      },\n    };\n\n    this.jobMetrics.set(jobId, failedMetrics);\n\n    this.logger.error(`Job failed: ${job.name} (${job.id})`, {\n      jobId: job.id,\n      queueName: job.queueName,\n      jobName: job.name,\n      duration,\n      attemptNumber: failedMetrics.attemptNumber,\n      error: error.message,\n      organizationId: failedMetrics.organizationId,\n      userId: failedMetrics.userId,\n      success: false,\n    });\n\n    // Update queue metrics\n    this.updateQueueMetrics(job.queueName, 'failed', duration);\n\n    // Send error metrics to Sentry\n    this.sendMetricsToSentry(failedMetrics, 'failed', error);\n  }\n\n  /**\n   * Get metrics for a specific job\n   */\n  getJobMetrics(jobId: string): JobMetrics | undefined {\n    return this.jobMetrics.get(jobId);\n  }\n\n  /**\n   * Get metrics for a specific queue\n   */\n  getQueueMetrics(queueName: string): QueueMetrics | undefined {\n    return this.queueMetrics.get(queueName);\n  }\n\n  /**\n   * Get all queue metrics\n   */\n  getAllQueueMetrics(): QueueMetrics[] {\n    return Array.from(this.queueMetrics.values());\n  }\n\n  /**\n   * Get system-wide metrics\n   */\n  getSystemMetrics(): SystemMetrics {\n    const allJobs = Array.from(this.jobMetrics.values());\n    const completedJobs = allJobs.filter((job) => job.status === 'completed');\n    const failedJobs = allJobs.filter((job) => job.status === 'failed');\n\n    const totalDuration = completedJobs.reduce(\n      (sum, job) => sum + (job.duration || 0),\n      0,\n    );\n    const averageDuration =\n      completedJobs.length > 0 ? totalDuration / completedJobs.length : 0;\n\n    const successRate =\n      allJobs.length > 0\n        ? (completedJobs.length / (completedJobs.length + failedJobs.length)) *\n          100\n        : 0;\n\n    return {\n      totalQueues: this.queueMetrics.size,\n      totalJobs: allJobs.length,\n      totalCompletedJobs: completedJobs.length,\n      totalFailedJobs: failedJobs.length,\n      overallSuccessRate: successRate,\n      averageJobDuration: averageDuration,\n      peakJobsPerHour: this.calculatePeakJobsPerHour(),\n      systemUptime: Date.now() - this.systemStartTime.getTime(),\n      memoryUsage: this.getMemoryUsage(),\n      cpuUsage: this.getCpuUsage(),\n      timestamp: new Date(),\n    };\n  }\n\n  /**\n   * Get job metrics by time range\n   */\n  getJobMetricsByTimeRange(startTime: Date, endTime: Date): JobMetrics[] {\n    return Array.from(this.jobMetrics.values()).filter(\n      (metrics) =>\n        metrics.startTime >= startTime && metrics.startTime <= endTime,\n    );\n  }\n\n  /**\n   * Get job metrics by organization\n   */\n  getJobMetricsByOrganization(organizationId: string): JobMetrics[] {\n    return Array.from(this.jobMetrics.values()).filter(\n      (metrics) => metrics.organizationId === organizationId,\n    );\n  }\n\n  /**\n   * Clear old metrics (cleanup)\n   */\n  clearOldMetrics(olderThanHours: number = 24): void {\n    const cutoffTime = new Date(Date.now() - olderThanHours * 60 * 60 * 1000);\n    let removedCount = 0;\n\n    for (const [jobId, metrics] of this.jobMetrics.entries()) {\n      if (metrics.startTime < cutoffTime) {\n        this.jobMetrics.delete(jobId);\n        removedCount++;\n      }\n    }\n\n    if (removedCount > 0) {\n      this.logger.log(\n        `Cleared ${removedCount} old job metrics (older than ${olderThanHours} hours)`,\n      );\n    }\n  }\n\n  /**\n   * Update queue-level metrics\n   */\n  private updateQueueMetrics(\n    queueName: string,\n    event: string,\n    duration?: number,\n  ): void {\n    let queueMetrics = this.queueMetrics.get(queueName);\n\n    if (!queueMetrics) {\n      queueMetrics = {\n        queueName,\n        totalJobs: 0,\n        completedJobs: 0,\n        failedJobs: 0,\n        activeJobs: 0,\n        waitingJobs: 0,\n        delayedJobs: 0,\n        averageDuration: 0,\n        successRate: 0,\n        lastUpdated: new Date(),\n      };\n    }\n\n    switch (event) {\n      case 'started':\n        queueMetrics.totalJobs++;\n        queueMetrics.activeJobs++;\n        break;\n      case 'completed':\n        queueMetrics.completedJobs++;\n        queueMetrics.activeJobs = Math.max(0, queueMetrics.activeJobs - 1);\n        if (duration) {\n          queueMetrics.averageDuration =\n            (queueMetrics.averageDuration * (queueMetrics.completedJobs - 1) +\n              duration) /\n            queueMetrics.completedJobs;\n        }\n        break;\n      case 'failed':\n        queueMetrics.failedJobs++;\n        queueMetrics.activeJobs = Math.max(0, queueMetrics.activeJobs - 1);\n        break;\n    }\n\n    // Calculate success rate\n    const totalFinished = queueMetrics.completedJobs + queueMetrics.failedJobs;\n    queueMetrics.successRate =\n      totalFinished > 0\n        ? (queueMetrics.completedJobs / totalFinished) * 100\n        : 0;\n\n    queueMetrics.lastUpdated = new Date();\n    this.queueMetrics.set(queueName, queueMetrics);\n  }\n\n  /**\n   * Send metrics to Sentry for monitoring\n   */\n  private sendMetricsToSentry(\n    metrics: JobMetrics,\n    event: string,\n    error?: Error,\n  ): void {\n    try {\n      // TODO: Integrate with actual Sentry SDK\n      // This is a placeholder for Sentry integration\n      const sentryData = {\n        event,\n        jobId: metrics.jobId,\n        queueName: metrics.queueName,\n        jobName: metrics.jobName,\n        duration: metrics.duration,\n        attemptNumber: metrics.attemptNumber,\n        organizationId: metrics.organizationId,\n        userId: metrics.userId,\n        timestamp: new Date().toISOString(),\n      };\n\n      if (error) {\n        // Sentry.captureException(error, { extra: sentryData });\n        this.logger.debug('Would send error to Sentry', {\n          error: error.message,\n          ...sentryData,\n        });\n      } else {\n        // Sentry.addBreadcrumb({ message: `Job ${event}`, data: sentryData });\n        this.logger.debug('Would send breadcrumb to Sentry', sentryData);\n      }\n    } catch (sentryError) {\n      this.logger.error('Failed to send metrics to Sentry:', sentryError);\n    }\n  }\n\n  /**\n   * Calculate peak jobs per hour\n   */\n  private calculatePeakJobsPerHour(): number {\n    const now = new Date();\n    const oneHourAgo = new Date(now.getTime() - 60 * 60 * 1000);\n\n    const recentJobs = Array.from(this.jobMetrics.values()).filter(\n      (metrics) => metrics.startTime >= oneHourAgo,\n    );\n\n    return recentJobs.length;\n  }\n\n  /**\n   * Get current memory usage\n   */\n  private getMemoryUsage(): number {\n    const memUsage = process.memoryUsage();\n    return Math.round(memUsage.heapUsed / 1024 / 1024); // MB\n  }\n\n  /**\n   * Get current CPU usage (placeholder)\n   */\n  private getCpuUsage(): number {\n    // TODO: Implement actual CPU usage calculation\n    return 0;\n  }\n\n  /**\n   * Sanitize job result for logging\n   */\n  private sanitizeResult(result: any): any {\n    if (!result || typeof result !== 'object') {\n      return result;\n    }\n\n    // Remove sensitive data from result\n    const sanitized = { ...result };\n    const sensitiveFields = ['password', 'token', 'secret', 'key', 'apiKey'];\n\n    sensitiveFields.forEach((field) => {\n      if (field in sanitized) {\n        sanitized[field] = '[REDACTED]';\n      }\n    });\n\n    return sanitized;\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/jobs/services/job-queue.service.ts","messages":[{"ruleId":"sonarjs/no-duplicate-string","severity":2,"message":"Define a constant instead of duplicating this literal 4 times.","line":72,"column":64,"nodeType":"Literal","endLine":72,"endColumn":79},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":231,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":231,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6320,6323],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6320,6323],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":268,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":268,"endColumn":60}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Injectable, Logger } from '@nestjs/common';\nimport { Queue, Job } from 'bullmq';\nimport { BullMQConfigService } from '../config/bullmq-config.service';\nimport {\n  JobType,\n  JobPriority,\n  JobOptions,\n  AllJobData,\n  DataValidationJobData,\n  ReportGenerationJobData,\n  EmailNotificationJobData,\n} from '../types/job.types';\n\n/**\n * Job Queue Service\n *\n * Centralized service for managing job queues and dispatching background jobs\n * in the WellFlow oil & gas production management system.\n *\n * Features:\n * - Type-safe job dispatching\n * - Centralized queue management\n * - Job monitoring and metrics\n * - Error handling and retry logic\n */\n@Injectable()\nexport class JobQueueService {\n  private readonly logger = new Logger(JobQueueService.name);\n\n  constructor(private readonly bullMQConfig: BullMQConfigService) {}\n\n  /**\n   * Add a data validation job to the queue\n   */\n  async addDataValidationJob(\n    jobName: string,\n    data: DataValidationJobData,\n    options?: JobOptions,\n  ): Promise<Job<DataValidationJobData>> {\n    const queue = this.getQueue(JobType.DATA_VALIDATION);\n\n    const job = await queue.add(jobName, data, {\n      priority: options?.priority || JobPriority.NORMAL,\n      delay: options?.delay,\n      attempts: options?.attempts,\n      backoff: options?.backoff,\n      removeOnComplete: options?.removeOnComplete,\n      removeOnFail: options?.removeOnFail,\n      repeat: options?.repeat,\n    });\n\n    this.logger.log(\n      `Data validation job '${jobName}' added with ID: ${job.id}`,\n    );\n    return job;\n  }\n\n  /**\n   * Enqueue a data validation job (alias for addDataValidationJob)\n   */\n  async enqueueDataValidation(\n    data: DataValidationJobData,\n    options?: JobOptions,\n  ): Promise<Job<DataValidationJobData>> {\n    try {\n      return await this.addDataValidationJob(\n        'lease-data-validation',\n        data,\n        options,\n      );\n    } catch (error) {\n      const message = error instanceof Error ? error.message : 'Unknown error';\n      throw new Error(`Failed to enqueue data validation job: ${message}`);\n    }\n  }\n\n  /**\n   * Add a report generation job to the queue\n   */\n  async addReportGenerationJob(\n    jobName: string,\n    data: ReportGenerationJobData,\n    options?: JobOptions,\n  ): Promise<Job<ReportGenerationJobData>> {\n    const queue = this.getQueue(JobType.REPORT_GENERATION);\n\n    const job = await queue.add(jobName, data, {\n      priority: options?.priority || JobPriority.NORMAL,\n      delay: options?.delay,\n      attempts: options?.attempts,\n      backoff: options?.backoff,\n      removeOnComplete: options?.removeOnComplete,\n      removeOnFail: options?.removeOnFail,\n      repeat: options?.repeat,\n    });\n\n    this.logger.log(\n      `Report generation job '${jobName}' added with ID: ${job.id}`,\n    );\n    return job;\n  }\n\n  /**\n   * Enqueue a report generation job (alias for addReportGenerationJob)\n   */\n  async enqueueReportGeneration(\n    data: ReportGenerationJobData,\n    options?: JobOptions,\n  ): Promise<Job<ReportGenerationJobData>> {\n    try {\n      return await this.addReportGenerationJob(\n        'compliance-report',\n        data,\n        options,\n      );\n    } catch (error) {\n      const message = error instanceof Error ? error.message : 'Unknown error';\n      if (message.includes('not found')) {\n        throw new Error('Report generation queue not found');\n      }\n      throw new Error(`Failed to enqueue report generation job: ${message}`);\n    }\n  }\n\n  /**\n   * Add an email notification job to the queue\n   */\n  async addEmailNotificationJob(\n    jobName: string,\n    data: EmailNotificationJobData,\n    options?: JobOptions,\n  ): Promise<Job<EmailNotificationJobData>> {\n    const queue = this.getQueue(JobType.EMAIL_NOTIFICATION);\n\n    const job = await queue.add(jobName, data, {\n      priority: options?.priority || JobPriority.HIGH, // Email notifications are typically high priority\n      delay: options?.delay,\n      attempts: options?.attempts || 5, // More retries for email\n      backoff: options?.backoff || { type: 'exponential', delay: 1000 },\n      removeOnComplete: options?.removeOnComplete,\n      removeOnFail: options?.removeOnFail,\n      repeat: options?.repeat,\n    });\n\n    this.logger.log(\n      `Email notification job '${jobName}' added with ID: ${job.id}`,\n    );\n    return job;\n  }\n\n  /**\n   * Enqueue an email notification job (alias for addEmailNotificationJob)\n   */\n  async enqueueEmailNotification(\n    data: EmailNotificationJobData,\n    options?: JobOptions,\n  ): Promise<Job<EmailNotificationJobData>> {\n    try {\n      return await this.addEmailNotificationJob(\n        'system-notification',\n        data,\n        options,\n      );\n    } catch (error) {\n      const message = error instanceof Error ? error.message : 'Unknown error';\n      throw new Error(`Failed to enqueue email notification job: ${message}`);\n    }\n  }\n\n  /**\n   * Schedule a recurring job\n   */\n  async scheduleRecurringJob(\n    queueType: JobType,\n    jobName: string,\n    data: AllJobData,\n    cronPattern: string,\n    options?: Omit<JobOptions, 'repeat'>,\n  ): Promise<Job<AllJobData>> {\n    const queue = this.getQueue(queueType);\n\n    const job = await queue.add(jobName, data, {\n      ...options,\n      repeat: {\n        pattern: cronPattern,\n      },\n    });\n\n    this.logger.log(\n      `Recurring job '${jobName}' scheduled with pattern: ${cronPattern}`,\n    );\n    return job;\n  }\n\n  /**\n   * Get job by ID\n   */\n  async getJob(queueType: JobType, jobId: string): Promise<Job | undefined> {\n    const queue = this.getQueue(queueType);\n    return await queue.getJob(jobId);\n  }\n\n  /**\n   * Get jobs by status\n   */\n  async getJobsByStatus(\n    queueType: JobType,\n    status: 'waiting' | 'active' | 'completed' | 'failed' | 'delayed',\n    start = 0,\n    end = 10,\n  ): Promise<Job[]> {\n    const queue = this.getQueue(queueType);\n    return await queue.getJobs([status], start, end);\n  }\n\n  /**\n   * Get jobs from a queue (alias for getJobsByStatus)\n   */\n  async getJobs(\n    queueType: JobType,\n    status: 'waiting' | 'active' | 'completed' | 'failed' | 'delayed',\n    start = 0,\n    end = 10,\n  ): Promise<Job[]> {\n    return await this.getJobsByStatus(queueType, status, start, end);\n  }\n\n  /**\n   * Get queue statistics\n   */\n  async getQueueStats(queueType?: JobType): Promise<any> {\n    if (queueType) {\n      // Single queue stats\n      const queue = this.getQueue(queueType);\n\n      const [waiting, active, completed, failed, delayed] = await Promise.all([\n        queue.getWaiting(),\n        queue.getActive(),\n        queue.getCompleted(),\n        queue.getFailed(),\n        queue.getDelayed(),\n      ]);\n\n      return {\n        waiting: waiting.length,\n        active: active.length,\n        completed: completed.length,\n        failed: failed.length,\n        delayed: delayed.length,\n        total:\n          waiting.length +\n          active.length +\n          completed.length +\n          failed.length +\n          delayed.length,\n      };\n    } else {\n      // All queues stats\n      const queueTypes = [\n        JobType.DATA_VALIDATION,\n        JobType.REPORT_GENERATION,\n        JobType.EMAIL_NOTIFICATION,\n      ];\n      const stats = [];\n\n      for (const type of queueTypes) {\n        try {\n          const queueStats = await this.getQueueStats(type);\n          stats.push({\n            queueName: type,\n            ...queueStats,\n          });\n        } catch (error) {\n          const errorMessage =\n            error instanceof Error ? error.message : 'Unknown error';\n          this.logger.warn(\n            `Failed to get stats for queue ${type}: ${errorMessage}`,\n          );\n          // Return partial stats for failed queue\n          stats.push({\n            queueName: type,\n            waiting: 0,\n            active: 0,\n            completed: 0,\n            failed: 0,\n            delayed: 0,\n            total: 0,\n            error: errorMessage,\n          });\n        }\n      }\n\n      return stats;\n    }\n  }\n\n  /**\n   * Pause a queue\n   */\n  async pauseQueue(queueType: JobType): Promise<void> {\n    const queue = this.getQueue(queueType);\n    await queue.pause();\n    this.logger.log(`Queue '${queueType}' paused`);\n  }\n\n  /**\n   * Resume a queue\n   */\n  async resumeQueue(queueType: JobType): Promise<void> {\n    const queue = this.getQueue(queueType);\n    await queue.resume();\n    this.logger.log(`Queue '${queueType}' resumed`);\n  }\n\n  /**\n   * Clean completed jobs\n   */\n  async cleanQueue(\n    queueType: JobType,\n    status: 'completed' | 'failed' | 'active' | 'waiting',\n    grace: number = 24 * 60 * 60 * 1000, // 24 hours\n    limit: number = 100,\n  ): Promise<string[]> {\n    const queue = this.getQueue(queueType);\n    const result = await queue.clean(grace, limit, status);\n    this.logger.log(\n      `Queue '${queueType}' cleaned: ${result.length} ${status} jobs removed`,\n    );\n    return result;\n  }\n\n  /**\n   * Remove a specific job\n   */\n  async removeJob(queueType: JobType, jobId: string): Promise<void> {\n    const job = await this.getJob(queueType, jobId);\n    if (job) {\n      await job.remove();\n      this.logger.log(`Job ${jobId} removed from queue '${queueType}'`);\n    }\n  }\n\n  /**\n   * Retry a failed job\n   */\n  async retryJob(queueType: JobType, jobId: string): Promise<void> {\n    const job = await this.getJob(queueType, jobId);\n    if (job) {\n      await job.retry();\n      this.logger.log(`Job ${jobId} retried in queue '${queueType}'`);\n    }\n  }\n\n  /**\n   * Get all queue names\n   */\n  getQueueNames(): string[] {\n    return this.bullMQConfig.getQueueNames();\n  }\n\n  /**\n   * Get all queues for monitoring\n   */\n  getAllQueues(): Queue[] {\n    return this.bullMQConfig.getAllQueues();\n  }\n\n  /**\n   * Private helper to get queue by type\n   */\n  private getQueue(queueType: JobType): Queue {\n    const queue = this.bullMQConfig.getQueue(queueType);\n    if (!queue) {\n      throw new Error(`Queue ${queueType} not found`);\n    }\n    return queue;\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/jobs/services/job-scheduler.service.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":16,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[343,346],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[343,346],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":37,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":37,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[945,948],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[945,948],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async method 'initializeSchedulers' has no 'await' expression.","line":59,"column":3,"nodeType":"FunctionExpression","messageId":"missingAwait","endLine":59,"endColumn":37,"suggestions":[{"messageId":"removeAsync","fix":{"range":[1513,1556],"text":"initializeSchedulers(): void"},"desc":"Remove 'async'."}]},{"ruleId":"sonarjs/no-duplicate-string","severity":2,"message":"Define a constant instead of duplicating this literal 6 times.","line":76,"column":17,"nodeType":"Literal","endLine":76,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":78,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":85,"endColumn":15},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":85,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":85,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2483,2486],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2483,2486],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":96,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":104,"endColumn":15},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":104,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":104,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3087,3090],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3087,3090],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":114,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":122,"endColumn":15},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":122,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":122,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3698,3701],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3698,3701],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":132,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":141,"endColumn":15},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":141,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":141,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4390,4393],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4390,4393],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":151,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":159,"endColumn":15},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":159,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":159,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4956,4959],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4956,4959],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":169,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":178,"endColumn":15},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":178,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":178,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5632,5635],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5632,5635],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":318,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":318,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9424,9427],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9424,9427],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .validationType on an `any` value.","line":319,"column":17,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":319,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .retentionDays on an `any` value.","line":319,"column":43,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":319,"endColumn":56},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .reportType on an `any` value.","line":321,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":321,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .format on an `any` value.","line":321,"column":46,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":321,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .notificationType on an `any` value.","line":323,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":323,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .recipients on an `any` value.","line":323,"column":52,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":323,"endColumn":62},{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async method 'getSchedulerStats' has no 'await' expression.","line":334,"column":3,"nodeType":"FunctionExpression","messageId":"missingAwait","endLine":334,"endColumn":26,"suggestions":[{"messageId":"removeAsync","fix":{"range":[9846,9885],"text":"getSchedulerStats(): any"},"desc":"Remove 'async'."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":334,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":334,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9881,9884],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9881,9884],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":335,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":335,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9905,9908],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9905,9908],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":350,"column":7,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":350,"endColumn":77},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":350,"column":7,"nodeType":"MemberExpression","endLine":350,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .jobsByQueue on an `any` value.","line":350,"column":13,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":350,"endColumn":24},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":350,"column":39,"nodeType":"MemberExpression","endLine":350,"endColumn":67},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .jobsByQueue on an `any` value.","line":350,"column":45,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":350,"endColumn":56},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":362,"column":15,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":362,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .close on an `any` value.","line":362,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":362,"endColumn":30}],"suppressedMessages":[],"errorCount":33,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  Injectable,\n  Logger,\n  OnModuleInit,\n  OnModuleDestroy,\n} from '@nestjs/common';\n\nimport { BullMQConfigService } from '../config/bullmq-config.service';\nimport { JobQueueService } from './job-queue.service';\n\nexport interface ScheduledJobConfig {\n  name: string;\n  cron: string;\n  enabled: boolean;\n  timezone?: string;\n  jobData: any;\n  description: string;\n}\n\n/**\n * Job Scheduler Service\n *\n * Manages scheduled and recurring jobs for the WellFlow system.\n * Handles cron-based scheduling for regular maintenance tasks,\n * compliance reporting, and automated notifications.\n *\n * Features:\n * - Cron-based job scheduling\n * - Timezone support\n * - Dynamic schedule management\n * - Job deduplication\n * - Schedule monitoring and logging\n */\n@Injectable()\nexport class JobSchedulerService implements OnModuleInit, OnModuleDestroy {\n  private readonly logger = new Logger(JobSchedulerService.name);\n  private schedulers: Map<string, any> = new Map();\n  private scheduledJobs: Map<string, ScheduledJobConfig> = new Map();\n\n  constructor(\n    private readonly bullMQConfig: BullMQConfigService,\n    private readonly jobQueue: JobQueueService,\n  ) {}\n\n  async onModuleInit() {\n    await this.initializeSchedulers();\n    await this.setupDefaultSchedules();\n    this.logger.log('Job Scheduler Service initialized');\n  }\n\n  async onModuleDestroy() {\n    await this.cleanup();\n    this.logger.log('Job Scheduler Service destroyed');\n  }\n\n  /**\n   * Initialize queue schedulers for each queue\n   */\n  private async initializeSchedulers(): Promise<void> {\n    // BullMQ v5+ doesn't require separate QueueScheduler instances\n    // Scheduling is handled directly by the Queue instances\n    this.logger.log(\n      'Queue schedulers initialized (handled by Queue instances)',\n    );\n  }\n\n  /**\n   * Setup default scheduled jobs for WellFlow\n   */\n  private async setupDefaultSchedules(): Promise<void> {\n    // Daily production data validation at 2 AM\n    await this.scheduleJob({\n      name: 'daily-production-validation',\n      cron: '0 2 * * *', // Every day at 2 AM\n      enabled: true,\n      timezone: 'America/Chicago', // Central Time for oil & gas operations\n      description: 'Daily validation of production data for compliance',\n      jobData: {\n        leaseId: 'scheduled-validation',\n        organizationId: 'system',\n        timestamp: new Date(),\n        validationType: 'daily_production',\n        includeHistorical: false,\n        notifyOnFailure: true,\n      } as any,\n    });\n\n    // Weekly compliance report generation on Sundays at 6 AM\n    await this.scheduleJob({\n      name: 'weekly-compliance-report',\n      cron: '0 6 * * 0', // Every Sunday at 6 AM\n      enabled: true,\n      timezone: 'America/Chicago',\n      description:\n        'Weekly compliance report generation for regulatory submission',\n      jobData: {\n        organizationId: 'system',\n        reportType: 'compliance_weekly',\n        includeCharts: true,\n        format: 'pdf',\n        recipients: ['compliance@wellflow.com'],\n        autoSubmit: false,\n        timestamp: new Date(),\n      } as any,\n    });\n\n    // Monthly production summary on the 1st at 8 AM\n    await this.scheduleJob({\n      name: 'monthly-production-summary',\n      cron: '0 8 1 * *', // 1st of every month at 8 AM\n      enabled: true,\n      timezone: 'America/Chicago',\n      description: 'Monthly production summary report for stakeholders',\n      jobData: {\n        organizationId: 'system',\n        reportType: 'production_monthly',\n        includeCharts: true,\n        format: 'pdf',\n        recipients: ['management@wellflow.com', 'operations@wellflow.com'],\n        autoSubmit: true,\n        timestamp: new Date(),\n      } as any,\n    });\n\n    // Daily permit expiration check at 9 AM\n    await this.scheduleJob({\n      name: 'permit-expiration-check',\n      cron: '0 9 * * *', // Every day at 9 AM\n      enabled: true,\n      timezone: 'America/Chicago',\n      description: 'Check for expiring permits and send notifications',\n      jobData: {\n        message: 'Permit expiration check',\n        recipientEmails: ['permits@wellflow.com', 'compliance@wellflow.com'],\n        priority: 'medium',\n        organizationId: 'system',\n        timestamp: new Date(),\n        notificationType: 'compliance_reminder',\n        reminderType: 'permit_renewal',\n        daysAhead: 30, // Notify 30 days before expiration\n      } as any,\n    });\n\n    // Weekly data cleanup on Saturdays at 11 PM\n    await this.scheduleJob({\n      name: 'weekly-data-cleanup',\n      cron: '0 23 * * 6', // Every Saturday at 11 PM\n      enabled: true,\n      timezone: 'America/Chicago',\n      description: 'Clean up old job data and temporary files',\n      jobData: {\n        leaseId: 'scheduled-cleanup',\n        organizationId: 'system',\n        timestamp: new Date(),\n        validationType: 'data_cleanup',\n        retentionDays: 90,\n        includeJobHistory: true,\n        notifyOnCompletion: false,\n      } as any,\n    });\n\n    // Quarterly regulatory filing reminder\n    await this.scheduleJob({\n      name: 'quarterly-filing-reminder',\n      cron: '0 10 1 1,4,7,10 *', // 1st day of quarters at 10 AM\n      enabled: true,\n      timezone: 'America/Chicago',\n      description: 'Quarterly regulatory filing reminder',\n      jobData: {\n        message: 'Quarterly regulatory filing reminder',\n        recipientEmails: ['compliance@wellflow.com', 'legal@wellflow.com'],\n        priority: 'high',\n        organizationId: 'system',\n        timestamp: new Date(),\n        notificationType: 'compliance_reminder',\n        reminderType: 'quarterly_filing',\n        urgency: 'high',\n      } as any,\n    });\n\n    this.logger.log(`Setup ${this.scheduledJobs.size} default scheduled jobs`);\n  }\n\n  /**\n   * Schedule a new job with cron pattern\n   */\n  async scheduleJob(config: ScheduledJobConfig): Promise<void> {\n    if (!config.enabled) {\n      this.logger.log(`Skipping disabled scheduled job: ${config.name}`);\n      return;\n    }\n\n    try {\n      // Store the job configuration\n      this.scheduledJobs.set(config.name, config);\n\n      // Determine which queue to use based on job data\n      const queueName = this.determineQueueForJob(config.jobData);\n      const queue = this.bullMQConfig.getQueue(queueName);\n\n      if (!queue) {\n        throw new Error(`Queue not found: ${queueName}`);\n      }\n\n      // Add repeatable job\n      await queue.add(config.name, config.jobData, {\n        repeat: {\n          pattern: config.cron,\n          tz: config.timezone || 'UTC',\n        },\n        // Prevent duplicate jobs\n        jobId: `scheduled-${config.name}`,\n        // Remove completed jobs after 24 hours\n        removeOnComplete: 24,\n        removeOnFail: 10,\n      });\n\n      this.logger.log(\n        `Scheduled job '${config.name}' with pattern '${config.cron}' in timezone '${config.timezone || 'UTC'}'`,\n      );\n    } catch (error) {\n      this.logger.error(`Failed to schedule job '${config.name}':`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Remove a scheduled job\n   */\n  async unscheduleJob(jobName: string): Promise<void> {\n    try {\n      const config = this.scheduledJobs.get(jobName);\n      if (!config) {\n        this.logger.warn(`Scheduled job not found: ${jobName}`);\n        return;\n      }\n\n      const queueName = this.determineQueueForJob(config.jobData);\n      const queue = this.bullMQConfig.getQueue(queueName);\n\n      if (queue) {\n        await queue.removeRepeatable(jobName, {\n          pattern: config.cron,\n          tz: config.timezone || 'UTC',\n        });\n      }\n\n      this.scheduledJobs.delete(jobName);\n      this.logger.log(`Unscheduled job: ${jobName}`);\n    } catch (error) {\n      this.logger.error(`Failed to unschedule job '${jobName}':`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Update a scheduled job\n   */\n  async updateScheduledJob(\n    jobName: string,\n    config: Partial<ScheduledJobConfig>,\n  ): Promise<void> {\n    const existingConfig = this.scheduledJobs.get(jobName);\n    if (!existingConfig) {\n      throw new Error(`Scheduled job not found: ${jobName}`);\n    }\n\n    // Remove existing job\n    await this.unscheduleJob(jobName);\n\n    // Add updated job\n    const updatedConfig = { ...existingConfig, ...config };\n    await this.scheduleJob(updatedConfig);\n\n    this.logger.log(`Updated scheduled job: ${jobName}`);\n  }\n\n  /**\n   * Get all scheduled jobs\n   */\n  getScheduledJobs(): ScheduledJobConfig[] {\n    return Array.from(this.scheduledJobs.values());\n  }\n\n  /**\n   * Get scheduled job by name\n   */\n  getScheduledJob(jobName: string): ScheduledJobConfig | undefined {\n    return this.scheduledJobs.get(jobName);\n  }\n\n  /**\n   * Enable or disable a scheduled job\n   */\n  async toggleScheduledJob(jobName: string, enabled: boolean): Promise<void> {\n    const config = this.scheduledJobs.get(jobName);\n    if (!config) {\n      throw new Error(`Scheduled job not found: ${jobName}`);\n    }\n\n    if (enabled && !config.enabled) {\n      // Enable the job\n      await this.scheduleJob({ ...config, enabled: true });\n    } else if (!enabled && config.enabled) {\n      // Disable the job\n      await this.unscheduleJob(jobName);\n      this.scheduledJobs.set(jobName, { ...config, enabled: false });\n    }\n\n    this.logger.log(\n      `${enabled ? 'Enabled' : 'Disabled'} scheduled job: ${jobName}`,\n    );\n  }\n\n  /**\n   * Determine which queue to use based on job data\n   */\n  private determineQueueForJob(jobData: any): string {\n    if (jobData.validationType || jobData.retentionDays) {\n      return 'data-validation';\n    } else if (jobData.reportType || jobData.format) {\n      return 'report-generation';\n    } else if (jobData.notificationType || jobData.recipients) {\n      return 'email-notifications';\n    }\n\n    // Default to data validation queue\n    return 'data-validation';\n  }\n\n  /**\n   * Get scheduler statistics\n   */\n  async getSchedulerStats(): Promise<any> {\n    const stats: any = {\n      totalSchedulers: this.schedulers.size,\n      totalScheduledJobs: this.scheduledJobs.size,\n      enabledJobs: Array.from(this.scheduledJobs.values()).filter(\n        (job) => job.enabled,\n      ).length,\n      disabledJobs: Array.from(this.scheduledJobs.values()).filter(\n        (job) => !job.enabled,\n      ).length,\n      jobsByQueue: {},\n    };\n\n    // Group jobs by queue\n    for (const config of this.scheduledJobs.values()) {\n      const queueName = this.determineQueueForJob(config.jobData);\n      stats.jobsByQueue[queueName] = (stats.jobsByQueue[queueName] || 0) + 1;\n    }\n\n    return stats;\n  }\n\n  /**\n   * Cleanup schedulers on module destroy\n   */\n  private async cleanup(): Promise<void> {\n    for (const [queueName, scheduler] of this.schedulers.entries()) {\n      try {\n        await scheduler.close();\n        this.logger.log(`Closed scheduler for queue: ${queueName}`);\n      } catch (error) {\n        this.logger.error(\n          `Error closing scheduler for queue ${queueName}:`,\n          error,\n        );\n      }\n    }\n\n    this.schedulers.clear();\n    this.scheduledJobs.clear();\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/jobs/types/job.types.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":154,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":154,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3814,3817],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3814,3817],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Job Types and Interfaces for WellFlow Background Processing\n *\n * Defines the data structures and types for all background jobs\n * in the oil & gas production management system.\n */\n\nexport enum JobType {\n  DATA_VALIDATION = 'data-validation',\n  REPORT_GENERATION = 'report-generation',\n  EMAIL_NOTIFICATION = 'email-notifications',\n}\n\nexport enum JobPriority {\n  LOW = 1,\n  NORMAL = 5,\n  HIGH = 10,\n  CRITICAL = 15,\n}\n\n// String to JobPriority mapping for convenience\nexport const JobPriorityMap = {\n  low: JobPriority.LOW,\n  normal: JobPriority.NORMAL,\n  medium: JobPriority.NORMAL, // Alias\n  high: JobPriority.HIGH,\n  critical: JobPriority.CRITICAL,\n} as const;\n\nexport type JobPriorityString = keyof typeof JobPriorityMap;\n\nexport enum JobStatus {\n  WAITING = 'waiting',\n  ACTIVE = 'active',\n  COMPLETED = 'completed',\n  FAILED = 'failed',\n  DELAYED = 'delayed',\n  PAUSED = 'paused',\n}\n\n// Base job data interface\nexport interface BaseJobData {\n  organizationId: string;\n  userId?: string;\n  timestamp: Date;\n  metadata?: Record<string, unknown>;\n}\n\n// Data Validation Job Types\nexport interface ProductionDataValidationJobData extends BaseJobData {\n  wellId: string;\n  productionRecordId: string;\n  validationRules: string[];\n  validationType?: 'daily_production' | 'monthly_summary' | 'annual_report';\n  includeQualityChecks?: boolean;\n  validateAgainstTargets?: boolean;\n}\n\nexport interface WellDataValidationJobData extends BaseJobData {\n  wellId: string;\n  validationType:\n    | 'integrity'\n    | 'compliance'\n    | 'performance'\n    | 'equipment_status';\n  includeMetrics?: boolean;\n  alertOnAnomalies?: boolean;\n}\n\nexport interface LeaseDataValidationJobData extends BaseJobData {\n  leaseId: string;\n  validationType: 'ownership' | 'revenue' | 'compliance' | 'production_data';\n  includeHistorical?: boolean;\n  notifyOnFailure?: boolean;\n}\n\n// Report Generation Job Types\nexport interface FormPRReportJobData extends BaseJobData {\n  wellIds: string[];\n  reportPeriod: {\n    startDate: Date;\n    endDate: Date;\n  };\n  reportFormat: 'pdf' | 'excel' | 'csv';\n  deliveryMethod: 'email' | 'download' | 'api';\n}\n\nexport interface JIBStatementJobData extends BaseJobData {\n  leaseId: string;\n  statementPeriod: {\n    startDate: Date;\n    endDate: Date;\n  };\n  includeDetails: boolean;\n  recipientEmails: string[];\n}\n\nexport interface ProductionSummaryJobData extends BaseJobData {\n  wellIds?: string[];\n  leaseIds?: string[];\n  reportPeriod: {\n    startDate: Date;\n    endDate: Date;\n  };\n  aggregationType: 'daily' | 'monthly' | 'quarterly' | 'annual';\n}\n\nexport interface ComplianceReportJobData extends BaseJobData {\n  reportType:\n    | 'monthly_compliance'\n    | 'quarterly_compliance'\n    | 'annual_compliance';\n  dateRange: {\n    startDate: Date;\n    endDate: Date;\n  };\n  includeCharts?: boolean;\n  format: 'pdf' | 'excel' | 'csv';\n  recipients: string[];\n  autoSubmit?: boolean;\n}\n\n// Email Notification Job Types\nexport interface ComplianceReminderJobData extends BaseJobData {\n  reminderType:\n    | 'form_pr_due'\n    | 'jib_statement_due'\n    | 'permit_renewal'\n    | 'inspection_due';\n  dueDate: Date;\n  recipientEmails: string[];\n  wellIds?: string[];\n  leaseIds?: string[];\n}\n\nexport interface ProductionAlertJobData extends BaseJobData {\n  alertType: 'low_production' | 'equipment_failure' | 'anomaly_detected';\n  wellId: string;\n  alertData: {\n    currentValue: number;\n    expectedValue: number;\n    threshold: number;\n    severity: 'low' | 'medium' | 'high' | 'critical';\n  };\n  recipientEmails: string[];\n}\n\nexport interface SystemNotificationJobData extends BaseJobData {\n  notificationType?: 'system_maintenance' | 'data_backup' | 'security_alert';\n  message: string;\n  recipientEmails: string[];\n  priority: JobPriority | JobPriorityString;\n  templateId?: string;\n  templateData?: any;\n}\n\n// Union types for job data\nexport type DataValidationJobData =\n  | ProductionDataValidationJobData\n  | WellDataValidationJobData\n  | LeaseDataValidationJobData;\n\nexport type ReportGenerationJobData =\n  | FormPRReportJobData\n  | JIBStatementJobData\n  | ProductionSummaryJobData\n  | ComplianceReportJobData;\n\nexport type EmailNotificationJobData =\n  | ComplianceReminderJobData\n  | ProductionAlertJobData\n  | SystemNotificationJobData;\n\nexport type AllJobData =\n  | DataValidationJobData\n  | ReportGenerationJobData\n  | EmailNotificationJobData;\n\n// Job result interfaces\nexport interface JobResult {\n  success: boolean;\n  message: string;\n  data?: unknown;\n  errors?: string[];\n  processingTime?: number;\n}\n\nexport interface ValidationJobResult extends JobResult {\n  validationResults: {\n    passed: boolean;\n    errors: string[];\n    warnings: string[];\n    validatedFields: string[];\n  };\n}\n\nexport interface ReportJobResult extends JobResult {\n  reportId: string;\n  reportUrl?: string;\n  reportSize?: number;\n  generatedAt: Date;\n}\n\nexport interface NotificationJobResult extends JobResult {\n  sentTo: string[];\n  failedRecipients: string[];\n  messageId?: string;\n}\n\n// Job options interface\nexport interface JobOptions {\n  priority?: JobPriority;\n  delay?: number;\n  attempts?: number;\n  backoff?: {\n    type: 'fixed' | 'exponential';\n    delay: number;\n  };\n  removeOnComplete?: number;\n  removeOnFail?: number;\n  repeat?: {\n    pattern?: string; // cron pattern\n    every?: number; // milliseconds\n    limit?: number;\n  };\n}\n","usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/leases/leases.controller.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/leases/leases.controller.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/leases/leases.module.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/leases/leases.service.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/leases/leases.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/logrocket/logrocket.middleware.spec.ts","messages":[],"suppressedMessages":[{"ruleId":"sonarjs/no-hardcoded-ip","severity":2,"message":"Make sure using a hardcoded IP address 192.168.1.1 is safe here.","line":17,"column":28,"nodeType":"Literal","messageId":"checkIP","endLine":17,"endColumn":41,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"sonarjs/pseudo-random","severity":2,"message":"Make sure that using this pseudorandom number generator is safe here.","line":73,"column":41,"nodeType":"CallExpression","messageId":"safeGenerator","endLine":73,"endColumn":54,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"sonarjs/no-hardcoded-passwords","severity":2,"message":"Review this potentially hard-coded password.","line":138,"column":19,"nodeType":"Literal","messageId":"reviewPassword","endLine":138,"endColumn":30,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":387,"column":15,"nodeType":"MemberExpression","endLine":387,"endColumn":31,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":389,"column":13,"nodeType":"MemberExpression","endLine":389,"endColumn":29,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":418,"column":15,"nodeType":"MemberExpression","endLine":418,"endColumn":30,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":420,"column":13,"nodeType":"MemberExpression","endLine":420,"endColumn":28,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"sonarjs/no-hardcoded-passwords","severity":2,"message":"Review this potentially hard-coded password.","line":432,"column":19,"nodeType":"Literal","messageId":"reviewPassword","endLine":432,"endColumn":30,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/logrocket/logrocket.middleware.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/logrocket/logrocket.module.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/logrocket/logrocket.service.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/logrocket/logrocket.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/main.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/main.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/monitoring/monitoring.controller.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/monitoring/monitoring.controller.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/monitoring/monitoring.module.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/organizations/organizations.controller.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/organizations/organizations.controller.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/organizations/organizations.module.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/organizations/organizations.service.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/organizations/organizations.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/partners/partners.controller.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/partners/partners.controller.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/partners/partners.module.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/partners/partners.service.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/partners/partners.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/presentation/controllers/operators.controller.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/presentation/controllers/operators.controller.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/presentation/controllers/wells.controller.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/presentation/controllers/wells.controller.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/presentation/decorators/audit-log.decorator.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/presentation/decorators/audit-log.decorator.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/presentation/decorators/public.decorator.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/presentation/decorators/public.decorator.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/presentation/decorators/roles.decorator.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/presentation/decorators/roles.decorator.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/presentation/guards/jwt-auth.guard.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/presentation/guards/jwt-auth.guard.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/presentation/guards/roles.guard.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/presentation/guards/roles.guard.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/presentation/interceptors/audit-log.interceptor.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/presentation/interceptors/audit-log.interceptor.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/production/production.controller.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/production/production.controller.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/production/production.module.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/production/production.service.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/production/production.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/redis/redis.module.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/redis/redis.module.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/redis/redis.service.simple.spec.ts","messages":[],"suppressedMessages":[{"ruleId":"security/detect-object-injection","severity":2,"message":"Function Call Object Injection Sink","line":152,"column":11,"nodeType":"MemberExpression","endLine":152,"endColumn":66,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":155,"column":18,"nodeType":"MemberExpression","endLine":155,"endColumn":73,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Function Call Object Injection Sink","line":165,"column":11,"nodeType":"MemberExpression","endLine":165,"endColumn":66,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":168,"column":18,"nodeType":"MemberExpression","endLine":168,"endColumn":73,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/redis/redis.service.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/redis/redis.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/sentry/sentry.module.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/sentry/sentry.module.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/sentry/sentry.service.simple.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/sentry/sentry.service.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/sentry/sentry.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/simple-coverage-tests.spec.ts","messages":[],"suppressedMessages":[{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":227,"column":16,"nodeType":"MemberExpression","endLine":227,"endColumn":27,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":227,"column":31,"nodeType":"MemberExpression","endLine":227,"endColumn":42,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":256,"column":16,"nodeType":"MemberExpression","endLine":256,"endColumn":32,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":272,"column":44,"nodeType":"MemberExpression","endLine":272,"endColumn":55,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/strategic-coverage-boost.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/test-utils/user-mock.helper.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/test-utils/well-mock.helper.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/test/setup.ts","messages":[{"ruleId":"sonarjs/pseudo-random","severity":2,"message":"Make sure that using this pseudorandom number generator is safe here.","line":64,"column":12,"nodeType":"CallExpression","messageId":"safeGenerator","endLine":64,"endColumn":25},{"ruleId":"sonarjs/pseudo-random","severity":2,"message":"Make sure that using this pseudorandom number generator is safe here.","line":72,"column":27,"nodeType":"CallExpression","messageId":"safeGenerator","endLine":72,"endColumn":40},{"ruleId":"sonarjs/pseudo-random","severity":2,"message":"Make sure that using this pseudorandom number generator is safe here.","line":77,"column":29,"nodeType":"CallExpression","messageId":"safeGenerator","endLine":77,"endColumn":42},{"ruleId":"sonarjs/pseudo-random","severity":2,"message":"Make sure that using this pseudorandom number generator is safe here.","line":82,"column":27,"nodeType":"CallExpression","messageId":"safeGenerator","endLine":82,"endColumn":40}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Jest Test Setup\n *\n * Global test configuration and setup for the WellFlow API tests.\n * This file is executed before each test file.\n */\n\nimport { Logger } from '@nestjs/common';\n\n// Suppress console output during tests unless explicitly needed\nconst originalConsole = global.console;\n\nbeforeAll(() => {\n  // Mock console methods to reduce noise during tests\n  global.console = {\n    ...originalConsole,\n    log: jest.fn(),\n    error: jest.fn(),\n    warn: jest.fn(),\n    info: jest.fn(),\n    debug: jest.fn(),\n  };\n\n  // Mock NestJS Logger\n  jest.spyOn(Logger.prototype, 'log').mockImplementation();\n  jest.spyOn(Logger.prototype, 'error').mockImplementation();\n  jest.spyOn(Logger.prototype, 'warn').mockImplementation();\n  jest.spyOn(Logger.prototype, 'debug').mockImplementation();\n  jest.spyOn(Logger.prototype, 'verbose').mockImplementation();\n});\n\nafterAll(() => {\n  // Restore original console\n  global.console = originalConsole;\n});\n\n// Global test utilities\n(global as any).testUtils = {\n  /**\n   * Create a mock Date that returns a fixed timestamp\n   */\n  mockDate: (timestamp: string | number | Date) => {\n    const mockDate = new Date(timestamp);\n    jest.spyOn(global, 'Date').mockImplementation(() => mockDate as any);\n    return mockDate;\n  },\n\n  /**\n   * Restore the original Date implementation\n   */\n  restoreDate: () => {\n    jest.restoreAllMocks();\n  },\n\n  /**\n   * Wait for a specified number of milliseconds\n   */\n  sleep: (ms: number) => new Promise((resolve) => setTimeout(resolve, ms)),\n\n  /**\n   * Generate a random string for testing\n   */\n  randomString: (length: number = 10) => {\n    return Math.random()\n      .toString(36)\n      .substring(2, length + 2);\n  },\n\n  /**\n   * Generate a mock organization ID\n   */\n  mockOrgId: () => `org-${Math.random().toString(36).substring(2, 8)}`,\n\n  /**\n   * Generate a mock user ID\n   */\n  mockUserId: () => `user-${Math.random().toString(36).substring(2, 8)}`,\n\n  /**\n   * Generate a mock job ID\n   */\n  mockJobId: () => `job-${Math.random().toString(36).substring(2, 8)}`,\n};\n\n// Environment setup for tests\nprocess.env.NODE_ENV = 'test';\nprocess.env.JWT_SECRET = 'test-jwt-secret';\nprocess.env.REDIS_URL = 'redis://localhost:6379/1'; // Use test database\n\n// Increase timeout for integration tests\njest.setTimeout(30000);\n\n// Global error handler for unhandled promise rejections\nprocess.on('unhandledRejection', (reason, promise) => {\n  console.error('Unhandled Rejection at:', promise, 'reason:', reason);\n});\n\n// Global error handler for uncaught exceptions\nprocess.on('uncaughtException', (error) => {\n  console.error('Uncaught Exception:', error);\n});\n\n// Type declarations for global test utilities\ndeclare global {\n  var testUtils: {\n    mockDate: (timestamp: string | number | Date) => Date;\n    restoreDate: () => void;\n    sleep: (ms: number) => Promise<void>;\n    randomString: (length?: number) => string;\n    mockOrgId: () => string;\n    mockUserId: () => string;\n    mockJobId: () => string;\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/users/users.controller.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/users/users.controller.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/users/users.module.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/users/users.module.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/users/users.service.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/users/users.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/wells/wells.module.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jason/projects/wellflow/apps/api/src/wells/wells.module.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-process-env","replacedBy":["n/no-process-env"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":null,"replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-env","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"}}]}}]},{"filePath":"/Users/jason/projects/wellflow/apps/api/test/app.e2e-spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]
 ELIFECYCLE  Command failed with exit code 1.
