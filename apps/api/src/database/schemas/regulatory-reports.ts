import {
  pgTable,
  uuid,
  varchar,
  text,
  timestamp,
  date,
  decimal,
  boolean,
  jsonb,
  integer,
  index,
} from 'drizzle-orm/pg-core';
import { organizations } from './organizations';
import { wells } from './wells';
import { users } from './users';

/**
 * Regulatory Reports table - Comprehensive regulatory reporting with automated workflows
 * Tracks all regulatory reports, their generation, submission, and compliance status
 */
export const regulatoryReports = pgTable(
  'regulatory_reports',
  {
    id: uuid('id').primaryKey().defaultRandom(),
    organizationId: uuid('organization_id')
      .notNull()
      .references(() => organizations.id),
    wellId: uuid('well_id').references(() => wells.id),

    // Report identification
    reportType: varchar('report_type', { length: 50 }).notNull(), // production|environmental|hse|permit|waste
    // eslint-disable-next-line no-secrets/no-secrets
    reportSubType: varchar('report_sub_type', { length: 50 }), // form_pr|w3x|h10|spcc|tier2|etc
    regulatoryAgency: varchar('regulatory_agency', { length: 50 }).notNull(), // RRC|EPA|TCEQ|state_agency

    // Reporting period and deadlines
    reportingPeriod: varchar('reporting_period', { length: 20 }).notNull(), // monthly|quarterly|annual|semi-annual
    reportingPeriodStart: date('reporting_period_start').notNull(),
    reportingPeriodEnd: date('reporting_period_end').notNull(),
    dueDate: date('due_date').notNull(),
    gracePeriodEnd: date('grace_period_end'), // Date when late filing penalties begin

    // Report status and workflow
    status: varchar('status', { length: 30 }).notNull().default('draft'), // draft|generating|generated|reviewing|approved|submitted|accepted|rejected|overdue
    priority: varchar('priority', { length: 10 }).notNull().default('normal'), // low|normal|high|critical

    // Generation and submission tracking
    generatedAt: timestamp('generated_at'),
    generatedByUserId: uuid('generated_by_user_id').references(() => users.id),
    reviewedAt: timestamp('reviewed_at'),
    reviewedByUserId: uuid('reviewed_by_user_id').references(() => users.id),
    submittedAt: timestamp('submitted_at'),
    submittedByUserId: uuid('submitted_by_user_id').references(() => users.id),

    // External system integration
    externalSubmissionId: varchar('external_submission_id', { length: 100 }),
    confirmationNumber: varchar('confirmation_number', { length: 100 }),
    submissionMethod: varchar('submission_method', { length: 20 }).default(
      'electronic',
    ), // electronic|mail|fax|in_person

    // Report data and content
    reportData: jsonb('report_data'), // The actual report content/form data
    reportMetadata: jsonb('report_metadata'), // Additional metadata about the report
    attachments: jsonb('attachments'), // File attachments information

    // Validation and compliance
    validationStatus: varchar('validation_status', { length: 20 }).default(
      'pending',
    ), // pending|valid|invalid|warning
    validationErrors: jsonb('validation_errors'),
    complianceStatus: varchar('compliance_status', { length: 20 }).default(
      'unknown',
    ), // compliant|non_compliant|partial|unknown

    // Financial tracking (for fee-based reports)
    filingFee: decimal('filing_fee', { precision: 10, scale: 2 }),
    paymentStatus: varchar('payment_status', { length: 20 }).default(
      'not_required',
    ), // not_required|pending|paid|failed

    // Automation and scheduling
    isAutoGenerated: boolean('is_auto_generated').default(false).notNull(),
    autoSubmissionEnabled: boolean('auto_submission_enabled')
      .default(false)
      .notNull(),
    nextAutoGeneration: timestamp('next_auto_generation'),

    // Error handling and retries
    retryCount: integer('retry_count').default(0).notNull(),
    lastRetryAt: timestamp('last_retry_at'),
    maxRetries: integer('max_retries').default(3).notNull(),

    // Audit and tracking
    notes: text('notes'),
    createdAt: timestamp('created_at').defaultNow().notNull(),
    updatedAt: timestamp('updated_at').defaultNow().notNull(),

    // Associated entities (for linking to source data)
    permitId: uuid('permit_id'),
    incidentId: uuid('incident_id'),
    environmentalMonitoringId: uuid('environmental_monitoring_id'),
    wasteManagementId: uuid('waste_management_id'),
  },
  (table) => ({
    organizationIdx: index('regulatory_reports_organization_id_idx').on(
      table.organizationId,
    ),

    wellIdx: index('regulatory_reports_well_id_idx').on(table.wellId),

    reportTypeIdx: index('regulatory_reports_report_type_idx').on(
      table.reportType,
    ),

    regulatoryAgencyIdx: index('regulatory_reports_regulatory_agency_idx').on(
      table.regulatoryAgency,
    ),

    statusIdx: index('regulatory_reports_status_idx').on(table.status),

    dueDateIdx: index('regulatory_reports_due_date_idx').on(table.dueDate),

    reportingPeriodIdx: index('regulatory_reports_reporting_period_idx').on(
      table.reportingPeriodStart,
      table.reportingPeriodEnd,
    ),

    priorityIdx: index('regulatory_reports_priority_idx').on(table.priority),

    validationStatusIdx: index('regulatory_reports_validation_status_idx').on(
      table.validationStatus,
    ),

    complianceStatusIdx: index('regulatory_reports_compliance_status_idx').on(
      table.complianceStatus,
    ),

    autoGenerationIdx: index('regulatory_reports_auto_generation_idx').on(
      table.nextAutoGeneration,
    ),

    permitIdIdx: index('regulatory_reports_permit_id_idx').on(table.permitId),

    incidentIdIdx: index('regulatory_reports_incident_id_idx').on(
      table.incidentId,
    ),

    environmentalMonitoringIdx: index(
      'regulatory_reports_environmental_monitoring_id_idx',
    ).on(table.environmentalMonitoringId),

    wasteManagementIdx: index('regulatory_reports_waste_management_id_idx').on(
      table.wasteManagementId,
    ),

    // Composite indexes for common queries
    orgReportTypeIdx: index('regulatory_reports_org_report_type_idx').on(
      table.organizationId,
      table.reportType,
      table.reportingPeriodStart,
    ),

    statusDueDateIdx: index('regulatory_reports_status_due_date_idx').on(
      table.status,
      table.dueDate,
    ),
  }),
);
