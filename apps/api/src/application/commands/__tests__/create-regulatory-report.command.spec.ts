import { CreateRegulatoryReportCommand } from '../create-regulatory-report.command';

describe('CreateRegulatoryReportCommand', () => {
  const validOrganizationId = 'org-123';
  const validReportType = 'monthly-production';
  const validRegulatoryAgency = 'EPA';
  const validReportingPeriod = '2024-Q1';
  const validReportingPeriodStart = new Date('2024-01-01');
  const validReportingPeriodEnd = new Date('2024-03-31');
  const validDueDate = new Date('2024-04-15');
  const validCreatedByUserId = 'user-456';
  const validWellId = 'well-789';
  const validReportSubType = 'production-summary';
  const validPriority = 'high';
  const validGracePeriodEnd = new Date('2024-04-30');
  const validIsAutoGenerated = true;
  const validAutoSubmissionEnabled = false;

  describe('constructor', () => {
    it('should create a command with required properties only', () => {
      const command = new CreateRegulatoryReportCommand(
        validOrganizationId,
        validReportType,
        validRegulatoryAgency,
        validReportingPeriod,
        validReportingPeriodStart,
        validReportingPeriodEnd,
        validDueDate,
        validCreatedByUserId,
      );

      expect(command.organizationId).toBe(validOrganizationId);
      expect(command.reportType).toBe(validReportType);
      expect(command.regulatoryAgency).toBe(validRegulatoryAgency);
      expect(command.reportingPeriod).toBe(validReportingPeriod);
      expect(command.reportingPeriodStart).toBe(validReportingPeriodStart);
      expect(command.reportingPeriodEnd).toBe(validReportingPeriodEnd);
      expect(command.dueDate).toBe(validDueDate);
      expect(command.createdByUserId).toBe(validCreatedByUserId);
      expect(command.wellId).toBeUndefined();
      expect(command.reportSubType).toBeUndefined();
      expect(command.priority).toBeUndefined();
      expect(command.gracePeriodEnd).toBeUndefined();
      expect(command.isAutoGenerated).toBeUndefined();
      expect(command.autoSubmissionEnabled).toBeUndefined();
    });

    it('should create a command with all properties', () => {
      const command = new CreateRegulatoryReportCommand(
        validOrganizationId,
        validReportType,
        validRegulatoryAgency,
        validReportingPeriod,
        validReportingPeriodStart,
        validReportingPeriodEnd,
        validDueDate,
        validCreatedByUserId,
        validWellId,
        validReportSubType,
        validPriority,
        validGracePeriodEnd,
        validIsAutoGenerated,
        validAutoSubmissionEnabled,
      );

      expect(command.organizationId).toBe(validOrganizationId);
      expect(command.reportType).toBe(validReportType);
      expect(command.regulatoryAgency).toBe(validRegulatoryAgency);
      expect(command.reportingPeriod).toBe(validReportingPeriod);
      expect(command.reportingPeriodStart).toBe(validReportingPeriodStart);
      expect(command.reportingPeriodEnd).toBe(validReportingPeriodEnd);
      expect(command.dueDate).toBe(validDueDate);
      expect(command.createdByUserId).toBe(validCreatedByUserId);
      expect(command.wellId).toBe(validWellId);
      expect(command.reportSubType).toBe(validReportSubType);
      expect(command.priority).toBe(validPriority);
      expect(command.gracePeriodEnd).toBe(validGracePeriodEnd);
      expect(command.isAutoGenerated).toBe(validIsAutoGenerated);
      expect(command.autoSubmissionEnabled).toBe(validAutoSubmissionEnabled);
    });

    it('should create a command with some optional properties', () => {
      const command = new CreateRegulatoryReportCommand(
        validOrganizationId,
        validReportType,
        validRegulatoryAgency,
        validReportingPeriod,
        validReportingPeriodStart,
        validReportingPeriodEnd,
        validDueDate,
        validCreatedByUserId,
        validWellId,
        undefined,
        validPriority,
        undefined,
        validIsAutoGenerated,
      );

      expect(command.organizationId).toBe(validOrganizationId);
      expect(command.wellId).toBe(validWellId);
      expect(command.reportSubType).toBeUndefined();
      expect(command.priority).toBe(validPriority);
      expect(command.gracePeriodEnd).toBeUndefined();
      expect(command.isAutoGenerated).toBe(validIsAutoGenerated);
      expect(command.autoSubmissionEnabled).toBeUndefined();
    });
  });

  describe('properties', () => {
    it('should have readonly properties', () => {
      const command = new CreateRegulatoryReportCommand(
        validOrganizationId,
        validReportType,
        validRegulatoryAgency,
        validReportingPeriod,
        validReportingPeriodStart,
        validReportingPeriodEnd,
        validDueDate,
        validCreatedByUserId,
        validWellId,
      );

      expect(command.organizationId).toBeDefined();
      expect(command.reportType).toBeDefined();
      expect(command.regulatoryAgency).toBeDefined();
      expect(command.reportingPeriod).toBeDefined();
      expect(command.reportingPeriodStart).toBeDefined();
      expect(command.reportingPeriodEnd).toBeDefined();
      expect(command.dueDate).toBeDefined();
      expect(command.createdByUserId).toBeDefined();
      expect(command.wellId).toBeDefined();
    });

    it('should maintain date object references', () => {
      const command = new CreateRegulatoryReportCommand(
        validOrganizationId,
        validReportType,
        validRegulatoryAgency,
        validReportingPeriod,
        validReportingPeriodStart,
        validReportingPeriodEnd,
        validDueDate,
        validCreatedByUserId,
        validWellId,
        validReportSubType,
        validPriority,
        validGracePeriodEnd,
      );

      expect(command.reportingPeriodStart).toBe(validReportingPeriodStart);
      expect(command.reportingPeriodEnd).toBe(validReportingPeriodEnd);
      expect(command.dueDate).toBe(validDueDate);
      expect(command.gracePeriodEnd).toBe(validGracePeriodEnd);
    });
  });

  describe('edge cases', () => {
    it('should handle empty strings for optional string properties', () => {
      const command = new CreateRegulatoryReportCommand(
        validOrganizationId,
        validReportType,
        validRegulatoryAgency,
        validReportingPeriod,
        validReportingPeriodStart,
        validReportingPeriodEnd,
        validDueDate,
        validCreatedByUserId,
        '',
        '',
        '',
      );

      expect(command.wellId).toBe('');
      expect(command.reportSubType).toBe('');
      expect(command.priority).toBe('');
    });

    it('should handle false values for boolean properties', () => {
      const command = new CreateRegulatoryReportCommand(
        validOrganizationId,
        validReportType,
        validRegulatoryAgency,
        validReportingPeriod,
        validReportingPeriodStart,
        validReportingPeriodEnd,
        validDueDate,
        validCreatedByUserId,
        undefined,
        undefined,
        undefined,
        undefined,
        false,
        false,
      );

      expect(command.isAutoGenerated).toBe(false);
      expect(command.autoSubmissionEnabled).toBe(false);
    });

    it('should handle undefined optional properties', () => {
      const command = new CreateRegulatoryReportCommand(
        validOrganizationId,
        validReportType,
        validRegulatoryAgency,
        validReportingPeriod,
        validReportingPeriodStart,
        validReportingPeriodEnd,
        validDueDate,
        validCreatedByUserId,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );

      expect(command.wellId).toBeUndefined();
      expect(command.reportSubType).toBeUndefined();
      expect(command.priority).toBeUndefined();
      expect(command.gracePeriodEnd).toBeUndefined();
      expect(command.isAutoGenerated).toBeUndefined();
      expect(command.autoSubmissionEnabled).toBeUndefined();
    });
  });

  describe('immutability', () => {
    it('should maintain consistent property values', () => {
      const command = new CreateRegulatoryReportCommand(
        validOrganizationId,
        validReportType,
        validRegulatoryAgency,
        validReportingPeriod,
        validReportingPeriodStart,
        validReportingPeriodEnd,
        validDueDate,
        validCreatedByUserId,
      );

      const orgId1 = command.organizationId;
      const orgId2 = command.organizationId;
      const startDate1 = command.reportingPeriodStart;
      const startDate2 = command.reportingPeriodStart;

      expect(orgId1).toBe(orgId2);
      expect(startDate1).toBe(startDate2);
    });
  });
});
