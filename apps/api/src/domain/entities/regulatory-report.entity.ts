import { AggregateRoot } from '../shared/aggregate-root';
import { ReportStatus } from '../value-objects/report-status.vo';
import { ReportType } from '../value-objects/report-type.vo';
import { ReportGeneratedEvent } from '../events/report-generated.event';
import { ReportSubmittedEvent } from '../events/report-submitted.event';
import { ReportOverdueEvent } from '../events/report-overdue.event';

/**
 * Regulatory Report Aggregate Root
 * Manages the complete lifecycle of regulatory reports with automated workflows
 */
export class RegulatoryReport extends AggregateRoot {
  private _organizationId: string;
  private _wellId?: string;
  private _reportType: ReportType;
  private _reportSubType?: string;
  private _regulatoryAgency: string;

  // Reporting period and deadlines
  private _reportingPeriod: string;
  private _reportingPeriodStart: Date;
  private _reportingPeriodEnd: Date;
  private _dueDate: Date;
  private _gracePeriodEnd?: Date;

  // Status and workflow
  private _status: ReportStatus;
  private _priority: string;

  // User tracking
  private _generatedByUserId?: string;
  private _reviewedByUserId?: string;
  private _submittedByUserId?: string;

  // Timestamps
  private _generatedAt?: Date;
  private _reviewedAt?: Date;
  private _submittedAt?: Date;

  // External system integration
  private _externalSubmissionId?: string;
  private _confirmationNumber?: string;
  private _submissionMethod: string;

  // Report content
  private _reportData?: Record<string, unknown>;
  private _reportMetadata?: Record<string, unknown>;
  private _attachments?: Record<string, unknown>[];

  // Validation and compliance
  private _validationStatus: string;
  private _validationErrors?: Record<string, unknown>[];
  private _complianceStatus: string;

  // Financial tracking
  private _filingFee?: number;
  private _paymentStatus: string;

  // Automation
  private _isAutoGenerated: boolean;
  private _autoSubmissionEnabled: boolean;
  private _nextAutoGeneration?: Date;

  // Error handling
  private _retryCount: number;
  private _lastRetryAt?: Date;
  private _maxRetries: number;

  // Associated entities
  private _permitId?: string;
  private _incidentId?: string;
  private _environmentalMonitoringId?: string;
  private _wasteManagementId?: string;

  // Audit fields
  private _notes?: string;
  private _createdAt: Date;
  private _updatedAt: Date;

  private _id: string;

  constructor(
    id: string,
    organizationId: string,
    reportType: ReportType,
    regulatoryAgency: string,
    reportingPeriod: string,
    reportingPeriodStart: Date,
    reportingPeriodEnd: Date,
    dueDate: Date,
  ) {
    super();
    this._id = id;
    this._organizationId = organizationId;
    this._reportType = reportType;
    this._regulatoryAgency = regulatoryAgency;
    this._reportingPeriod = reportingPeriod;
    this._reportingPeriodStart = reportingPeriodStart;
    this._reportingPeriodEnd = reportingPeriodEnd;
    this._dueDate = dueDate;
    this._status = ReportStatus.DRAFT;
    this._priority = 'normal';
    this._submissionMethod = 'electronic';
    this._validationStatus = 'pending';
    this._complianceStatus = 'unknown';
    this._paymentStatus = 'not_required';
    this._isAutoGenerated = false;
    this._autoSubmissionEnabled = false;
    this._retryCount = 0;
    this._maxRetries = 3;
    this._createdAt = new Date();
    this._updatedAt = new Date();
  }

  // Factory method for creating new reports
  public static create(
    organizationId: string,
    reportType: ReportType,
    regulatoryAgency: string,
    reportingPeriod: string,
    reportingPeriodStart: Date,
    reportingPeriodEnd: Date,
    dueDate: Date,
    options?: {
      wellId?: string;
      reportSubType?: string;
      priority?: string;
      gracePeriodEnd?: Date;
      isAutoGenerated?: boolean;
      autoSubmissionEnabled?: boolean;
    },
  ): RegulatoryReport {
    const report = new RegulatoryReport(
      crypto.randomUUID(),
      organizationId,
      reportType,
      regulatoryAgency,
      reportingPeriod,
      reportingPeriodStart,
      reportingPeriodEnd,
      dueDate,
    );

    // Apply optional settings
    if (options?.wellId) {
      report._wellId = options.wellId;
    }

    if (options?.reportSubType) {
      report._reportSubType = options.reportSubType;
    }

    if (options?.priority) {
      report._priority = options.priority;
    }

    if (options?.gracePeriodEnd) {
      report._gracePeriodEnd = options.gracePeriodEnd;
    }

    if (options?.isAutoGenerated !== undefined) {
      report._isAutoGenerated = options.isAutoGenerated;
    }

    if (options?.autoSubmissionEnabled !== undefined) {
      report._autoSubmissionEnabled = options.autoSubmissionEnabled;
    }

    return report;
  }

  // Business methods
  public generateReport(
    reportData: Record<string, unknown>,
    generatedByUserId: string,
    metadata?: Record<string, unknown>,
  ): void {
    if (!this._status.canTransitionTo(ReportStatus.GENERATING)) {
      throw new Error(
        `Cannot generate report in status: ${this._status.value}`,
      );
    }

    this._status = ReportStatus.GENERATING;
    this._generatedAt = new Date();
    this._generatedByUserId = generatedByUserId;
    this._reportData = reportData;
    this._reportMetadata = metadata;
    this._updatedAt = new Date();

    // Raise domain event
    this.addDomainEvent(
      new ReportGeneratedEvent(
        this.id,
        this._reportType.value,
        this._regulatoryAgency,
        reportData,
      ),
    );
  }

  public markAsGenerated(): void {
    if (!this._status.canTransitionTo(ReportStatus.GENERATED)) {
      throw new Error(
        `Cannot mark report as generated in status: ${this._status.value}`,
      );
    }

    this._status = ReportStatus.GENERATED;
    this._updatedAt = new Date();
  }

  public submitForReview(reviewedByUserId: string): void {
    if (!this._status.canTransitionTo(ReportStatus.REVIEWING)) {
      throw new Error(
        `Cannot submit for review in status: ${this._status.value}`,
      );
    }

    this._status = ReportStatus.REVIEWING;
    this._reviewedByUserId = reviewedByUserId;
    this._reviewedAt = new Date();
    this._updatedAt = new Date();
  }

  public approveReport(): void {
    if (!this._status.canTransitionTo(ReportStatus.APPROVED)) {
      throw new Error(`Cannot approve report in status: ${this._status.value}`);
    }

    this._status = ReportStatus.APPROVED;
    this._updatedAt = new Date();
  }

  public rejectReport(validationErrors?: Record<string, unknown>[]): void {
    if (!this._status.canTransitionTo(ReportStatus.REJECTED)) {
      throw new Error(`Cannot reject report in status: ${this._status.value}`);
    }

    this._status = ReportStatus.REJECTED;
    this._validationStatus = 'invalid';
    this._validationErrors = validationErrors;
    this._updatedAt = new Date();
  }

  public submitReport(
    submittedByUserId: string,
    submissionMethod?: string,
    externalSubmissionId?: string,
  ): void {
    if (!this._status.canTransitionTo(ReportStatus.SUBMITTED)) {
      throw new Error(`Cannot submit report in status: ${this._status.value}`);
    }

    this._status = ReportStatus.SUBMITTED;
    this._submittedByUserId = submittedByUserId;
    this._submittedAt = new Date();
    this._submissionMethod = submissionMethod || this._submissionMethod;
    this._externalSubmissionId = externalSubmissionId;
    this._updatedAt = new Date();

    // Raise domain event
    this.addDomainEvent(
      new ReportSubmittedEvent(
        this.id,
        this._reportType.value,
        this._regulatoryAgency,
        this._externalSubmissionId,
      ),
    );
  }

  public markAsAccepted(confirmationNumber?: string): void {
    if (!this._status.canTransitionTo(ReportStatus.ACCEPTED)) {
      throw new Error(`Cannot accept report in status: ${this._status.value}`);
    }

    this._status = ReportStatus.ACCEPTED;
    this._confirmationNumber = confirmationNumber;
    this._complianceStatus = 'compliant';
    this._updatedAt = new Date();
  }

  public checkForOverdue(): void {
    if (this._status.isTerminal()) return;

    const now = new Date();
    const checkDate = this._gracePeriodEnd || this._dueDate;

    if (now > checkDate && this._status.value !== 'overdue') {
      this._status = ReportStatus.OVERDUE;
      this._updatedAt = new Date();

      // Raise domain event
      this.addDomainEvent(
        new ReportOverdueEvent(
          this.id,
          this._reportType.value,
          this._regulatoryAgency,
          this._dueDate,
        ),
      );
    }
  }

  public retrySubmission(): void {
    if (this._retryCount >= this._maxRetries) {
      throw new Error(`Maximum retry attempts (${this._maxRetries}) exceeded`);
    }

    this._retryCount++;
    this._lastRetryAt = new Date();
    this._updatedAt = new Date();
  }

  public setValidationResult(
    validationStatus: string,
    errors?: Record<string, unknown>[],
  ): void {
    this._validationStatus = validationStatus;
    this._validationErrors = errors;
    this._updatedAt = new Date();
  }

  public setComplianceStatus(complianceStatus: string): void {
    this._complianceStatus = complianceStatus;
    this._updatedAt = new Date();
  }

  public attachFile(attachment: Record<string, unknown>): void {
    if (!this._attachments) {
      this._attachments = [];
    }

    this._attachments.push({
      ...attachment,
      attachedAt: new Date(),
    });

    this._updatedAt = new Date();
  }

  public associatePermit(permitId: string): void {
    this._permitId = permitId;
    this._updatedAt = new Date();
  }

  public associateIncident(incidentId: string): void {
    this._incidentId = incidentId;
    this._updatedAt = new Date();
  }

  public associateEnvironmentalMonitoring(monitoringId: string): void {
    this._environmentalMonitoringId = monitoringId;
    this._updatedAt = new Date();
  }

  public associateWasteManagement(wasteId: string): void {
    this._wasteManagementId = wasteId;
    this._updatedAt = new Date();
  }

  public scheduleNextAutoGeneration(nextDate: Date): void {
    this._nextAutoGeneration = nextDate;
    this._updatedAt = new Date();
  }

  // Business logic queries
  public isOverdue(): boolean {
    if (this._status.isTerminal()) return false;

    const now = new Date();
    const checkDate = this._gracePeriodEnd || this._dueDate;
    return now > checkDate;
  }

  public isAutoGeneratable(): boolean {
    return this._isAutoGenerated && this._nextAutoGeneration
      ? new Date() >= this._nextAutoGeneration
      : false;
  }

  public canAutoSubmit(): boolean {
    return this._autoSubmissionEnabled && this._status.value === 'approved';
  }

  public requiresValidation(): boolean {
    return (
      this._validationStatus === 'pending' && this._status.value === 'generated'
    );
  }

  public hasValidationErrors(): boolean {
    return (
      this._validationStatus === 'invalid' && !!this._validationErrors?.length
    );
  }

  public isCompliant(): boolean {
    return this._complianceStatus === 'compliant';
  }

  public isReadyForSubmission(): boolean {
    return (
      this._status.value === 'approved' &&
      this._validationStatus === 'valid' &&
      (!this._filingFee || this._paymentStatus === 'paid')
    );
  }

  // Entity interface implementation
  public getId(): { getValue(): string } {
    return { getValue: () => this._id };
  }

  // Getters
  public get id(): string {
    return this._id;
  }

  public get organizationId(): string {
    return this._organizationId;
  }

  public get wellId(): string | undefined {
    return this._wellId;
  }

  public get reportType(): ReportType {
    return this._reportType;
  }

  public get reportSubType(): string | undefined {
    return this._reportSubType;
  }

  public get regulatoryAgency(): string {
    return this._regulatoryAgency;
  }

  public get reportingPeriod(): string {
    return this._reportingPeriod;
  }

  public get reportingPeriodStart(): Date {
    return this._reportingPeriodStart;
  }

  public get reportingPeriodEnd(): Date {
    return this._reportingPeriodEnd;
  }

  public get dueDate(): Date {
    return this._dueDate;
  }

  public get gracePeriodEnd(): Date | undefined {
    return this._gracePeriodEnd;
  }

  public get status(): ReportStatus {
    return this._status;
  }

  public get priority(): string {
    return this._priority;
  }

  public get generatedByUserId(): string | undefined {
    return this._generatedByUserId;
  }

  public get reviewedByUserId(): string | undefined {
    return this._reviewedByUserId;
  }

  public get submittedByUserId(): string | undefined {
    return this._submittedByUserId;
  }

  public get generatedAt(): Date | undefined {
    return this._generatedAt;
  }

  public get reviewedAt(): Date | undefined {
    return this._reviewedAt;
  }

  public get submittedAt(): Date | undefined {
    return this._submittedAt;
  }

  public get externalSubmissionId(): string | undefined {
    return this._externalSubmissionId;
  }

  public get confirmationNumber(): string | undefined {
    return this._confirmationNumber;
  }

  public get submissionMethod(): string {
    return this._submissionMethod;
  }

  public get reportData(): Record<string, unknown> | undefined {
    return this._reportData;
  }

  public get reportMetadata(): Record<string, unknown> | undefined {
    return this._reportMetadata;
  }

  public get attachments(): Record<string, unknown>[] | undefined {
    return this._attachments;
  }

  public get validationStatus(): string {
    return this._validationStatus;
  }

  public get validationErrors(): Record<string, unknown>[] | undefined {
    return this._validationErrors;
  }

  public get complianceStatus(): string {
    return this._complianceStatus;
  }

  public get filingFee(): number | undefined {
    return this._filingFee;
  }

  public get paymentStatus(): string {
    return this._paymentStatus;
  }

  public get isAutoGenerated(): boolean {
    return this._isAutoGenerated;
  }

  public get autoSubmissionEnabled(): boolean {
    return this._autoSubmissionEnabled;
  }

  public get nextAutoGeneration(): Date | undefined {
    return this._nextAutoGeneration;
  }

  public get retryCount(): number {
    return this._retryCount;
  }

  public get lastRetryAt(): Date | undefined {
    return this._lastRetryAt;
  }

  public get maxRetries(): number {
    return this._maxRetries;
  }

  public get permitId(): string | undefined {
    return this._permitId;
  }

  public get incidentId(): string | undefined {
    return this._incidentId;
  }

  public get environmentalMonitoringId(): string | undefined {
    return this._environmentalMonitoringId;
  }

  public get wasteManagementId(): string | undefined {
    return this._wasteManagementId;
  }

  public get notes(): string | undefined {
    return this._notes;
  }

  public get createdAt(): Date {
    return this._createdAt;
  }

  public get updatedAt(): Date {
    return this._updatedAt;
  }

  // Setters for reconstruction from persistence
  public set status(value: ReportStatus) {
    this._status = value;
  }

  public set priority(value: string) {
    this._priority = value;
  }

  public set generatedByUserId(value: string | undefined) {
    this._generatedByUserId = value;
  }

  public set reviewedByUserId(value: string | undefined) {
    this._reviewedByUserId = value;
  }

  public set submittedByUserId(value: string | undefined) {
    this._submittedByUserId = value;
  }

  public set generatedAt(value: Date | undefined) {
    this._generatedAt = value;
  }

  public set reviewedAt(value: Date | undefined) {
    this._reviewedAt = value;
  }

  public set submittedAt(value: Date | undefined) {
    this._submittedAt = value;
  }

  public set externalSubmissionId(value: string | undefined) {
    this._externalSubmissionId = value;
  }

  public set confirmationNumber(value: string | undefined) {
    this._confirmationNumber = value;
  }

  public set submissionMethod(value: string) {
    this._submissionMethod = value;
  }

  public set reportData(value: Record<string, unknown> | undefined) {
    this._reportData = value;
  }

  public set reportMetadata(value: Record<string, unknown> | undefined) {
    this._reportMetadata = value;
  }

  public set attachments(value: Record<string, unknown>[] | undefined) {
    this._attachments = value;
  }

  public set validationStatus(value: string) {
    this._validationStatus = value;
  }

  public set validationErrors(value: Record<string, unknown>[] | undefined) {
    this._validationErrors = value;
  }

  public set complianceStatus(value: string) {
    this._complianceStatus = value;
  }

  public set filingFee(value: number | undefined) {
    this._filingFee = value;
  }

  public set paymentStatus(value: string) {
    this._paymentStatus = value;
  }

  public set isAutoGenerated(value: boolean) {
    this._isAutoGenerated = value;
  }

  public set autoSubmissionEnabled(value: boolean) {
    this._autoSubmissionEnabled = value;
  }

  public set nextAutoGeneration(value: Date | undefined) {
    this._nextAutoGeneration = value;
  }

  public set retryCount(value: number) {
    this._retryCount = value;
  }

  public set lastRetryAt(value: Date | undefined) {
    this._lastRetryAt = value;
  }

  public set maxRetries(value: number) {
    this._maxRetries = value;
  }

  public set permitId(value: string | undefined) {
    this._permitId = value;
  }

  public set incidentId(value: string | undefined) {
    this._incidentId = value;
  }

  public set environmentalMonitoringId(value: string | undefined) {
    this._environmentalMonitoringId = value;
  }

  public set wasteManagementId(value: string | undefined) {
    this._wasteManagementId = value;
  }

  public set notes(value: string | undefined) {
    this._notes = value;
  }

  public set createdAt(value: Date) {
    this._createdAt = value;
  }

  public set updatedAt(value: Date) {
    this._updatedAt = value;
  }

  /**
   * Convert entity to persistence format for database storage
   */
  public toPersistence(): Record<string, unknown> {
    return {
      id: this._id,
      organizationId: this._organizationId,
      wellId: this._wellId,
      reportType: this._reportType.value,
      reportSubType: this._reportSubType,
      regulatoryAgency: this._regulatoryAgency,
      reportingPeriod: this._reportingPeriod,
      reportingPeriodStart: this._reportingPeriodStart,
      reportingPeriodEnd: this._reportingPeriodEnd,
      dueDate: this._dueDate,
      gracePeriodEnd: this._gracePeriodEnd,
      status: this._status.value,
      priority: this._priority,
      generatedAt: this._generatedAt,
      generatedByUserId: this._generatedByUserId,
      reviewedAt: this._reviewedAt,
      reviewedByUserId: this._reviewedByUserId,
      submittedAt: this._submittedAt,
      submittedByUserId: this._submittedByUserId,
      externalSubmissionId: this._externalSubmissionId,
      confirmationNumber: this._confirmationNumber,
      submissionMethod: this._submissionMethod,
      reportData: this._reportData,
      reportMetadata: this._reportMetadata,
      attachments: this._attachments,
      validationStatus: this._validationStatus,
      validationErrors: this._validationErrors,
      complianceStatus: this._complianceStatus,
      filingFee: this._filingFee,
      paymentStatus: this._paymentStatus,
      isAutoGenerated: this._isAutoGenerated,
      autoSubmissionEnabled: this._autoSubmissionEnabled,
      nextAutoGeneration: this._nextAutoGeneration,
      retryCount: this._retryCount,
      lastRetryAt: this._lastRetryAt,
      maxRetries: this._maxRetries,
      notes: this._notes,
      createdAt: this._createdAt,
      updatedAt: this._updatedAt,
      permitId: this._permitId,
      incidentId: this._incidentId,
      environmentalMonitoringId: this._environmentalMonitoringId,
      wasteManagementId: this._wasteManagementId,
    };
  }

  /**
   * Set optional properties from persistence data
   */
  private static setOptionalProperties(
    report: RegulatoryReport,
    data: Record<string, unknown>,
  ): void {
    const propertySetters: Record<
      string,
      (r: RegulatoryReport, v: unknown) => void
    > = {
      wellId: (r, v) => (r._wellId = v as string),
      reportSubType: (r, v) => (r._reportSubType = v as string),
      gracePeriodEnd: (r, v) => (r._gracePeriodEnd = v as Date),
      generatedAt: (r, v) => (r._generatedAt = v as Date),
      generatedByUserId: (r, v) => (r._generatedByUserId = v as string),
      reviewedAt: (r, v) => (r._reviewedAt = v as Date),
      reviewedByUserId: (r, v) => (r._reviewedByUserId = v as string),
      submittedAt: (r, v) => (r._submittedAt = v as Date),
      submittedByUserId: (r, v) => (r._submittedByUserId = v as string),
      externalSubmissionId: (r, v) => (r._externalSubmissionId = v as string),
      confirmationNumber: (r, v) => (r._confirmationNumber = v as string),
      reportData: (r, v) => (r._reportData = v as Record<string, unknown>),
      reportMetadata: (r, v) =>
        (r._reportMetadata = v as Record<string, unknown>),
      attachments: (r, v) => (r._attachments = v as Record<string, unknown>[]),
      validationErrors: (r, v) =>
        (r._validationErrors = v as Record<string, unknown>[]),
      filingFee: (r, v) => (r._filingFee = parseFloat(v as string)),
      nextAutoGeneration: (r, v) => (r._nextAutoGeneration = v as Date),
      lastRetryAt: (r, v) => (r._lastRetryAt = v as Date),
      notes: (r, v) => (r._notes = v as string),
      permitId: (r, v) => (r._permitId = v as string),
      incidentId: (r, v) => (r._incidentId = v as string),
      environmentalMonitoringId: (r, v) =>
        (r._environmentalMonitoringId = v as string),
      wasteManagementId: (r, v) => (r._wasteManagementId = v as string),
    };

    /* eslint-disable security/detect-object-injection */
    for (const [key, setter] of Object.entries(propertySetters)) {
      if (data[key]) {
        setter(report, data[key]);
      }
    }
    /* eslint-enable security/detect-object-injection */
  }

  /**
   * Reconstruct entity from persistence data
   */
  public static fromPersistence(
    data: Record<string, unknown>,
  ): RegulatoryReport {
    const report = new RegulatoryReport(
      data.id as string,
      data.organizationId as string,
      ReportType.fromString(data.reportType as string),
      data.regulatoryAgency as string,
      data.reportingPeriod as string,
      data.reportingPeriodStart as Date,
      data.reportingPeriodEnd as Date,
      data.dueDate as Date,
    );

    // Set optional properties
    this.setOptionalProperties(report, data);

    // Set required properties with defaults
    report._status = ReportStatus.fromString(
      (data.status as string) || 'draft',
    );
    report._priority = (data.priority as string) || 'normal';
    report._submissionMethod =
      (data.submissionMethod as string) || 'electronic';
    report._validationStatus = (data.validationStatus as string) || 'pending';
    report._complianceStatus = (data.complianceStatus as string) || 'unknown';
    report._paymentStatus = (data.paymentStatus as string) || 'not_required';
    report._isAutoGenerated = (data.isAutoGenerated as boolean) || false;
    report._autoSubmissionEnabled =
      (data.autoSubmissionEnabled as boolean) || false;
    report._retryCount = (data.retryCount as number) || 0;
    report._maxRetries = (data.maxRetries as number) || 3;
    report._createdAt = data.createdAt as Date;
    report._updatedAt = data.updatedAt as Date;

    return report;
  }
}
