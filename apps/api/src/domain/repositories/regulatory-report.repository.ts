import { RegulatoryReport } from '../entities/regulatory-report.entity';

/**
 * Repository interface for Regulatory Report aggregate
 * Defines the contract for regulatory report data access operations
 */
export interface RegulatoryReportRepository {
  /**
   * Save a regulatory report to the repository
   * @param report The regulatory report aggregate to save
   */
  save(report: RegulatoryReport): Promise<void>;

  /**
   * Save multiple regulatory reports within a unit of work
   * @param reports Array of regulatory reports to save
   */
  saveMany(reports: RegulatoryReport[]): Promise<void>;

  /**
   * Find a regulatory report by its ID
   * @param id The regulatory report ID
   * @returns The regulatory report aggregate or null if not found
   */
  findById(id: string): Promise<RegulatoryReport | null>;

  /**
   * Find regulatory reports by organization
   * @param organizationId The organization ID
   * @param options Query options for pagination and filtering
   * @returns Array of regulatory reports
   */
  findByOrganizationId(
    organizationId: string,
    options?: {
      limit?: number;
      offset?: number;
      reportType?: string;
      status?: string;
      regulatoryAgency?: string;
      wellId?: string;
      startDate?: Date;
      endDate?: Date;
      priority?: string;
      isOverdue?: boolean;
      isAutoGenerated?: boolean;
    },
  ): Promise<RegulatoryReport[]>;

  /**
   * Find regulatory reports by well ID
   * @param wellId The well ID
   * @returns Array of regulatory reports associated with the well
   */
  findByWellId(wellId: string): Promise<RegulatoryReport[]>;

  /**
   * Find regulatory reports by report type
   * @param reportType The report type to filter by
   * @param organizationId Optional organization filter
   * @returns Array of regulatory reports of the specified type
   */
  findByReportType(
    reportType: string,
    organizationId?: string,
  ): Promise<RegulatoryReport[]>;

  /**
   * Find regulatory reports by regulatory agency
   * @param regulatoryAgency The regulatory agency to filter by
   * @param organizationId Optional organization filter
   * @returns Array of regulatory reports for the specified agency
   */
  findByRegulatoryAgency(
    regulatoryAgency: string,
    organizationId?: string,
  ): Promise<RegulatoryReport[]>;

  /**
   * Find regulatory reports by status
   * @param status The status to filter by
   * @param organizationId Optional organization filter
   * @returns Array of regulatory reports with the specified status
   */
  findByStatus(
    status: string,
    organizationId?: string,
  ): Promise<RegulatoryReport[]>;

  /**
   * Find overdue regulatory reports
   * @param organizationId Optional organization filter
   * @param gracePeriodDays Optional grace period in days (default: 0)
   * @returns Array of overdue regulatory reports
   */
  findOverdue(
    organizationId?: string,
    gracePeriodDays?: number,
  ): Promise<RegulatoryReport[]>;

  /**
   * Find regulatory reports due within a certain number of days
   * @param daysFromNow Number of days from now to check
   * @param organizationId Optional organization filter
   * @returns Array of regulatory reports due within the specified period
   */
  findDueWithinDays(
    daysFromNow: number,
    organizationId?: string,
  ): Promise<RegulatoryReport[]>;

  /**
   * Find regulatory reports that are ready for auto-generation
   * @param organizationId Optional organization filter
   * @returns Array of regulatory reports ready for auto-generation
   */
  findReadyForAutoGeneration(
    organizationId?: string,
  ): Promise<RegulatoryReport[]>;

  /**
   * Find regulatory reports that are ready for auto-submission
   * @param organizationId Optional organization filter
   * @returns Array of regulatory reports ready for auto-submission
   */
  findReadyForAutoSubmission(
    organizationId?: string,
  ): Promise<RegulatoryReport[]>;

  /**
   * Find regulatory reports that require validation
   * @param organizationId Optional organization filter
   * @returns Array of regulatory reports requiring validation
   */
  findRequiringValidation(organizationId?: string): Promise<RegulatoryReport[]>;

  /**
   * Find regulatory reports by permit ID
   * @param permitId The permit ID to filter by
   * @returns Array of regulatory reports associated with the permit
   */
  findByPermitId(permitId: string): Promise<RegulatoryReport[]>;

  /**
   * Find regulatory reports by incident ID
   * @param incidentId The incident ID to filter by
   * @returns Array of regulatory reports associated with the incident
   */
  findByIncidentId(incidentId: string): Promise<RegulatoryReport[]>;

  /**
   * Find regulatory reports by environmental monitoring ID
   * @param monitoringId The environmental monitoring ID to filter by
   * @returns Array of regulatory reports associated with the monitoring record
   */
  findByEnvironmentalMonitoringId(
    monitoringId: string,
  ): Promise<RegulatoryReport[]>;

  /**
   * Find regulatory reports by waste management ID
   * @param wasteId The waste management ID to filter by
   * @returns Array of regulatory reports associated with the waste record
   */
  findByWasteManagementId(wasteId: string): Promise<RegulatoryReport[]>;

  /**
   * Count regulatory reports by status for an organization
   * @param organizationId The organization ID
   * @returns Object with status counts
   */
  countByStatus(organizationId: string): Promise<Record<string, number>>;

  /**
   * Count regulatory reports by type for an organization
   * @param organizationId The organization ID
   * @returns Object with report type counts
   */
  countByReportType(organizationId: string): Promise<Record<string, number>>;

  /**
   * Count regulatory reports by regulatory agency for an organization
   * @param organizationId The organization ID
   * @returns Object with regulatory agency counts
   */
  countByRegulatoryAgency(
    organizationId: string,
  ): Promise<Record<string, number>>;

  /**
   * Check if a regulatory report exists for the given parameters
   * @param organizationId The organization ID
   * @param reportType The report type
   * @param reportingPeriodStart The reporting period start date
   * @param reportingPeriodEnd The reporting period end date
   * @param excludeId Optional ID to exclude from check (for updates)
   * @returns True if report exists
   */
  existsByParameters(
    organizationId: string,
    reportType: string,
    reportingPeriodStart: Date,
    reportingPeriodEnd: Date,
    excludeId?: string,
  ): Promise<boolean>;

  /**
   * Delete a regulatory report by ID
   * @param id The regulatory report ID to delete
   */
  delete(id: string): Promise<void>;

  /**
   * Get compliance statistics for an organization
   * @param organizationId The organization ID
   * @param dateRange Optional date range for statistics
   * @returns Compliance statistics object
   */
  getComplianceStatistics(
    organizationId: string,
    dateRange?: { start: Date; end: Date },
  ): Promise<{
    totalReports: number;
    submittedOnTime: number;
    submittedLate: number;
    overdue: number;
    complianceRate: number;
    byReportType: Record<
      string,
      { total: number; compliant: number; rate: number }
    >;
    byAgency: Record<
      string,
      { total: number; compliant: number; rate: number }
    >;
  }>;
}
